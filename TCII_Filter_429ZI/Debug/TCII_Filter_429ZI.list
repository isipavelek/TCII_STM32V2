
TCII_Filter_429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005b40  08005b40  00006b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b58  08005b58  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b58  08005b58  00006b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b60  08005b60  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b60  08005b60  00006b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b64  08005b64  00006b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005b68  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00006bf8  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006c04  20006c04  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017fb2  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000349e  00000000  00000000  0001efee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  00022490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9a  00000000  00000000  000238d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002834f  00000000  00000000  0002486a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6a0  00000000  00000000  0004cbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eff40  00000000  00000000  00068259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158199  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005404  00000000  00000000  001581dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0015d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005b28 	.word	0x08005b28

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08005b28 	.word	0x08005b28

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_ADC_ConCpltCallback>:
extern float32_t OutputB[SAMPLES_PER_BLOCK];

#define SAMPLE_RATE 44100
#define CARGANDO_A false

void HAL_ADC_ConCpltCallback(ADC_HandleTypeDef* hadc){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	static uint16_t index = 0;

	uint16_t val=ADC_Read();
 80004e4:	f000 f87a 	bl	80005dc <ADC_Read>
 80004e8:	4603      	mov	r3, r0
 80004ea:	81fb      	strh	r3, [r7, #14]

	if (estado==CARGANDO_A){
 80004ec:	4b2d      	ldr	r3, [pc, #180]	@ (80005a4 <HAL_ADC_ConCpltCallback+0xc8>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d119      	bne.n	8000528 <HAL_ADC_ConCpltCallback+0x4c>
		InputA[index] = val;
 80004f4:	4b2c      	ldr	r3, [pc, #176]	@ (80005a8 <HAL_ADC_ConCpltCallback+0xcc>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	89fa      	ldrh	r2, [r7, #14]
 80004fa:	ee07 2a90 	vmov	s15, r2
 80004fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000502:	4a2a      	ldr	r2, [pc, #168]	@ (80005ac <HAL_ADC_ConCpltCallback+0xd0>)
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	edc3 7a00 	vstr	s15, [r3]
		DAC_Write(OutputA[index]);
 800050c:	4b26      	ldr	r3, [pc, #152]	@ (80005a8 <HAL_ADC_ConCpltCallback+0xcc>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	4a27      	ldr	r2, [pc, #156]	@ (80005b0 <HAL_ADC_ConCpltCallback+0xd4>)
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	4413      	add	r3, r2
 8000516:	edd3 7a00 	vldr	s15, [r3]
 800051a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800051e:	ee17 0a90 	vmov	r0, s15
 8000522:	f000 f86f 	bl	8000604 <DAC_Write>
 8000526:	e018      	b.n	800055a <HAL_ADC_ConCpltCallback+0x7e>
	}
	else {
		InputB[index] = val ;
 8000528:	4b1f      	ldr	r3, [pc, #124]	@ (80005a8 <HAL_ADC_ConCpltCallback+0xcc>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	89fa      	ldrh	r2, [r7, #14]
 800052e:	ee07 2a90 	vmov	s15, r2
 8000532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000536:	4a1f      	ldr	r2, [pc, #124]	@ (80005b4 <HAL_ADC_ConCpltCallback+0xd8>)
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	edc3 7a00 	vstr	s15, [r3]
		DAC_Write(OutputB[index]);
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <HAL_ADC_ConCpltCallback+0xcc>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	4a1c      	ldr	r2, [pc, #112]	@ (80005b8 <HAL_ADC_ConCpltCallback+0xdc>)
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	edd3 7a00 	vldr	s15, [r3]
 800054e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000552:	ee17 0a90 	vmov	r0, s15
 8000556:	f000 f855 	bl	8000604 <DAC_Write>
	}

	index++;
 800055a:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <HAL_ADC_ConCpltCallback+0xcc>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	b29a      	uxth	r2, r3
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <HAL_ADC_ConCpltCallback+0xcc>)
 8000564:	801a      	strh	r2, [r3, #0]
	if (index == SAMPLES_PER_BLOCK) {
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <HAL_ADC_ConCpltCallback+0xcc>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800056e:	d114      	bne.n	800059a <HAL_ADC_ConCpltCallback+0xbe>
		index = 0;
 8000570:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <HAL_ADC_ConCpltCallback+0xcc>)
 8000572:	2200      	movs	r2, #0
 8000574:	801a      	strh	r2, [r3, #0]
		if(estado==CARGANDO_A)procesar=PROCESAR_A;
 8000576:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <HAL_ADC_ConCpltCallback+0xc8>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d103      	bne.n	8000586 <HAL_ADC_ConCpltCallback+0xaa>
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <HAL_ADC_ConCpltCallback+0xe0>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	e002      	b.n	800058c <HAL_ADC_ConCpltCallback+0xb0>
		else procesar=PROCESAR_B;
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <HAL_ADC_ConCpltCallback+0xe0>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
		estado ^= 1;
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <HAL_ADC_ConCpltCallback+0xc8>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f083 0301 	eor.w	r3, r3, #1
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b03      	ldr	r3, [pc, #12]	@ (80005a4 <HAL_ADC_ConCpltCallback+0xc8>)
 8000598:	701a      	strb	r2, [r3, #0]
	}



}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000028 	.word	0x20000028
 80005a8:	2000002a 	.word	0x2000002a
 80005ac:	20002c00 	.word	0x20002c00
 80005b0:	20004c00 	.word	0x20004c00
 80005b4:	20003c00 	.word	0x20003c00
 80005b8:	20005c00 	.word	0x20005c00
 80005bc:	20000029 	.word	0x20000029

080005c0 <ADC_Init>:

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "adc_port.h"

void ADC_Init(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <ADC_Init+0x14>)
 80005c6:	f002 f89f 	bl	8002708 <HAL_ADC_Start_IT>

	HAL_TIM_Base_Start(&htim2);
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <ADC_Init+0x18>)
 80005cc:	f004 f9d6 	bl	800497c <HAL_TIM_Base_Start>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000374 	.word	0x20000374
 80005d8:	20000480 	.word	0x20000480

080005dc <ADC_Read>:
uint32_t ADC_Read(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	return (HAL_ADC_GetValue(&hadc1));
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <ADC_Read+0x10>)
 80005e2:	f002 fa7f 	bl	8002ae4 <HAL_ADC_GetValue>
 80005e6:	4603      	mov	r3, r0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000374 	.word	0x20000374

080005f0 <DAC_Init>:

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "dac_port.h"

void DAC_Init(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

	HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 80005f4:	2100      	movs	r1, #0
 80005f6:	4802      	ldr	r0, [pc, #8]	@ (8000600 <DAC_Init+0x10>)
 80005f8:	f002 fe07 	bl	800320a <HAL_DAC_Start>

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200003bc 	.word	0x200003bc

08000604 <DAC_Write>:

void DAC_Write(uint32_t value){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R, value);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	4803      	ldr	r0, [pc, #12]	@ (8000620 <DAC_Write+0x1c>)
 8000614:	f002 fe4b 	bl	80032ae <HAL_DAC_SetValue>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200003bc 	.word	0x200003bc

08000624 <Hard_Init>:
/**
 * brief Inicialización de HW
 *
 */

void Hard_Init(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_Init();
 8000628:	f001 ff94 	bl	8002554 <HAL_Init>
	SystemClock_Config();
 800062c:	f000 f812 	bl	8000654 <SystemClock_Config>
	MX_GPIO_Init();
 8000630:	f000 f9f4 	bl	8000a1c <MX_GPIO_Init>
	MX_ETH_Init();
 8000634:	f000 f900 	bl	8000838 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000638:	f000 f998 	bl	800096c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800063c:	f000 f9c0 	bl	80009c0 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 8000640:	f000 f87e 	bl	8000740 <MX_ADC1_Init>
	MX_DAC_Init();
 8000644:	f000 f8ce 	bl	80007e4 <MX_DAC_Init>
	MX_TIM2_Init();
 8000648:	f000 f944 	bl	80008d4 <MX_TIM2_Init>
	MX_NVIC_Init();
 800064c:	f000 f86c 	bl	8000728 <MX_NVIC_Init>

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	@ 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fa34 	bl	8005ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a27      	ldr	r2, [pc, #156]	@ (8000720 <SystemClock_Config+0xcc>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b25      	ldr	r3, [pc, #148]	@ (8000720 <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SystemClock_Config+0xd0>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c8:	23a8      	movs	r3, #168	@ 0xa8
 80006ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d0:	2307      	movs	r3, #7
 80006d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 fc67 	bl	8003fac <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e4:	f000 fa48 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2105      	movs	r1, #5
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fec8 	bl	800449c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000712:	f000 fa31 	bl	8000b78 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	@ 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
void MX_NVIC_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2012      	movs	r0, #18
 8000732:	f002 fd12 	bl	800315a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000736:	2012      	movs	r0, #18
 8000738:	f002 fd2b 	bl	8003192 <HAL_NVIC_EnableIRQ>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0


  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]


  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000752:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <MX_ADC1_Init+0x9c>)
 8000754:	4a22      	ldr	r2, [pc, #136]	@ (80007e0 <MX_ADC1_Init+0xa0>)
 8000756:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000758:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <MX_ADC1_Init+0x9c>)
 800075a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800075e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000760:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <MX_ADC1_Init+0x9c>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000766:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <MX_ADC1_Init+0x9c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_ADC1_Init+0x9c>)
 800076e:	2201      	movs	r2, #1
 8000770:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000772:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_ADC1_Init+0x9c>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_ADC1_Init+0x9c>)
 800077c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_ADC1_Init+0x9c>)
 8000784:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000788:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078a:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_ADC1_Init+0x9c>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_ADC1_Init+0x9c>)
 8000792:	2201      	movs	r2, #1
 8000794:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_ADC1_Init+0x9c>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_ADC1_Init+0x9c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a4:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_ADC1_Init+0x9c>)
 80007a6:	f001 ff6b 	bl	8002680 <HAL_ADC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80007b0:	f000 f9e2 	bl	8000b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_ADC1_Init+0x9c>)
 80007c6:	f002 f9b9 	bl	8002b3c <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80007d0:	f000 f9d2 	bl	8000b78 <Error_Handler>
  }


}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000374 	.word	0x20000374
 80007e0:	40012000 	.word	0x40012000

080007e4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0



  DAC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]


  hdac.Instance = DAC;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_DAC_Init+0x4c>)
 80007f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000834 <MX_DAC_Init+0x50>)
 80007f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007f8:	480d      	ldr	r0, [pc, #52]	@ (8000830 <MX_DAC_Init+0x4c>)
 80007fa:	f002 fce4 	bl	80031c6 <HAL_DAC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000804:	f000 f9b8 	bl	8000b78 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	@ (8000830 <MX_DAC_Init+0x4c>)
 8000818:	f002 fd6e 	bl	80032f8 <HAL_DAC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000822:	f000 f9a9 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200003bc 	.word	0x200003bc
 8000834:	40007400 	.word	0x40007400

08000838 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
void MX_ETH_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  heth.Instance = ETH;
 800083c:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_ETH_Init+0x84>)
 800083e:	4a20      	ldr	r2, [pc, #128]	@ (80008c0 <MX_ETH_Init+0x88>)
 8000840:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000842:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <MX_ETH_Init+0x8c>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000848:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <MX_ETH_Init+0x8c>)
 800084a:	2280      	movs	r2, #128	@ 0x80
 800084c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800084e:	4b1d      	ldr	r3, [pc, #116]	@ (80008c4 <MX_ETH_Init+0x8c>)
 8000850:	22e1      	movs	r2, #225	@ 0xe1
 8000852:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <MX_ETH_Init+0x8c>)
 8000856:	2200      	movs	r2, #0
 8000858:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800085a:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_ETH_Init+0x8c>)
 800085c:	2200      	movs	r2, #0
 800085e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000860:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <MX_ETH_Init+0x8c>)
 8000862:	2200      	movs	r2, #0
 8000864:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_ETH_Init+0x84>)
 8000868:	4a16      	ldr	r2, [pc, #88]	@ (80008c4 <MX_ETH_Init+0x8c>)
 800086a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_ETH_Init+0x84>)
 800086e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000872:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_ETH_Init+0x84>)
 8000876:	4a14      	ldr	r2, [pc, #80]	@ (80008c8 <MX_ETH_Init+0x90>)
 8000878:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_ETH_Init+0x84>)
 800087c:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <MX_ETH_Init+0x94>)
 800087e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_ETH_Init+0x84>)
 8000882:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000886:	615a      	str	r2, [r3, #20]


  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000888:	480c      	ldr	r0, [pc, #48]	@ (80008bc <MX_ETH_Init+0x84>)
 800088a:	f002 fd85 	bl	8003398 <HAL_ETH_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000894:	f000 f970 	bl	8000b78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000898:	2238      	movs	r2, #56	@ 0x38
 800089a:	2100      	movs	r1, #0
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <MX_ETH_Init+0x98>)
 800089e:	f005 f917 	bl	8005ad0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <MX_ETH_Init+0x98>)
 80008a4:	2221      	movs	r2, #33	@ 0x21
 80008a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_ETH_Init+0x98>)
 80008aa:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80008ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008b0:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <MX_ETH_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200003d0 	.word	0x200003d0
 80008c0:	40028000 	.word	0x40028000
 80008c4:	20000a18 	.word	0x20000a18
 80008c8:	200002d4 	.word	0x200002d4
 80008cc:	20000234 	.word	0x20000234
 80008d0:	200001fc 	.word	0x200001fc

080008d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <MX_TIM2_Init+0x94>)
 80008f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_TIM2_Init+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_TIM2_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_TIM2_Init+0x94>)
 8000906:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800090a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_TIM2_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_TIM2_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000918:	4813      	ldr	r0, [pc, #76]	@ (8000968 <MX_TIM2_Init+0x94>)
 800091a:	f003 ffdf 	bl	80048dc <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000924:	f000 f928 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4619      	mov	r1, r3
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <MX_TIM2_Init+0x94>)
 8000936:	f004 f889 	bl	8004a4c <HAL_TIM_ConfigClockSource>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000940:	f000 f91a 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000944:	2320      	movs	r3, #32
 8000946:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_TIM2_Init+0x94>)
 8000952:	f004 fa7d 	bl	8004e50 <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800095c:	f000 f90c 	bl	8000b78 <Error_Handler>
  }


}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000480 	.word	0x20000480

0800096c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_USART3_UART_Init+0x4c>)
 8000972:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <MX_USART3_UART_Init+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <MX_USART3_UART_Init+0x4c>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_USART3_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_USART3_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <MX_USART3_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_USART3_UART_Init+0x4c>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <MX_USART3_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_USART3_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_USART3_UART_Init+0x4c>)
 80009a4:	f004 fad0 	bl	8004f48 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ae:	f000 f8e3 	bl	8000b78 <Error_Handler>
  }


}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200004c8 	.word	0x200004c8
 80009bc:	40004800 	.word	0x40004800

080009c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0


  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009c4:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d4:	2202      	movs	r2, #2
 80009d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	f003 f9b5 	bl	8003d72 <HAL_PCD_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 f8b3 	bl	8000b78 <Error_Handler>
  }

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000050c 	.word	0x2000050c

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	@ 0x30
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	4b4c      	ldr	r3, [pc, #304]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b49      	ldr	r3, [pc, #292]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	4b45      	ldr	r3, [pc, #276]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a44      	ldr	r2, [pc, #272]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b42      	ldr	r3, [pc, #264]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a3d      	ldr	r2, [pc, #244]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a36      	ldr	r2, [pc, #216]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b30      	ldr	r3, [pc, #192]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a28      	ldr	r2, [pc, #160]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <MX_GPIO_Init+0x14c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ae0:	4822      	ldr	r0, [pc, #136]	@ (8000b6c <MX_GPIO_Init+0x150>)
 8000ae2:	f003 f92d 	bl	8003d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2140      	movs	r1, #64	@ 0x40
 8000aea:	4821      	ldr	r0, [pc, #132]	@ (8000b70 <MX_GPIO_Init+0x154>)
 8000aec:	f003 f928 	bl	8003d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	481b      	ldr	r0, [pc, #108]	@ (8000b74 <MX_GPIO_Init+0x158>)
 8000b08:	f002 ff6e 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b0c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4811      	ldr	r0, [pc, #68]	@ (8000b6c <MX_GPIO_Init+0x150>)
 8000b26:	f002 ff5f 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b2a:	2340      	movs	r3, #64	@ 0x40
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <MX_GPIO_Init+0x154>)
 8000b42:	f002 ff51 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b46:	2380      	movs	r3, #128	@ 0x80
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_GPIO_Init+0x154>)
 8000b5a:	f002 ff45 	bl	80039e8 <HAL_GPIO_Init>

}
 8000b5e:	bf00      	nop
 8000b60:	3730      	adds	r7, #48	@ 0x30
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40021800 	.word	0x40021800
 8000b74:	40020800 	.word	0x40020800

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop

  __disable_irq();
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <Error_Handler+0x8>

08000b84 <main>:
float32_t InputB[SAMPLES_PER_BLOCK];
float32_t OutputA[SAMPLES_PER_BLOCK];
float32_t OutputB[SAMPLES_PER_BLOCK];


int main(void){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
	uint32_t index;
	float32_t max;
	Hard_Init();
 8000b8a:	f7ff fd4b 	bl	8000624 <Hard_Init>
	ADC_Init();
 8000b8e:	f7ff fd17 	bl	80005c0 <ADC_Init>
	DAC_Init();
 8000b92:	f7ff fd2d 	bl	80005f0 <DAC_Init>
	//Conversion float to q31
#ifndef float_filter
	arm_float_to_q31(float_fir_taps, fir_taps,FIR_TAP_NUM);
#endif

	arm_max_f32(float_iir_taps,IIR_TAP_NUM,&max,&index);
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	1d3a      	adds	r2, r7, #4
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	4848      	ldr	r0, [pc, #288]	@ (8000cc0 <main+0x13c>)
 8000ba0:	f001 fc41 	bl	8002426 <arm_max_f32>

	if(max>=1)arm_scale_f32(float_iir_taps, ((float32_t)1/((1<<(uint32_t)max))),float_iir_taps,IIR_TAP_NUM );
 8000ba4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb4:	db16      	blt.n	8000be4 <main+0x60>
 8000bb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bbe:	ee17 2a90 	vmov	r2, s15
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4093      	lsls	r3, r2
 8000bc6:	ee07 3a90 	vmov	s15, r3
 8000bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	4939      	ldr	r1, [pc, #228]	@ (8000cc0 <main+0x13c>)
 8000bda:	eeb0 0a47 	vmov.f32	s0, s14
 8000bde:	4838      	ldr	r0, [pc, #224]	@ (8000cc0 <main+0x13c>)
 8000be0:	f000 fb35 	bl	800124e <arm_scale_f32>
	//arm_float_to_q31(float_iir_taps, iir_taps, IIR_TAP_NUM);

	//Inicializa los filtros
	//arm_fir_init_q31(&SFIR,FIR_TAP_NUM,fir_taps,fir_state,SAMPLES_PER_BLOCK);

	arm_fir_init(&SFIR,FIR_TAP_NUM,float_fir_taps,fir_state,SAMPLES_PER_BLOCK);
 8000be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	4b36      	ldr	r3, [pc, #216]	@ (8000cc4 <main+0x140>)
 8000bec:	4a36      	ldr	r2, [pc, #216]	@ (8000cc8 <main+0x144>)
 8000bee:	2165      	movs	r1, #101	@ 0x65
 8000bf0:	4836      	ldr	r0, [pc, #216]	@ (8000ccc <main+0x148>)
 8000bf2:	f001 fbf9 	bl	80023e8 <arm_fir_init_f32>
	arm_biquad_cascade_df1_init(&SIIR,IIR_TAP_NUM/5,float_iir_taps,iir_state);
 8000bf6:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <main+0x14c>)
 8000bf8:	4a31      	ldr	r2, [pc, #196]	@ (8000cc0 <main+0x13c>)
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	4835      	ldr	r0, [pc, #212]	@ (8000cd4 <main+0x150>)
 8000bfe:	f000 fd14 	bl	800162a <arm_biquad_cascade_df1_init_f32>


	while(true){
		if(procesar){
 8000c02:	4b35      	ldr	r3, [pc, #212]	@ (8000cd8 <main+0x154>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0fb      	beq.n	8000c02 <main+0x7e>
			switch (filter){
 8000c0a:	4b34      	ldr	r3, [pc, #208]	@ (8000cdc <main+0x158>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d02a      	beq.n	8000c68 <main+0xe4>
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	dc50      	bgt.n	8000cb8 <main+0x134>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <main+0x9c>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d038      	beq.n	8000c90 <main+0x10c>
 8000c1e:	e04b      	b.n	8000cb8 <main+0x134>
				case TALKTHROUGH:
						for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
 8000c20:	2300      	movs	r3, #0
 8000c22:	81fb      	strh	r3, [r7, #14]
 8000c24:	e01b      	b.n	8000c5e <main+0xda>
							if(procesar==PROCESAR_A)OutputA[i]=InputA[i];
 8000c26:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd8 <main+0x154>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d10a      	bne.n	8000c44 <main+0xc0>
 8000c2e:	89fa      	ldrh	r2, [r7, #14]
 8000c30:	89fb      	ldrh	r3, [r7, #14]
 8000c32:	492b      	ldr	r1, [pc, #172]	@ (8000ce0 <main+0x15c>)
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	440a      	add	r2, r1
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	492a      	ldr	r1, [pc, #168]	@ (8000ce4 <main+0x160>)
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	e009      	b.n	8000c58 <main+0xd4>
							else OutputB[i]=InputB[i];
 8000c44:	89fa      	ldrh	r2, [r7, #14]
 8000c46:	89fb      	ldrh	r3, [r7, #14]
 8000c48:	4927      	ldr	r1, [pc, #156]	@ (8000ce8 <main+0x164>)
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	440a      	add	r2, r1
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	4926      	ldr	r1, [pc, #152]	@ (8000cec <main+0x168>)
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	601a      	str	r2, [r3, #0]
						for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	81fb      	strh	r3, [r7, #14]
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c64:	d3df      	bcc.n	8000c26 <main+0xa2>
						}
						break;
 8000c66:	e027      	b.n	8000cb8 <main+0x134>

				case IIR:
						if(procesar==PROCESAR_A){
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <main+0x154>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d107      	bne.n	8000c80 <main+0xfc>
							filter_bicuad_cascade(&SIIR, InputA, OutputA, SAMPLES_PER_BLOCK);
 8000c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce4 <main+0x160>)
 8000c76:	491a      	ldr	r1, [pc, #104]	@ (8000ce0 <main+0x15c>)
 8000c78:	4816      	ldr	r0, [pc, #88]	@ (8000cd4 <main+0x150>)
 8000c7a:	f000 fb5b 	bl	8001334 <arm_biquad_cascade_df1_f32>
						}else {
							filter_bicuad_cascade(&SIIR, InputB, OutputB, SAMPLES_PER_BLOCK);
						}
						break;
 8000c7e:	e01b      	b.n	8000cb8 <main+0x134>
							filter_bicuad_cascade(&SIIR, InputB, OutputB, SAMPLES_PER_BLOCK);
 8000c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c84:	4a19      	ldr	r2, [pc, #100]	@ (8000cec <main+0x168>)
 8000c86:	4918      	ldr	r1, [pc, #96]	@ (8000ce8 <main+0x164>)
 8000c88:	4812      	ldr	r0, [pc, #72]	@ (8000cd4 <main+0x150>)
 8000c8a:	f000 fb53 	bl	8001334 <arm_biquad_cascade_df1_f32>
						break;
 8000c8e:	e013      	b.n	8000cb8 <main+0x134>

				case FIR:
						if(procesar==PROCESAR_A){
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <main+0x154>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d107      	bne.n	8000ca8 <main+0x124>
							arm_fir(&SFIR,InputA, OutputA, SAMPLES_PER_BLOCK);
 8000c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9c:	4a11      	ldr	r2, [pc, #68]	@ (8000ce4 <main+0x160>)
 8000c9e:	4910      	ldr	r1, [pc, #64]	@ (8000ce0 <main+0x15c>)
 8000ca0:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <main+0x148>)
 8000ca2:	f000 fcde 	bl	8001662 <arm_fir_f32>
						}else {
							arm_fir(&SFIR,InputB, OutputB , SAMPLES_PER_BLOCK);
						}
						break;
 8000ca6:	e006      	b.n	8000cb6 <main+0x132>
							arm_fir(&SFIR,InputB, OutputB , SAMPLES_PER_BLOCK);
 8000ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cac:	4a0f      	ldr	r2, [pc, #60]	@ (8000cec <main+0x168>)
 8000cae:	490e      	ldr	r1, [pc, #56]	@ (8000ce8 <main+0x164>)
 8000cb0:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <main+0x148>)
 8000cb2:	f000 fcd6 	bl	8001662 <arm_fir_f32>
						break;
 8000cb6:	bf00      	nop
			}
			procesar=NO_PROCESAR;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <main+0x154>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
		if(procesar){
 8000cbe:	e7a0      	b.n	8000c02 <main+0x7e>
 8000cc0:	200001c0 	.word	0x200001c0
 8000cc4:	20000a38 	.word	0x20000a38
 8000cc8:	2000002c 	.word	0x2000002c
 8000ccc:	20000a20 	.word	0x20000a20
 8000cd0:	20001bc8 	.word	0x20001bc8
 8000cd4:	20000a2c 	.word	0x20000a2c
 8000cd8:	20000029 	.word	0x20000029
 8000cdc:	20000a1e 	.word	0x20000a1e
 8000ce0:	20002c00 	.word	0x20002c00
 8000ce4:	20004c00 	.word	0x20004c00
 8000ce8:	20003c00 	.word	0x20003c00
 8000cec:	20005c00 	.word	0x20005c00

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800

08000d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a17      	ldr	r2, [pc, #92]	@ (8000dbc <HAL_ADC_MspInit+0x7c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d127      	bne.n	8000db2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_ADC_MspInit+0x80>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	4a15      	ldr	r2, [pc, #84]	@ (8000dc0 <HAL_ADC_MspInit+0x80>)
 8000d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <HAL_ADC_MspInit+0x80>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_ADC_MspInit+0x80>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <HAL_ADC_MspInit+0x80>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_ADC_MspInit+0x80>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <HAL_ADC_MspInit+0x84>)
 8000dae:	f002 fe1b 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	@ 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40012000 	.word	0x40012000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a17      	ldr	r2, [pc, #92]	@ (8000e44 <HAL_DAC_MspInit+0x7c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d127      	bne.n	8000e3a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_DAC_MspInit+0x80>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a15      	ldr	r2, [pc, #84]	@ (8000e48 <HAL_DAC_MspInit+0x80>)
 8000df4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <HAL_DAC_MspInit+0x80>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <HAL_DAC_MspInit+0x80>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e48 <HAL_DAC_MspInit+0x80>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <HAL_DAC_MspInit+0x80>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e22:	2310      	movs	r3, #16
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e26:	2303      	movs	r3, #3
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <HAL_DAC_MspInit+0x84>)
 8000e36:	f002 fdd7 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	@ 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40007400 	.word	0x40007400
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	@ 0x38
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a55      	ldr	r2, [pc, #340]	@ (8000fc4 <HAL_ETH_MspInit+0x174>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	f040 80a4 	bne.w	8000fbc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	4b53      	ldr	r3, [pc, #332]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	4a52      	ldr	r2, [pc, #328]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000e7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e84:	4b50      	ldr	r3, [pc, #320]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e8c:	623b      	str	r3, [r7, #32]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	4b4c      	ldr	r3, [pc, #304]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	4a4b      	ldr	r2, [pc, #300]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000e9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea0:	4b49      	ldr	r3, [pc, #292]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	4b45      	ldr	r3, [pc, #276]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a44      	ldr	r2, [pc, #272]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000eb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b42      	ldr	r3, [pc, #264]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	4a3d      	ldr	r2, [pc, #244]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	4b37      	ldr	r3, [pc, #220]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eec:	4a36      	ldr	r2, [pc, #216]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef4:	4b34      	ldr	r3, [pc, #208]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b30      	ldr	r3, [pc, #192]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f10:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f24:	4a28      	ldr	r2, [pc, #160]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2c:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <HAL_ETH_MspInit+0x178>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f38:	2332      	movs	r3, #50	@ 0x32
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f48:	230b      	movs	r3, #11
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f50:	4619      	mov	r1, r3
 8000f52:	481e      	ldr	r0, [pc, #120]	@ (8000fcc <HAL_ETH_MspInit+0x17c>)
 8000f54:	f002 fd48 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f58:	2386      	movs	r3, #134	@ 0x86
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f68:	230b      	movs	r3, #11
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4817      	ldr	r0, [pc, #92]	@ (8000fd0 <HAL_ETH_MspInit+0x180>)
 8000f74:	f002 fd38 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8a:	230b      	movs	r3, #11
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	480f      	ldr	r0, [pc, #60]	@ (8000fd4 <HAL_ETH_MspInit+0x184>)
 8000f96:	f002 fd27 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f9a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fac:	230b      	movs	r3, #11
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <HAL_ETH_MspInit+0x188>)
 8000fb8:	f002 fd16 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3738      	adds	r7, #56	@ 0x38
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40028000 	.word	0x40028000
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40021800 	.word	0x40021800

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fec:	d10d      	bne.n	800100a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <HAL_TIM_Base_MspInit+0x3c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <HAL_TIM_Base_MspInit+0x3c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_TIM_Base_MspInit+0x3c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <HAL_UART_MspInit+0x84>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12c      	bne.n	8001098 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <HAL_UART_MspInit+0x88>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <HAL_UART_MspInit+0x88>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800104c:	6413      	str	r3, [r2, #64]	@ 0x40
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_UART_MspInit+0x88>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_UART_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a10      	ldr	r2, [pc, #64]	@ (80010a4 <HAL_UART_MspInit+0x88>)
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <HAL_UART_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001076:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001088:	2307      	movs	r3, #7
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <HAL_UART_MspInit+0x8c>)
 8001094:	f002 fca8 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	@ 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40004800 	.word	0x40004800
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020c00 	.word	0x40020c00

080010ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010cc:	d13f      	bne.n	800114e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <HAL_PCD_MspInit+0xac>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <HAL_PCD_MspInit+0xac>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <HAL_PCD_MspInit+0xac>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ea:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010fc:	230a      	movs	r3, #10
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4815      	ldr	r0, [pc, #84]	@ (800115c <HAL_PCD_MspInit+0xb0>)
 8001108:	f002 fc6e 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800110c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	480e      	ldr	r0, [pc, #56]	@ (800115c <HAL_PCD_MspInit+0xb0>)
 8001122:	f002 fc61 	bl	80039e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <HAL_PCD_MspInit+0xac>)
 8001128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112a:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <HAL_PCD_MspInit+0xac>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001130:	6353      	str	r3, [r2, #52]	@ 0x34
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <HAL_PCD_MspInit+0xac>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <HAL_PCD_MspInit+0xac>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <HAL_PCD_MspInit+0xac>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	@ 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <NMI_Handler+0x4>

08001168 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <MemManage_Handler+0x4>

08001178 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <UsageFault_Handler+0x4>

08001188 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b6:	f001 fa1f 	bl	80025f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <ADC_IRQHandler+0x14>)
 80011c6:	f001 fb7d 	bl	80028c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  HAL_ADC_ConCpltCallback(&hadc1);
 80011ca:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <ADC_IRQHandler+0x14>)
 80011cc:	f7ff f986 	bl	80004dc <HAL_ADC_ConCpltCallback>

  /* USER CODE END ADC_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000374 	.word	0x20000374

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001234 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001200:	480d      	ldr	r0, [pc, #52]	@ (8001238 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001202:	490e      	ldr	r1, [pc, #56]	@ (800123c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001204:	4a0e      	ldr	r2, [pc, #56]	@ (8001240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	@ (8001244 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001218:	4c0b      	ldr	r4, [pc, #44]	@ (8001248 <LoopFillZerobss+0x26>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001226:	f7ff ffd7 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f004 fc59 	bl	8005ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff fca9 	bl	8000b84 <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001234:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001240:	08005b68 	.word	0x08005b68
  ldr r2, =_sbss
 8001244:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001248:	20006c04 	.word	0x20006c04

0800124c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <CAN1_RX0_IRQHandler>

0800124e <arm_scale_f32>:
void arm_scale_f32(
  float32_t * pSrc,
  float32_t scale,
  float32_t * pDst,
  uint32_t blockSize)
{
 800124e:	b480      	push	{r7}
 8001250:	b08b      	sub	sp, #44	@ 0x2c
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	ed87 0a02 	vstr	s0, [r7, #8]
 800125a:	6079      	str	r1, [r7, #4]
 800125c:	603a      	str	r2, [r7, #0]

/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;                  /* temporary variabels */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8001264:	e043      	b.n	80012ee <arm_scale_f32+0xa0>
  {
    /* C = A * scale */
    /* Scale the input and then store the results in the destination buffer. */
    /* read input samples from source */
    in1 = *pSrc;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	623b      	str	r3, [r7, #32]
    in2 = *(pSrc + 1);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	61fb      	str	r3, [r7, #28]

    /* multiply with scaling factor */
    in1 = in1 * scale;
 8001272:	ed97 7a08 	vldr	s14, [r7, #32]
 8001276:	edd7 7a02 	vldr	s15, [r7, #8]
 800127a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127e:	edc7 7a08 	vstr	s15, [r7, #32]

    /* read input sample from source */
    in3 = *(pSrc + 2);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]

    /* multiply with scaling factor */
    in2 = in2 * scale;
 8001288:	ed97 7a07 	vldr	s14, [r7, #28]
 800128c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001294:	edc7 7a07 	vstr	s15, [r7, #28]

    /* read input sample from source */
    in4 = *(pSrc + 3);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	617b      	str	r3, [r7, #20]

    /* multiply with scaling factor */
    in3 = in3 * scale;
 800129e:	ed97 7a06 	vldr	s14, [r7, #24]
 80012a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012aa:	edc7 7a06 	vstr	s15, [r7, #24]
    in4 = in4 * scale;
 80012ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80012b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ba:	edc7 7a05 	vstr	s15, [r7, #20]
    /* store the result to destination */
    *pDst = in1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a3a      	ldr	r2, [r7, #32]
 80012c2:	601a      	str	r2, [r3, #0]
    *(pDst + 1) = in2;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3304      	adds	r3, #4
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	601a      	str	r2, [r3, #0]
    *(pDst + 2) = in3;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3308      	adds	r3, #8
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]
    *(pDst + 3) = in4;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	330c      	adds	r3, #12
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	601a      	str	r2, [r3, #0]

    /* update pointers to process next samples */
    pSrc += 4u;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3310      	adds	r3, #16
 80012e0:	60fb      	str	r3, [r7, #12]
    pDst += 4u;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3310      	adds	r3, #16
 80012e6:	607b      	str	r3, [r7, #4]

    /* Decrement the loop counter */
    blkCnt--;
 80012e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ea:	3b01      	subs	r3, #1
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  while(blkCnt > 0u)
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1b8      	bne.n	8001266 <arm_scale_f32+0x18>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80012fc:	e010      	b.n	8001320 <arm_scale_f32+0xd2>
  {
    /* C = A * scale */
    /* Scale the input and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) * scale;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1d1a      	adds	r2, r3, #4
 8001302:	60fa      	str	r2, [r7, #12]
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	1d1a      	adds	r2, r3, #4
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001316:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	3b01      	subs	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  while(blkCnt > 0u)
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1eb      	bne.n	80012fe <arm_scale_f32+0xb0>
  }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	372c      	adds	r7, #44	@ 0x2c
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 8001334:	b480      	push	{r7}
 8001336:	b097      	sub	sp, #92	@ 0x5c
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  float32_t *pIn = pSrc;                         /*  source pointer            */
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	657b      	str	r3, [r7, #84]	@ 0x54
  float32_t *pOut = pDst;                        /*  destination pointer       */
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	653b      	str	r3, [r7, #80]	@ 0x50
  float32_t *pState = S->pState;                 /*  pState pointer            */
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float32_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	64bb      	str	r3, [r7, #72]	@ 0x48
  float32_t acc;                                 /*  Simulates the accumulator */
  float32_t b0, b1, b2, a1, a2;                  /*  Filter coefficients       */
  float32_t Xn1, Xn2, Yn1, Yn2;                  /*  Filter pState variables   */
  float32_t Xn;                                  /*  temporary input           */
  uint32_t sample, stage = S->numStages;         /*  loop counters             */
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 800135c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800135e:	1d1a      	adds	r2, r3, #4
 8001360:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    b1 = *pCoeffs++;
 8001366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001368:	1d1a      	adds	r2, r3, #4
 800136a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
    b2 = *pCoeffs++;
 8001370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001372:	1d1a      	adds	r2, r3, #4
 8001374:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
    a1 = *pCoeffs++;
 800137a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800137c:	1d1a      	adds	r2, r3, #4
 800137e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	623b      	str	r3, [r7, #32]
    a2 = *pCoeffs++;
 8001384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001386:	1d1a      	adds	r2, r3, #4
 8001388:	64ba      	str	r2, [r7, #72]	@ 0x48
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61fb      	str	r3, [r7, #28]

    /* Reading the pState values */
    Xn1 = pState[0];
 800138e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	647b      	str	r3, [r7, #68]	@ 0x44
    Xn2 = pState[1];
 8001394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	643b      	str	r3, [r7, #64]	@ 0x40
    Yn1 = pState[2];
 800139a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Yn2 = pState[3];
 80013a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	63bb      	str	r3, [r7, #56]	@ 0x38
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     */

    sample = blockSize >> 2u;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while(sample > 0u)
 80013ac:	e0ce      	b.n	800154c <arm_biquad_cascade_df1_f32+0x218>
    {
      /* Read the first input */
      Xn = *pIn++;
 80013ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013b0:	1d1a      	adds	r2, r3, #4
 80013b2:	657a      	str	r2, [r7, #84]	@ 0x54
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn2 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 80013b8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80013c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80013c8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80013d8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80013dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e4:	edd7 6a08 	vldr	s13, [r7, #32]
 80013e8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80013ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80013f8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001404:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn2;
 8001408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800140a:	1d1a      	adds	r2, r3, #4
 800140c:	653a      	str	r2, [r7, #80]	@ 0x50
 800140e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001410:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the second input */
      Xn2 = *pIn++;
 8001412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001414:	1d1a      	adds	r2, r3, #4
 8001416:	657a      	str	r2, [r7, #84]	@ 0x54
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn1 = (b0 * Xn2) + (b1 * Xn) + (b2 * Xn1) + (a1 * Yn2) + (a2 * Yn1);
 800141c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001420:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001428:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800142c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001438:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800143c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001448:	edd7 6a08 	vldr	s13, [r7, #32]
 800144c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001458:	edd7 6a07 	vldr	s13, [r7, #28]
 800145c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn1;
 800146c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800146e:	1d1a      	adds	r2, r3, #4
 8001470:	653a      	str	r2, [r7, #80]	@ 0x50
 8001472:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001474:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the third input */
      Xn1 = *pIn++;
 8001476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001478:	1d1a      	adds	r2, r3, #4
 800147a:	657a      	str	r2, [r7, #84]	@ 0x54
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	647b      	str	r3, [r7, #68]	@ 0x44

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn2 = (b0 * Xn1) + (b1 * Xn2) + (b2 * Xn) + (a1 * Yn1) + (a2 * Yn2);
 8001480:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001484:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001490:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001498:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80014a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ac:	edd7 6a08 	vldr	s13, [r7, #32]
 80014b0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80014b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80014c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn2;
 80014d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014d2:	1d1a      	adds	r2, r3, #4
 80014d4:	653a      	str	r2, [r7, #80]	@ 0x50
 80014d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80014d8:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the forth input */
      Xn = *pIn++;
 80014da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014dc:	1d1a      	adds	r2, r3, #4
 80014de:	657a      	str	r2, [r7, #84]	@ 0x54
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn1 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn2) + (a2 * Yn1);
 80014e4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f0:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80014f4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80014f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001500:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001504:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001510:	edd7 6a08 	vldr	s13, [r7, #32]
 8001514:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001520:	edd7 6a07 	vldr	s13, [r7, #28]
 8001524:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001530:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn1;
 8001534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001536:	1d1a      	adds	r2, r3, #4
 8001538:	653a      	str	r2, [r7, #80]	@ 0x50
 800153a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800153c:	601a      	str	r2, [r3, #0]
      /* The states should be updated as:  */
      /* Xn2 = Xn1    */
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */
      Xn2 = Xn1;
 800153e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001540:	643b      	str	r3, [r7, #64]	@ 0x40
      Xn1 = Xn;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	647b      	str	r3, [r7, #68]	@ 0x44

      /* decrement the loop counter */
      sample--;
 8001546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001548:	3b01      	subs	r3, #1
 800154a:	637b      	str	r3, [r7, #52]	@ 0x34
    while(sample > 0u)
 800154c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800154e:	2b00      	cmp	r3, #0
 8001550:	f47f af2d 	bne.w	80013ae <arm_biquad_cascade_df1_f32+0x7a>

    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    sample = blockSize & 0x3u;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	637b      	str	r3, [r7, #52]	@ 0x34

    while(sample > 0u)
 800155c:	e03c      	b.n	80015d8 <arm_biquad_cascade_df1_f32+0x2a4>
    {
      /* Read the input */
      Xn = *pIn++;
 800155e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001560:	1d1a      	adds	r2, r3, #4
 8001562:	657a      	str	r2, [r7, #84]	@ 0x54
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8001568:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800156c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001574:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001578:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800157c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001584:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001588:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800158c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001594:	edd7 6a08 	vldr	s13, [r7, #32]
 8001598:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800159c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80015a8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80015ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b4:	edc7 7a05 	vstr	s15, [r7, #20]

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = acc;
 80015b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015ba:	1d1a      	adds	r2, r3, #4
 80015bc:	653a      	str	r2, [r7, #80]	@ 0x50
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]
      /* The states should be updated as:    */
      /* Xn2 = Xn1    */
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */
      Xn2 = Xn1;
 80015c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015c4:	643b      	str	r3, [r7, #64]	@ 0x40
      Xn1 = Xn;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	647b      	str	r3, [r7, #68]	@ 0x44
      Yn2 = Yn1;
 80015ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      Yn1 = acc;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* decrement the loop counter */
      sample--;
 80015d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d4:	3b01      	subs	r3, #1
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34
    while(sample > 0u)
 80015d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1bf      	bne.n	800155e <arm_biquad_cascade_df1_f32+0x22a>

    }

    /*  Store the updated state variables back into the pState array */
    *pState++ = Xn1;
 80015de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015e0:	1d1a      	adds	r2, r3, #4
 80015e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80015e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80015e6:	601a      	str	r2, [r3, #0]
    *pState++ = Xn2;
 80015e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015ea:	1d1a      	adds	r2, r3, #4
 80015ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80015ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015f0:	601a      	str	r2, [r3, #0]
    *pState++ = Yn1;
 80015f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015f4:	1d1a      	adds	r2, r3, #4
 80015f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80015f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015fa:	601a      	str	r2, [r3, #0]
    *pState++ = Yn2;
 80015fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015fe:	1d1a      	adds	r2, r3, #4
 8001600:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001602:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001604:	601a      	str	r2, [r3, #0]

    /*  The first stage goes from the input buffer to the output buffer. */
    /*  Subsequent numStages  occur in-place in the output buffer */
    pIn = pDst;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Reset the output pointer */
    pOut = pDst;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	653b      	str	r3, [r7, #80]	@ 0x50

    /* decrement the loop counter */
    stage--;
 800160e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001610:	3b01      	subs	r3, #1
 8001612:	633b      	str	r3, [r7, #48]	@ 0x30

  } while(stage > 0u);
 8001614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f aea0 	bne.w	800135c <arm_biquad_cascade_df1_f32+0x28>

  } while(stage > 0u);

#endif /*   #ifndef ARM_MATH_CM0_FAMILY         */

}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	375c      	adds	r7, #92	@ 0x5c
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
  arm_biquad_casd_df1_inst_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	460b      	mov	r3, r1
 8001638:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 800163a:	7afa      	ldrb	r2, [r7, #11]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	601a      	str	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4u * (uint32_t) numStages) * sizeof(float32_t));
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	461a      	mov	r2, r3
 800164c:	2100      	movs	r1, #0
 800164e:	6838      	ldr	r0, [r7, #0]
 8001650:	f004 fa3e 	bl	8005ad0 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	605a      	str	r2, [r3, #4]
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 8001662:	b480      	push	{r7}
 8001664:	b0a7      	sub	sp, #156	@ 0x9c
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	63bb      	str	r3, [r7, #56]	@ 0x38
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */
   float32_t p0,p1,p2,p3,p4,p5,p6,p7;             /* Temporary product values */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800168a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800168e:	3b01      	subs	r3, #1
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]  
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]  
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]  
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]  
    */
   blkCnt = blockSize >> 3;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	08db      	lsrs	r3, r3, #3
 800169c:	643b      	str	r3, [r7, #64]	@ 0x40

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.  
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 800169e:	f000 bdf8 	b.w	8002292 <arm_fir_f32+0xc30>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	1d13      	adds	r3, r2, #4
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016ac:	1d19      	adds	r1, r3, #4
 80016ae:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	1d13      	adds	r3, r2, #4
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016c0:	1d19      	adds	r1, r3, #4
 80016c2:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	1d13      	adds	r3, r2, #4
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016d4:	1d19      	adds	r1, r3, #4
 80016d6:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	1d13      	adds	r3, r2, #4
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016e8:	1d19      	adds	r1, r3, #4
 80016ea:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      acc1 = 0.0f;
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      acc2 = 0.0f;
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	67fb      	str	r3, [r7, #124]	@ 0x7c
      acc3 = 0.0f;
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	67bb      	str	r3, [r7, #120]	@ 0x78
      acc4 = 0.0f;
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	677b      	str	r3, [r7, #116]	@ 0x74
      acc5 = 0.0f;
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	673b      	str	r3, [r7, #112]	@ 0x70
      acc6 = 0.0f;
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	66fb      	str	r3, [r7, #108]	@ 0x6c
      acc7 = 0.0f;		
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	66bb      	str	r3, [r7, #104]	@ 0x68

      /* Initialize state pointer */
      px = pState;
 8001726:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800172a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Initialize coeff pointer */
      pb = (pCoeffs);		
 800172e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   
      /* This is separated from the others to avoid 
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	1d13      	adds	r3, r2, #4
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800173e:	1d19      	adds	r1, r3, #4
 8001740:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	1d13      	adds	r3, r2, #4
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001752:	1d19      	adds	r1, r3, #4
 8001754:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	1d13      	adds	r3, r2, #4
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001766:	1d19      	adds	r1, r3, #4
 8001768:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	1d13      	adds	r3, r2, #4
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800177a:	1d19      	adds	r1, r3, #4
 800177c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 8001784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001788:	1d1a      	adds	r2, r3, #4
 800178a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	667b      	str	r3, [r7, #100]	@ 0x64
      x1 = *px++;
 8001792:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001796:	1d1a      	adds	r2, r3, #4
 8001798:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	663b      	str	r3, [r7, #96]	@ 0x60
      x2 = *px++;
 80017a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017a4:	1d1a      	adds	r2, r3, #4
 80017a6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
      x3 = *px++;
 80017ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017b2:	1d1a      	adds	r2, r3, #4
 80017b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	65bb      	str	r3, [r7, #88]	@ 0x58
      x4 = *px++;
 80017bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017c0:	1d1a      	adds	r2, r3, #4
 80017c2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	657b      	str	r3, [r7, #84]	@ 0x54
      x5 = *px++;
 80017ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017ce:	1d1a      	adds	r2, r3, #4
 80017d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	653b      	str	r3, [r7, #80]	@ 0x50
      x6 = *px++;
 80017d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017dc:	1d1a      	adds	r2, r3, #4
 80017de:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3u;
 80017e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017e8:	08db      	lsrs	r3, r3, #3
 80017ea:	647b      	str	r3, [r7, #68]	@ 0x44
      
      /* Loop over the number of taps.  Unroll by a factor of 8.  
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
 80017ec:	f000 bc73 	b.w	80020d6 <arm_fir_f32+0xa74>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 80017f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017f4:	1d1a      	adds	r2, r3, #4
 80017f6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 80017fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001802:	1d1a      	adds	r2, r3, #4
 8001804:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         p0 = x0 * c0;
 800180c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001810:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001818:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         p1 = x1 * c0;
 800181c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001820:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         p2 = x2 * c0;
 800182c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001830:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001838:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         p3 = x3 * c0;
 800183c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001840:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001848:	edc7 7a08 	vstr	s15, [r7, #32]

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         p4 = x4 * c0;
 800184c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001850:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001858:	edc7 7a07 	vstr	s15, [r7, #28]

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         p5 = x5 * c0;
 800185c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001860:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001868:	edc7 7a06 	vstr	s15, [r7, #24]

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         p6 = x6 * c0;
 800186c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001870:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001878:	edc7 7a05 	vstr	s15, [r7, #20]

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         p7 = x7 * c0;
 800187c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001880:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001888:	edc7 7a04 	vstr	s15, [r7, #16]
         
         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 800188c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001890:	1d1a      	adds	r2, r3, #4
 8001892:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 800189a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800189e:	1d1a      	adds	r2, r3, #4
 80018a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	667b      	str	r3, [r7, #100]	@ 0x64
         
         acc0 += p0;
 80018a8:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80018ac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b4:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 80018b8:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80018bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c4:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 80018c8:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80018cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d4:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 80018d8:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80018dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80018e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e4:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 80018e8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80018ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80018f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 80018f8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80018fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001904:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001908:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800190c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001914:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001918:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800191c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001924:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68


         /* Perform the multiply-accumulate */
         p0 = x1 * c0;
 8001928:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800192c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001934:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x2 * c0;   
 8001938:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800193c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001944:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x3 * c0;   
 8001948:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800194c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001954:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x4 * c0;   
 8001958:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800195c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x5 * c0;   
 8001968:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800196c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001974:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x6 * c0;   
 8001978:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800197c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001984:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x7 * c0;   
 8001988:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800198c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001994:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x0 * c0;   
 8001998:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800199c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a4:	edc7 7a04 	vstr	s15, [r7, #16]
         
         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 80019a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019ac:	1d1a      	adds	r2, r3, #4
 80019ae:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 80019b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019ba:	1d1a      	adds	r2, r3, #4
 80019bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	663b      	str	r3, [r7, #96]	@ 0x60
         
         acc0 += p0;
 80019c4:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80019c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 80019d4:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80019d8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80019dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e0:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 80019e4:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80019e8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 80019f4:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80019f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80019fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a00:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001a04:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001a08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a10:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001a14:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001a18:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001a24:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001a28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001a34:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001a38:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a40:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x2 * c0;
 8001a44:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001a48:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a50:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x3 * c0;   
 8001a54:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001a58:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a60:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x4 * c0;   
 8001a64:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001a68:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x5 * c0;   
 8001a74:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001a78:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x6 * c0;   
 8001a84:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x7 * c0;   
 8001a94:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001a98:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x0 * c0;   
 8001aa4:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001aa8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x1 * c0;   
 8001ab4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001ab8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ac8:	1d1a      	adds	r2, r3, #4
 8001aca:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 8001ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ad6:	1d1a      	adds	r2, r3, #4
 8001ad8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
         
         acc0 += p0;
 8001ae0:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001ae4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aec:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001af0:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001af4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afc:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001b00:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001b04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001b10:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001b14:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001b20:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001b24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001b30:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001b34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001b40:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001b44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001b50:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x3 * c0;
 8001b60:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001b64:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x4 * c0;   
 8001b70:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001b74:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x5 * c0;   
 8001b80:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b84:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x6 * c0;   
 8001b90:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b94:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x7 * c0;   
 8001ba0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001ba4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bac:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x0 * c0;   
 8001bb0:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001bb4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbc:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x1 * c0;   
 8001bc0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001bc4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bcc:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x2 * c0;   
 8001bd0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001bd4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bdc:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001be4:	1d1a      	adds	r2, r3, #4
 8001be6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 8001bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bf2:	1d1a      	adds	r2, r3, #4
 8001bf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
         
         acc0 += p0;
 8001bfc:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001c00:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c08:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001c0c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001c10:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c18:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001c1c:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001c20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c28:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001c2c:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001c30:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c38:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001c3c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001c40:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c48:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001c4c:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001c50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c58:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001c5c:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001c60:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c68:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001c6c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001c70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x4 * c0;
 8001c7c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001c80:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c88:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x5 * c0;   
 8001c8c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c90:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c98:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x6 * c0;   
 8001c9c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ca0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x7 * c0;   
 8001cac:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001cb0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb8:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x0 * c0;   
 8001cbc:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001cc0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc8:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x1 * c0;   
 8001ccc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001cd0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd8:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x2 * c0;   
 8001cdc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001ce0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce8:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x3 * c0;   
 8001cec:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001cf0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf8:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d00:	1d1a      	adds	r2, r3, #4
 8001d02:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 8001d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	657b      	str	r3, [r7, #84]	@ 0x54
         
         acc0 += p0;
 8001d18:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001d1c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001d28:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001d2c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d34:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001d38:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001d3c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001d48:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001d4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d54:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001d58:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001d5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d64:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001d68:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001d6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d74:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001d78:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d84:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001d88:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001d8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d94:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x5 * c0;
 8001d98:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001d9c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x6 * c0;   
 8001da8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001dac:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x7 * c0;   
 8001db8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001dbc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x0 * c0;   
 8001dc8:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001dcc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd4:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x1 * c0;   
 8001dd8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001ddc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x2 * c0;   
 8001de8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001dec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df4:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x3 * c0;   
 8001df8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001dfc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e04:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x4 * c0;   
 8001e08:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001e0c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e1c:	1d1a      	adds	r2, r3, #4
 8001e1e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8001e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e2a:	1d1a      	adds	r2, r3, #4
 8001e2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	653b      	str	r3, [r7, #80]	@ 0x50
         
         acc0 += p0;
 8001e34:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001e38:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e40:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001e44:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001e48:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e50:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001e54:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001e58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e60:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001e64:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001e68:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e70:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001e74:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001e78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e80:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001e84:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001e88:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e90:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001e94:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001e98:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001ea4:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001ea8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb0:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x6 * c0;
 8001eb4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001eb8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x7 * c0;   
 8001ec4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001ec8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x0 * c0;   
 8001ed4:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001ed8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x1 * c0;   
 8001ee4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001ee8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef0:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x2 * c0;   
 8001ef4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001ef8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f00:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x3 * c0;   
 8001f04:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001f08:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f10:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x4 * c0;   
 8001f14:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001f18:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f20:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x5 * c0;   
 8001f24:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001f28:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f38:	1d1a      	adds	r2, r3, #4
 8001f3a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8001f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f46:	1d1a      	adds	r2, r3, #4
 8001f48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
         
         acc0 += p0;
 8001f50:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001f54:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5c:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001f60:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001f64:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001f70:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001f74:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001f80:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001f84:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001f90:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001f94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001fa0:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001fa4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fac:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001fb0:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001fb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbc:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001fc0:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001fc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fcc:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x7 * c0;
 8001fd0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001fd4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fdc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x0 * c0;   
 8001fe0:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001fe4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x1 * c0;   
 8001ff0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001ff4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x2 * c0;   
 8002000:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002004:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200c:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x3 * c0;   
 8002010:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002014:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x4 * c0;   
 8002020:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002024:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202c:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x5 * c0;   
 8002030:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002034:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203c:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x6 * c0;   
 8002040:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002044:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204c:	edc7 7a04 	vstr	s15, [r7, #16]

         tapCnt--;
 8002050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002052:	3b01      	subs	r3, #1
 8002054:	647b      	str	r3, [r7, #68]	@ 0x44
         
         acc0 += p0;
 8002056:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 800205a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800205e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002062:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8002066:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800206a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800206e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002072:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8002076:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800207a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800207e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002082:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8002086:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800208a:	edd7 7a08 	vldr	s15, [r7, #32]
 800208e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002092:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8002096:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800209a:	edd7 7a07 	vldr	s15, [r7, #28]
 800209e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 80020a6:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80020aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80020ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b2:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 80020b6:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80020ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 80020c6:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80020ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
      while(tapCnt > 0u)
 80020d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f47f ab89 	bne.w	80017f0 <arm_fir_f32+0x18e>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 80020de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	647b      	str	r3, [r7, #68]	@ 0x44

      while(tapCnt > 0u)
 80020e6:	e09e      	b.n	8002226 <arm_fir_f32+0xbc4>
      {
         /* Read coefficients */
         c0 = *(pb++);
 80020e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020ec:	1d1a      	adds	r2, r3, #4
 80020ee:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Fetch 1 state variable */
         x7 = *(px++);
 80020f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020fa:	1d1a      	adds	r2, r3, #4
 80020fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	633b      	str	r3, [r7, #48]	@ 0x30

         /* Perform the multiply-accumulates */      
         p0 = x0 * c0;
 8002104:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002108:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x1 * c0;   
 8002114:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002118:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x2 * c0;   
 8002124:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002128:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800212c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002130:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x3 * c0;   
 8002134:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002138:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800213c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002140:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x4 * c0;   
 8002144:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002148:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800214c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002150:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x5 * c0;   
 8002154:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002158:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x6 * c0;   
 8002164:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002168:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800216c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002170:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x7 * c0;   
 8002174:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002178:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800217c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002180:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Reuse the present sample states for next sample */
         x0 = x1;
 8002184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002186:	667b      	str	r3, [r7, #100]	@ 0x64
         x1 = x2;
 8002188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800218a:	663b      	str	r3, [r7, #96]	@ 0x60
         x2 = x3;
 800218c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800218e:	65fb      	str	r3, [r7, #92]	@ 0x5c
         x3 = x4;
 8002190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002192:	65bb      	str	r3, [r7, #88]	@ 0x58
         x4 = x5;
 8002194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002196:	657b      	str	r3, [r7, #84]	@ 0x54
         x5 = x6;
 8002198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800219a:	653b      	str	r3, [r7, #80]	@ 0x50
         x6 = x7;
 800219c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219e:	64fb      	str	r3, [r7, #76]	@ 0x4c
         
         acc0 += p0;
 80021a0:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80021a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80021a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ac:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 80021b0:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80021b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80021b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021bc:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 80021c0:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80021c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80021c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021cc:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 80021d0:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80021d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80021d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021dc:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 80021e0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80021e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80021e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ec:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 80021f0:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80021f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80021f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fc:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8002200:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002204:	edd7 7a05 	vldr	s15, [r7, #20]
 8002208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8002210:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002214:	edd7 7a04 	vldr	s15, [r7, #16]
 8002218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Decrement the loop counter */
         tapCnt--;
 8002220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002222:	3b01      	subs	r3, #1
 8002224:	647b      	str	r3, [r7, #68]	@ 0x44
      while(tapCnt > 0u)
 8002226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002228:	2b00      	cmp	r3, #0
 800222a:	f47f af5d 	bne.w	80020e8 <arm_fir_f32+0xa86>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 800222e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002232:	3320      	adds	r3, #32
 8002234:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	1d1a      	adds	r2, r3, #4
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002242:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	1d1a      	adds	r2, r3, #4
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800224e:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1d1a      	adds	r2, r3, #4
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002258:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	1d1a      	adds	r2, r3, #4
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002262:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	1d1a      	adds	r2, r3, #4
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800226c:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	1d1a      	adds	r2, r3, #4
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002276:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	1d1a      	adds	r2, r3, #4
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002280:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1d1a      	adds	r2, r3, #4
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800228a:	601a      	str	r2, [r3, #0]

      blkCnt--;
 800228c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800228e:	3b01      	subs	r3, #1
 8002290:	643b      	str	r3, [r7, #64]	@ 0x40
   while(blkCnt > 0u)
 8002292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	f47f aa04 	bne.w	80016a2 <arm_fir_f32+0x40>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.  
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	643b      	str	r3, [r7, #64]	@ 0x40

   while(blkCnt > 0u)
 80022a2:	e040      	b.n	8002326 <arm_fir_f32+0xcc4>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	1d13      	adds	r3, r2, #4
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022ae:	1d19      	adds	r1, r3, #4
 80022b0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      /* Initialize state pointer */
      px = pState;
 80022c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 80022c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      i = numTaps;
 80022ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022d0:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 80022d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022d6:	1d1a      	adds	r2, r3, #4
 80022d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022dc:	ed93 7a00 	vldr	s14, [r3]
 80022e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022e4:	1d1a      	adds	r2, r3, #4
 80022e6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f2:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80022f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fa:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         i--;
 80022fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002300:	3b01      	subs	r3, #1
 8002302:	64bb      	str	r3, [r7, #72]	@ 0x48

      } while(i > 0u);
 8002304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e3      	bne.n	80022d2 <arm_fir_f32+0xc70>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	1d1a      	adds	r2, r3, #4
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002314:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 8002316:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800231a:	3304      	adds	r3, #4
 800231c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      blkCnt--;
 8002320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002322:	3b01      	subs	r3, #1
 8002324:	643b      	str	r3, [r7, #64]	@ 0x40
   while(blkCnt > 0u)
 8002326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1bb      	bne.n	80022a4 <arm_fir_f32+0xc42>
   /* Processing is complete.  
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.  
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

   tapCnt = (numTaps - 1u) >> 2u;
 8002334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002336:	3b01      	subs	r3, #1
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	647b      	str	r3, [r7, #68]	@ 0x44

   /* copy data */
   while(tapCnt > 0u)
 800233c:	e032      	b.n	80023a4 <arm_fir_f32+0xd42>
   {
      *pStateCurnt++ = *pState++;
 800233e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002342:	1d13      	adds	r3, r2, #4
 8002344:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002348:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800234c:	1d19      	adds	r1, r3, #4
 800234e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8002356:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800235a:	1d13      	adds	r3, r2, #4
 800235c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002360:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002364:	1d19      	adds	r1, r3, #4
 8002366:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 800236e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002372:	1d13      	adds	r3, r2, #4
 8002374:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002378:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800237c:	1d19      	adds	r1, r3, #4
 800237e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8002386:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800238a:	1d13      	adds	r3, r2, #4
 800238c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002390:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002394:	1d19      	adds	r1, r3, #4
 8002396:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 800239e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a0:	3b01      	subs	r3, #1
 80023a2:	647b      	str	r3, [r7, #68]	@ 0x44
   while(tapCnt > 0u)
 80023a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1c9      	bne.n	800233e <arm_fir_f32+0xcdc>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 80023aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ac:	3b01      	subs	r3, #1
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	647b      	str	r3, [r7, #68]	@ 0x44

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 80023b4:	e00e      	b.n	80023d4 <arm_fir_f32+0xd72>
   {
      *pStateCurnt++ = *pState++;
 80023b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80023ba:	1d13      	adds	r3, r2, #4
 80023bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023c4:	1d19      	adds	r1, r3, #4
 80023c6:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 80023ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d0:	3b01      	subs	r3, #1
 80023d2:	647b      	str	r3, [r7, #68]	@ 0x44
   while(tapCnt > 0u)
 80023d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ed      	bne.n	80023b6 <arm_fir_f32+0xd54>
   }
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	379c      	adds	r7, #156	@ 0x9c
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	460b      	mov	r3, r1
 80023f6:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	897a      	ldrh	r2, [r7, #10]
 80023fc:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 8002404:	897a      	ldrh	r2, [r7, #10]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4413      	add	r3, r2
 800240a:	3b01      	subs	r3, #1
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	461a      	mov	r2, r3
 8002410:	2100      	movs	r1, #0
 8002412:	6838      	ldr	r0, [r7, #0]
 8002414:	f003 fb5c 	bl	8005ad0 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	605a      	str	r2, [r3, #4]

}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8002426:	b480      	push	{r7}
 8002428:	b08b      	sub	sp, #44	@ 0x2c
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	60fa      	str	r2, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3b01      	subs	r3, #1
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 800244e:	e051      	b.n	80024f4 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1d1a      	adds	r2, r3, #4
 8002454:	60fa      	str	r2, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1d1a      	adds	r2, r3, #4
 800245e:	60fa      	str	r2, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8002464:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002468:	edd7 7a05 	vldr	s15, [r7, #20]
 800246c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	d504      	bpl.n	8002480 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
      outIndex = count + 1u;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	3301      	adds	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1d1a      	adds	r2, r3, #4
 8002484:	60fa      	str	r2, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 800248a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800248e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249a:	d504      	bpl.n	80024a6 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
      outIndex = count + 2u;
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	3302      	adds	r3, #2
 80024a4:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1d1a      	adds	r2, r3, #4
 80024aa:	60fa      	str	r2, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 80024b0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80024b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80024b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	d504      	bpl.n	80024cc <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24
      outIndex = count + 3u;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	3303      	adds	r3, #3
 80024ca:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 80024cc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80024d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	d504      	bpl.n	80024e8 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
      outIndex = count + 4u;
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	3304      	adds	r3, #4
 80024e6:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	3304      	adds	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1aa      	bne.n	8002450 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8002504:	e016      	b.n	8002534 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1d1a      	adds	r2, r3, #4
 800250a:	60fa      	str	r2, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 8002510:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002514:	edd7 7a05 	vldr	s15, [r7, #20]
 8002518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	d505      	bpl.n	800252e <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	627b      	str	r3, [r7, #36]	@ 0x24
      outIndex = blockSize - blkCnt;
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	3b01      	subs	r3, #1
 8002532:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e5      	bne.n	8002506 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800253e:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	372c      	adds	r7, #44	@ 0x2c
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002558:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0d      	ldr	r2, [pc, #52]	@ (8002594 <HAL_Init+0x40>)
 800255e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_Init+0x40>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <HAL_Init+0x40>)
 800256a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800256e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002570:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <HAL_Init+0x40>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a07      	ldr	r2, [pc, #28]	@ (8002594 <HAL_Init+0x40>)
 8002576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800257c:	2003      	movs	r0, #3
 800257e:	f000 fde1 	bl	8003144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002582:	2000      	movs	r0, #0
 8002584:	f000 f808 	bl	8002598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002588:	f7fe fbb2 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00

08002598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a0:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <HAL_InitTick+0x54>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_InitTick+0x58>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fdf9 	bl	80031ae <HAL_SYSTICK_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00e      	b.n	80025e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d80a      	bhi.n	80025e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f000 fdc1 	bl	800315a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d8:	4a06      	ldr	r2, [pc, #24]	@ (80025f4 <HAL_InitTick+0x5c>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000000 	.word	0x20000000
 80025f0:	20000008 	.word	0x20000008
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000008 	.word	0x20000008
 800261c:	20006c00 	.word	0x20006c00

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20006c00 	.word	0x20006c00

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff ffee 	bl	8002620 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002652:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffde 	bl	8002620 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000008 	.word	0x20000008

08002680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e033      	b.n	80026fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fb4e 	bl	8000d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026c6:	f023 0302 	bic.w	r3, r3, #2
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fb64 	bl	8002da0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80026ee:	e001      	b.n	80026f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Start_IT+0x1a>
 800271e:	2302      	movs	r3, #2
 8002720:	e0bd      	b.n	800289e <HAL_ADC_Start_IT+0x196>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d018      	beq.n	800276a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002748:	4b58      	ldr	r3, [pc, #352]	@ (80028ac <HAL_ADC_Start_IT+0x1a4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a58      	ldr	r2, [pc, #352]	@ (80028b0 <HAL_ADC_Start_IT+0x1a8>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9a      	lsrs	r2, r3, #18
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800275c:	e002      	b.n	8002764 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3b01      	subs	r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f9      	bne.n	800275e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	f040 8085 	bne.w	8002884 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b8:	d106      	bne.n	80027c8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f023 0206 	bic.w	r2, r3, #6
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80027c6:	e002      	b.n	80027ce <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027d6:	4b37      	ldr	r3, [pc, #220]	@ (80028b4 <HAL_ADC_Start_IT+0x1ac>)
 80027d8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027e2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027f2:	f043 0320 	orr.w	r3, r3, #32
 80027f6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2b00      	cmp	r3, #0
 8002802:	d12a      	bne.n	800285a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2b      	ldr	r2, [pc, #172]	@ (80028b8 <HAL_ADC_Start_IT+0x1b0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d015      	beq.n	800283a <HAL_ADC_Start_IT+0x132>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2a      	ldr	r2, [pc, #168]	@ (80028bc <HAL_ADC_Start_IT+0x1b4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d105      	bne.n	8002824 <HAL_ADC_Start_IT+0x11c>
 8002818:	4b26      	ldr	r3, [pc, #152]	@ (80028b4 <HAL_ADC_Start_IT+0x1ac>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a25      	ldr	r2, [pc, #148]	@ (80028c0 <HAL_ADC_Start_IT+0x1b8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d136      	bne.n	800289c <HAL_ADC_Start_IT+0x194>
 800282e:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <HAL_ADC_Start_IT+0x1ac>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d130      	bne.n	800289c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d129      	bne.n	800289c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e020      	b.n	800289c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a16      	ldr	r2, [pc, #88]	@ (80028b8 <HAL_ADC_Start_IT+0x1b0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d11b      	bne.n	800289c <HAL_ADC_Start_IT+0x194>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d114      	bne.n	800289c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	e00b      	b.n	800289c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	f043 0210 	orr.w	r2, r3, #16
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000000 	.word	0x20000000
 80028b0:	431bde83 	.word	0x431bde83
 80028b4:	40012300 	.word	0x40012300
 80028b8:	40012000 	.word	0x40012000
 80028bc:	40012100 	.word	0x40012100
 80028c0:	40012200 	.word	0x40012200

080028c4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d049      	beq.n	800298e <HAL_ADC_IRQHandler+0xca>
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d046      	beq.n	800298e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d12b      	bne.n	800297e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	d127      	bne.n	800297e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002938:	2b00      	cmp	r3, #0
 800293a:	d006      	beq.n	800294a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002946:	2b00      	cmp	r3, #0
 8002948:	d119      	bne.n	800297e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0220 	bic.w	r2, r2, #32
 8002958:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f8bd 	bl	8002afe <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0212 	mvn.w	r2, #18
 800298c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d057      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x190>
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d054      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d105      	bne.n	80029c2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d139      	bne.n	8002a44 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d12b      	bne.n	8002a44 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d124      	bne.n	8002a44 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d11d      	bne.n	8002a44 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d119      	bne.n	8002a44 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 faa7 	bl	8002f98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f06f 020c 	mvn.w	r2, #12
 8002a52:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a62:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d017      	beq.n	8002a9a <HAL_ADC_IRQHandler+0x1d6>
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d014      	beq.n	8002a9a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10d      	bne.n	8002a9a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f841 	bl	8002b12 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0201 	mvn.w	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002aa8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_ADC_IRQHandler+0x218>
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d012      	beq.n	8002adc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	f043 0202 	orr.w	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f06f 0220 	mvn.w	r2, #32
 8002aca:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f82a 	bl	8002b26 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0220 	mvn.w	r2, #32
 8002ada:	601a      	str	r2, [r3, #0]
  }
}
 8002adc:	bf00      	nop
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1c>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e113      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x244>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b09      	cmp	r3, #9
 8002b66:	d925      	bls.n	8002bb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68d9      	ldr	r1, [r3, #12]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b1e      	subs	r3, #30
 8002b7e:	2207      	movs	r2, #7
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43da      	mvns	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68d9      	ldr	r1, [r3, #12]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4403      	add	r3, r0
 8002ba6:	3b1e      	subs	r3, #30
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	e022      	b.n	8002bfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6919      	ldr	r1, [r3, #16]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	2207      	movs	r2, #7
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6919      	ldr	r1, [r3, #16]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4618      	mov	r0, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4403      	add	r3, r0
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d824      	bhi.n	8002c4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	3b05      	subs	r3, #5
 8002c14:	221f      	movs	r2, #31
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	400a      	ands	r2, r1
 8002c22:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	4618      	mov	r0, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b05      	subs	r3, #5
 8002c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c4a:	e04c      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d824      	bhi.n	8002c9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	3b23      	subs	r3, #35	@ 0x23
 8002c66:	221f      	movs	r2, #31
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	400a      	ands	r2, r1
 8002c74:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3b23      	subs	r3, #35	@ 0x23
 8002c90:	fa00 f203 	lsl.w	r2, r0, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c9c:	e023      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	3b41      	subs	r3, #65	@ 0x41
 8002cb0:	221f      	movs	r2, #31
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b41      	subs	r3, #65	@ 0x41
 8002cda:	fa00 f203 	lsl.w	r2, r0, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce6:	4b29      	ldr	r3, [pc, #164]	@ (8002d8c <HAL_ADC_ConfigChannel+0x250>)
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a28      	ldr	r2, [pc, #160]	@ (8002d90 <HAL_ADC_ConfigChannel+0x254>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10f      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x1d8>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b12      	cmp	r3, #18
 8002cfa:	d10b      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1d      	ldr	r2, [pc, #116]	@ (8002d90 <HAL_ADC_ConfigChannel+0x254>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d12b      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x23a>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1c      	ldr	r2, [pc, #112]	@ (8002d94 <HAL_ADC_ConfigChannel+0x258>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d003      	beq.n	8002d30 <HAL_ADC_ConfigChannel+0x1f4>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b11      	cmp	r3, #17
 8002d2e:	d122      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a11      	ldr	r2, [pc, #68]	@ (8002d94 <HAL_ADC_ConfigChannel+0x258>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d111      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d52:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <HAL_ADC_ConfigChannel+0x25c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <HAL_ADC_ConfigChannel+0x260>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	0c9a      	lsrs	r2, r3, #18
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d68:	e002      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f9      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40012300 	.word	0x40012300
 8002d90:	40012000 	.word	0x40012000
 8002d94:	10000012 	.word	0x10000012
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	431bde83 	.word	0x431bde83

08002da0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da8:	4b79      	ldr	r3, [pc, #484]	@ (8002f90 <ADC_Init+0x1f0>)
 8002daa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	021a      	lsls	r2, r3, #8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6899      	ldr	r1, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	4a58      	ldr	r2, [pc, #352]	@ (8002f94 <ADC_Init+0x1f4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d022      	beq.n	8002e7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6899      	ldr	r1, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6899      	ldr	r1, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	e00f      	b.n	8002e9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0202 	bic.w	r2, r2, #2
 8002eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6899      	ldr	r1, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7e1b      	ldrb	r3, [r3, #24]
 8002eb8:	005a      	lsls	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002eea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	035a      	lsls	r2, r3, #13
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	e007      	b.n	8002f14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	051a      	lsls	r2, r3, #20
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f56:	025a      	lsls	r2, r3, #9
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6899      	ldr	r1, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	029a      	lsls	r2, r3, #10
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	40012300 	.word	0x40012300
 8002f94:	0f000001 	.word	0x0f000001

08002f98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <NVIC_SetPriorityGrouping+0x44>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	@ (8002ff0 <NVIC_SetPriorityGrouping+0x44>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	@ (800300c <NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	f003 021f 	and.w	r2, r3, #31
 8003020:	4907      	ldr	r1, [pc, #28]	@ (8003040 <NVIC_EnableIRQ+0x30>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2001      	movs	r0, #1
 800302a:	fa00 f202 	lsl.w	r2, r0, r2
 800302e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000e100 	.word	0xe000e100

08003044 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	6039      	str	r1, [r7, #0]
 800304e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003054:	2b00      	cmp	r3, #0
 8003056:	da0b      	bge.n	8003070 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	490c      	ldr	r1, [pc, #48]	@ (8003090 <NVIC_SetPriority+0x4c>)
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	3b04      	subs	r3, #4
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800306e:	e009      	b.n	8003084 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4907      	ldr	r1, [pc, #28]	@ (8003094 <NVIC_SetPriority+0x50>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00
 8003094:	e000e100 	.word	0xe000e100

08003098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003098:	b480      	push	{r7}
 800309a:	b089      	sub	sp, #36	@ 0x24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f1c3 0307 	rsb	r3, r3, #7
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	bf28      	it	cs
 80030b6:	2304      	movcs	r3, #4
 80030b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3304      	adds	r3, #4
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d902      	bls.n	80030c8 <NVIC_EncodePriority+0x30>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3b03      	subs	r3, #3
 80030c6:	e000      	b.n	80030ca <NVIC_EncodePriority+0x32>
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	401a      	ands	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e0:	f04f 31ff 	mov.w	r1, #4294967295
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	43d9      	mvns	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	4313      	orrs	r3, r2
         );
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3724      	adds	r7, #36	@ 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003110:	d301      	bcc.n	8003116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003112:	2301      	movs	r3, #1
 8003114:	e00f      	b.n	8003136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003116:	4a0a      	ldr	r2, [pc, #40]	@ (8003140 <SysTick_Config+0x40>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311e:	210f      	movs	r1, #15
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f7ff ff8e 	bl	8003044 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <SysTick_Config+0x40>)
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312e:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <SysTick_Config+0x40>)
 8003130:	2207      	movs	r2, #7
 8003132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	e000e010 	.word	0xe000e010

08003144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ff2d 	bl	8002fac <NVIC_SetPriorityGrouping>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316c:	f7ff ff42 	bl	8002ff4 <NVIC_GetPriorityGrouping>
 8003170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	6978      	ldr	r0, [r7, #20]
 8003178:	f7ff ff8e 	bl	8003098 <NVIC_EncodePriority>
 800317c:	4602      	mov	r2, r0
 800317e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff5d 	bl	8003044 <NVIC_SetPriority>
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff35 	bl	8003010 <NVIC_EnableIRQ>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff ffa2 	bl	8003100 <SysTick_Config>
 80031bc:	4603      	mov	r3, r0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e014      	b.n	8003202 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	791b      	ldrb	r3, [r3, #4]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d105      	bne.n	80031ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7fd fded 	bl	8000dc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	795b      	ldrb	r3, [r3, #5]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_DAC_Start+0x16>
 800321c:	2302      	movs	r3, #2
 800321e:	e040      	b.n	80032a2 <HAL_DAC_Start+0x98>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2201      	movs	r2, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003254:	2b3c      	cmp	r3, #60	@ 0x3c
 8003256:	d11d      	bne.n	8003294 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	e014      	b.n	8003294 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	213c      	movs	r1, #60	@ 0x3c
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0202 	orr.w	r2, r2, #2
 8003292:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	3308      	adds	r3, #8
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e004      	b.n	80032e2 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	3314      	adds	r3, #20
 80032e0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	461a      	mov	r2, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	795b      	ldrb	r3, [r3, #5]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_DAC_ConfigChannel+0x18>
 800330c:	2302      	movs	r3, #2
 800330e:	e03c      	b.n	800338a <HAL_DAC_ConfigChannel+0x92>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2202      	movs	r2, #2
 800331a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4013      	ands	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	22c0      	movs	r2, #192	@ 0xc0
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	400a      	ands	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e06c      	b.n	8003484 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2223      	movs	r2, #35	@ 0x23
 80033b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7fd fd47 	bl	8000e50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	4b31      	ldr	r3, [pc, #196]	@ (800348c <HAL_ETH_Init+0xf4>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	4a30      	ldr	r2, [pc, #192]	@ (800348c <HAL_ETH_Init+0xf4>)
 80033cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d2:	4b2e      	ldr	r3, [pc, #184]	@ (800348c <HAL_ETH_Init+0xf4>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80033de:	4b2c      	ldr	r3, [pc, #176]	@ (8003490 <HAL_ETH_Init+0xf8>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003490 <HAL_ETH_Init+0xf8>)
 80033e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80033ea:	4b29      	ldr	r3, [pc, #164]	@ (8003490 <HAL_ETH_Init+0xf8>)
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4927      	ldr	r1, [pc, #156]	@ (8003490 <HAL_ETH_Init+0xf8>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80033f8:	4b25      	ldr	r3, [pc, #148]	@ (8003490 <HAL_ETH_Init+0xf8>)
 80033fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003412:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003414:	f7ff f904 	bl	8002620 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800341a:	e011      	b.n	8003440 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800341c:	f7ff f900 	bl	8002620 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800342a:	d909      	bls.n	8003440 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2204      	movs	r2, #4
 8003430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	22e0      	movs	r2, #224	@ 0xe0
 8003438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e021      	b.n	8003484 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e4      	bne.n	800341c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f958 	bl	8003708 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f9ff 	bl	800385c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa55 	bl	800390e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	461a      	mov	r2, r3
 800346a:	2100      	movs	r1, #0
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f9bd 	bl	80037ec <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2210      	movs	r2, #16
 800347e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40023800 	.word	0x40023800
 8003490:	40013800 	.word	0x40013800

08003494 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4b51      	ldr	r3, [pc, #324]	@ (80035f0 <ETH_SetMACConfig+0x15c>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	7c1b      	ldrb	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <ETH_SetMACConfig+0x28>
 80034b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034ba:	e000      	b.n	80034be <ETH_SetMACConfig+0x2a>
 80034bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	7c5b      	ldrb	r3, [r3, #17]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <ETH_SetMACConfig+0x38>
 80034c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80034ca:	e000      	b.n	80034ce <ETH_SetMACConfig+0x3a>
 80034cc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80034d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	7fdb      	ldrb	r3, [r3, #31]
 80034da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80034dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80034e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	7f92      	ldrb	r2, [r2, #30]
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	d102      	bne.n	80034f2 <ETH_SetMACConfig+0x5e>
 80034ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034f0:	e000      	b.n	80034f4 <ETH_SetMACConfig+0x60>
 80034f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80034f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	7f1b      	ldrb	r3, [r3, #28]
 80034fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80034fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003502:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	791b      	ldrb	r3, [r3, #4]
 8003508:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800350a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003512:	2a00      	cmp	r2, #0
 8003514:	d102      	bne.n	800351c <ETH_SetMACConfig+0x88>
 8003516:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800351a:	e000      	b.n	800351e <ETH_SetMACConfig+0x8a>
 800351c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800351e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	7bdb      	ldrb	r3, [r3, #15]
 8003524:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003526:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800352c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003534:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003536:	4313      	orrs	r3, r2
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800354e:	2001      	movs	r0, #1
 8003550:	f7ff f872 	bl	8002638 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800356a:	4013      	ands	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003572:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800357a:	2a00      	cmp	r2, #0
 800357c:	d101      	bne.n	8003582 <ETH_SetMACConfig+0xee>
 800357e:	2280      	movs	r2, #128	@ 0x80
 8003580:	e000      	b.n	8003584 <ETH_SetMACConfig+0xf0>
 8003582:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003584:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800358a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003592:	2a01      	cmp	r2, #1
 8003594:	d101      	bne.n	800359a <ETH_SetMACConfig+0x106>
 8003596:	2208      	movs	r2, #8
 8003598:	e000      	b.n	800359c <ETH_SetMACConfig+0x108>
 800359a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800359c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80035a4:	2a01      	cmp	r2, #1
 80035a6:	d101      	bne.n	80035ac <ETH_SetMACConfig+0x118>
 80035a8:	2204      	movs	r2, #4
 80035aa:	e000      	b.n	80035ae <ETH_SetMACConfig+0x11a>
 80035ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80035ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80035b6:	2a01      	cmp	r2, #1
 80035b8:	d101      	bne.n	80035be <ETH_SetMACConfig+0x12a>
 80035ba:	2202      	movs	r2, #2
 80035bc:	e000      	b.n	80035c0 <ETH_SetMACConfig+0x12c>
 80035be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035c0:	4313      	orrs	r3, r2
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035d8:	2001      	movs	r0, #1
 80035da:	f7ff f82d 	bl	8002638 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	619a      	str	r2, [r3, #24]
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	ff20810f 	.word	0xff20810f

080035f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4b3d      	ldr	r3, [pc, #244]	@ (8003704 <ETH_SetDMAConfig+0x110>)
 800360e:	4013      	ands	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	7b1b      	ldrb	r3, [r3, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <ETH_SetDMAConfig+0x2c>
 800361a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800361e:	e000      	b.n	8003622 <ETH_SetDMAConfig+0x2e>
 8003620:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	7b5b      	ldrb	r3, [r3, #13]
 8003626:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003628:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	7f52      	ldrb	r2, [r2, #29]
 800362e:	2a00      	cmp	r2, #0
 8003630:	d102      	bne.n	8003638 <ETH_SetDMAConfig+0x44>
 8003632:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003636:	e000      	b.n	800363a <ETH_SetDMAConfig+0x46>
 8003638:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800363a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	7b9b      	ldrb	r3, [r3, #14]
 8003640:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003642:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003648:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	7f1b      	ldrb	r3, [r3, #28]
 800364e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003650:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	7f9b      	ldrb	r3, [r3, #30]
 8003656:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003658:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800365e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003666:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003668:	4313      	orrs	r3, r2
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003678:	461a      	mov	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800368a:	2001      	movs	r0, #1
 800368c:	f7fe ffd4 	bl	8002638 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003698:	461a      	mov	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	791b      	ldrb	r3, [r3, #4]
 80036a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80036ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80036b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80036be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80036c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80036cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036e8:	2001      	movs	r0, #1
 80036ea:	f7fe ffa5 	bl	8002638 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6013      	str	r3, [r2, #0]
}
 80036fc:	bf00      	nop
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	f8de3f23 	.word	0xf8de3f23

08003708 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b0a6      	sub	sp, #152	@ 0x98
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800371c:	2300      	movs	r3, #0
 800371e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800372c:	2300      	movs	r3, #0
 800372e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003744:	2300      	movs	r3, #0
 8003746:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800374e:	2300      	movs	r3, #0
 8003750:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003752:	2300      	movs	r3, #0
 8003754:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003758:	2300      	movs	r3, #0
 800375a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800375e:	2300      	movs	r3, #0
 8003760:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800376a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003770:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003774:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800377c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003780:	4619      	mov	r1, r3
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fe86 	bl	8003494 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003788:	2301      	movs	r3, #1
 800378a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800378c:	2301      	movs	r3, #1
 800378e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003796:	2301      	movs	r3, #1
 8003798:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80037b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037bc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80037be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80037c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037c8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ff08 	bl	80035f4 <ETH_SetDMAConfig>
}
 80037e4:	bf00      	nop
 80037e6:	3798      	adds	r7, #152	@ 0x98
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3305      	adds	r3, #5
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	3204      	adds	r2, #4
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <ETH_MACAddressConfig+0x68>)
 800380e:	4413      	add	r3, r2
 8003810:	461a      	mov	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3303      	adds	r3, #3
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	061a      	lsls	r2, r3, #24
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3302      	adds	r3, #2
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3301      	adds	r3, #1
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	4313      	orrs	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <ETH_MACAddressConfig+0x6c>)
 800383e:	4413      	add	r3, r2
 8003840:	461a      	mov	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	6013      	str	r3, [r2, #0]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40028040 	.word	0x40028040
 8003858:	40028044 	.word	0x40028044

0800385c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e03e      	b.n	80038e8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68d9      	ldr	r1, [r3, #12]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	440b      	add	r3, r1
 800387a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2200      	movs	r2, #0
 8003892:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	3206      	adds	r2, #6
 800389c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d80c      	bhi.n	80038cc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68d9      	ldr	r1, [r3, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	461a      	mov	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	e004      	b.n	80038d6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d9bd      	bls.n	800386a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003900:	611a      	str	r2, [r3, #16]
}
 8003902:	bf00      	nop
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e046      	b.n	80039aa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6919      	ldr	r1, [r3, #16]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2200      	movs	r2, #0
 8003938:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2200      	movs	r2, #0
 8003944:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2200      	movs	r2, #0
 800394a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2200      	movs	r2, #0
 8003950:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003958:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8003960:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	3212      	adds	r2, #18
 8003976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d80c      	bhi.n	800399a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6919      	ldr	r1, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	440b      	add	r3, r1
 8003992:	461a      	mov	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	e004      	b.n	80039a4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	461a      	mov	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d9b5      	bls.n	800391c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039da:	60da      	str	r2, [r3, #12]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	@ 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e177      	b.n	8003cf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f040 8166 	bne.w	8003cee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d005      	beq.n	8003a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d130      	bne.n	8003a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2203      	movs	r2, #3
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a70:	2201      	movs	r2, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 0201 	and.w	r2, r3, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d017      	beq.n	8003ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d123      	bne.n	8003b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3208      	adds	r2, #8
 8003aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	220f      	movs	r2, #15
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0203 	and.w	r2, r3, #3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80c0 	beq.w	8003cee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b66      	ldr	r3, [pc, #408]	@ (8003d0c <HAL_GPIO_Init+0x324>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	4a65      	ldr	r2, [pc, #404]	@ (8003d0c <HAL_GPIO_Init+0x324>)
 8003b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b7e:	4b63      	ldr	r3, [pc, #396]	@ (8003d0c <HAL_GPIO_Init+0x324>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8a:	4a61      	ldr	r2, [pc, #388]	@ (8003d10 <HAL_GPIO_Init+0x328>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	@ (8003d14 <HAL_GPIO_Init+0x32c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d037      	beq.n	8003c26 <HAL_GPIO_Init+0x23e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a57      	ldr	r2, [pc, #348]	@ (8003d18 <HAL_GPIO_Init+0x330>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d031      	beq.n	8003c22 <HAL_GPIO_Init+0x23a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a56      	ldr	r2, [pc, #344]	@ (8003d1c <HAL_GPIO_Init+0x334>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02b      	beq.n	8003c1e <HAL_GPIO_Init+0x236>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a55      	ldr	r2, [pc, #340]	@ (8003d20 <HAL_GPIO_Init+0x338>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d025      	beq.n	8003c1a <HAL_GPIO_Init+0x232>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a54      	ldr	r2, [pc, #336]	@ (8003d24 <HAL_GPIO_Init+0x33c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01f      	beq.n	8003c16 <HAL_GPIO_Init+0x22e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a53      	ldr	r2, [pc, #332]	@ (8003d28 <HAL_GPIO_Init+0x340>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d019      	beq.n	8003c12 <HAL_GPIO_Init+0x22a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a52      	ldr	r2, [pc, #328]	@ (8003d2c <HAL_GPIO_Init+0x344>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_GPIO_Init+0x226>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a51      	ldr	r2, [pc, #324]	@ (8003d30 <HAL_GPIO_Init+0x348>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00d      	beq.n	8003c0a <HAL_GPIO_Init+0x222>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a50      	ldr	r2, [pc, #320]	@ (8003d34 <HAL_GPIO_Init+0x34c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <HAL_GPIO_Init+0x21e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8003d38 <HAL_GPIO_Init+0x350>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_GPIO_Init+0x21a>
 8003bfe:	2309      	movs	r3, #9
 8003c00:	e012      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c02:	230a      	movs	r3, #10
 8003c04:	e010      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c06:	2308      	movs	r3, #8
 8003c08:	e00e      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e00c      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c0e:	2306      	movs	r3, #6
 8003c10:	e00a      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c12:	2305      	movs	r3, #5
 8003c14:	e008      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e004      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e002      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c26:	2300      	movs	r3, #0
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f002 0203 	and.w	r2, r2, #3
 8003c2e:	0092      	lsls	r2, r2, #2
 8003c30:	4093      	lsls	r3, r2
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c38:	4935      	ldr	r1, [pc, #212]	@ (8003d10 <HAL_GPIO_Init+0x328>)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	3302      	adds	r3, #2
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c46:	4b3d      	ldr	r3, [pc, #244]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c6a:	4a34      	ldr	r2, [pc, #208]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c70:	4b32      	ldr	r3, [pc, #200]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c94:	4a29      	ldr	r2, [pc, #164]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c9a:	4b28      	ldr	r3, [pc, #160]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce8:	4a14      	ldr	r2, [pc, #80]	@ (8003d3c <HAL_GPIO_Init+0x354>)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	f67f ae84 	bls.w	8003a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3724      	adds	r7, #36	@ 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40013800 	.word	0x40013800
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	40020800 	.word	0x40020800
 8003d20:	40020c00 	.word	0x40020c00
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40021400 	.word	0x40021400
 8003d2c:	40021800 	.word	0x40021800
 8003d30:	40021c00 	.word	0x40021c00
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40022400 	.word	0x40022400
 8003d3c:	40013c00 	.word	0x40013c00

08003d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d50:	787b      	ldrb	r3, [r7, #1]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d5c:	e003      	b.n	8003d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	041a      	lsls	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	619a      	str	r2, [r3, #24]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d74:	b08f      	sub	sp, #60	@ 0x3c
 8003d76:	af0a      	add	r7, sp, #40	@ 0x28
 8003d78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e10f      	b.n	8003fa4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd f984 	bl	80010ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2203      	movs	r2, #3
 8003da8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f001 fbe3 	bl	800558e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	687e      	ldr	r6, [r7, #4]
 8003dd0:	466d      	mov	r5, sp
 8003dd2:	f106 0410 	add.w	r4, r6, #16
 8003dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003de6:	1d33      	adds	r3, r6, #4
 8003de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dea:	6838      	ldr	r0, [r7, #0]
 8003dec:	f001 fb6e 	bl	80054cc <USB_CoreInit>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e0d0      	b.n	8003fa4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2100      	movs	r1, #0
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f001 fbd1 	bl	80055b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	e04a      	b.n	8003eaa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	333d      	adds	r3, #61	@ 0x3d
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	333c      	adds	r3, #60	@ 0x3c
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	b298      	uxth	r0, r3
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3344      	adds	r3, #68	@ 0x44
 8003e50:	4602      	mov	r2, r0
 8003e52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3340      	adds	r3, #64	@ 0x40
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	3348      	adds	r3, #72	@ 0x48
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	334c      	adds	r3, #76	@ 0x4c
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3354      	adds	r3, #84	@ 0x54
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3af      	bcc.n	8003e14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	73fb      	strb	r3, [r7, #15]
 8003eb8:	e044      	b.n	8003f44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003ef8:	2200      	movs	r2, #0
 8003efa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f12:	7bfa      	ldrb	r2, [r7, #15]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	3301      	adds	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d3b5      	bcc.n	8003eba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	687e      	ldr	r6, [r7, #4]
 8003f56:	466d      	mov	r5, sp
 8003f58:	f106 0410 	add.w	r4, r6, #16
 8003f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f68:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f6c:	1d33      	adds	r3, r6, #4
 8003f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f70:	6838      	ldr	r0, [r7, #0]
 8003f72:	f001 fb69 	bl	8005648 <USB_DevInit>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e00d      	b.n	8003fa4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fd34 	bl	8005a0a <USB_DevDisconnect>

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e267      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d075      	beq.n	80040b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fca:	4b88      	ldr	r3, [pc, #544]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fd6:	4b85      	ldr	r3, [pc, #532]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d112      	bne.n	8004008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe2:	4b82      	ldr	r3, [pc, #520]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fee:	d10b      	bne.n	8004008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d05b      	beq.n	80040b4 <HAL_RCC_OscConfig+0x108>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d157      	bne.n	80040b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e242      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004010:	d106      	bne.n	8004020 <HAL_RCC_OscConfig+0x74>
 8004012:	4b76      	ldr	r3, [pc, #472]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a75      	ldr	r2, [pc, #468]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e01d      	b.n	800405c <HAL_RCC_OscConfig+0xb0>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x98>
 800402a:	4b70      	ldr	r3, [pc, #448]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a6f      	ldr	r2, [pc, #444]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b6d      	ldr	r3, [pc, #436]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6c      	ldr	r2, [pc, #432]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0xb0>
 8004044:	4b69      	ldr	r3, [pc, #420]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a68      	ldr	r2, [pc, #416]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800404a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4b66      	ldr	r3, [pc, #408]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a65      	ldr	r2, [pc, #404]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800405a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d013      	beq.n	800408c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fe fadc 	bl	8002620 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800406c:	f7fe fad8 	bl	8002620 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	@ 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e207      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	4b5b      	ldr	r3, [pc, #364]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0xc0>
 800408a:	e014      	b.n	80040b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe fac8 	bl	8002620 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004094:	f7fe fac4 	bl	8002620 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	@ 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1f3      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a6:	4b51      	ldr	r3, [pc, #324]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0xe8>
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d063      	beq.n	800418a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040c2:	4b4a      	ldr	r3, [pc, #296]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00b      	beq.n	80040e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ce:	4b47      	ldr	r3, [pc, #284]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d11c      	bne.n	8004114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040da:	4b44      	ldr	r3, [pc, #272]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d116      	bne.n	8004114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	4b41      	ldr	r3, [pc, #260]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_RCC_OscConfig+0x152>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e1c7      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fe:	4b3b      	ldr	r3, [pc, #236]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4937      	ldr	r1, [pc, #220]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004112:	e03a      	b.n	800418a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d020      	beq.n	800415e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411c:	4b34      	ldr	r3, [pc, #208]	@ (80041f0 <HAL_RCC_OscConfig+0x244>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fe fa7d 	bl	8002620 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412a:	f7fe fa79 	bl	8002620 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e1a8      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413c:	4b2b      	ldr	r3, [pc, #172]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	4b28      	ldr	r3, [pc, #160]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4925      	ldr	r1, [pc, #148]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]
 800415c:	e015      	b.n	800418a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415e:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <HAL_RCC_OscConfig+0x244>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe fa5c 	bl	8002620 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800416c:	f7fe fa58 	bl	8002620 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e187      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417e:	4b1b      	ldr	r3, [pc, #108]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d036      	beq.n	8004204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d016      	beq.n	80041cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <HAL_RCC_OscConfig+0x248>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a4:	f7fe fa3c 	bl	8002620 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ac:	f7fe fa38 	bl	8002620 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e167      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041be:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <HAL_RCC_OscConfig+0x240>)
 80041c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x200>
 80041ca:	e01b      	b.n	8004204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <HAL_RCC_OscConfig+0x248>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d2:	f7fe fa25 	bl	8002620 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d8:	e00e      	b.n	80041f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041da:	f7fe fa21 	bl	8002620 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d907      	bls.n	80041f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e150      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
 80041ec:	40023800 	.word	0x40023800
 80041f0:	42470000 	.word	0x42470000
 80041f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	4b88      	ldr	r3, [pc, #544]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80041fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1ea      	bne.n	80041da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 8097 	beq.w	8004340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004216:	4b81      	ldr	r3, [pc, #516]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	4b7d      	ldr	r3, [pc, #500]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	4a7c      	ldr	r2, [pc, #496]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004230:	6413      	str	r3, [r2, #64]	@ 0x40
 8004232:	4b7a      	ldr	r3, [pc, #488]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004242:	4b77      	ldr	r3, [pc, #476]	@ (8004420 <HAL_RCC_OscConfig+0x474>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d118      	bne.n	8004280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424e:	4b74      	ldr	r3, [pc, #464]	@ (8004420 <HAL_RCC_OscConfig+0x474>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a73      	ldr	r2, [pc, #460]	@ (8004420 <HAL_RCC_OscConfig+0x474>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800425a:	f7fe f9e1 	bl	8002620 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fe f9dd 	bl	8002620 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e10c      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	4b6a      	ldr	r3, [pc, #424]	@ (8004420 <HAL_RCC_OscConfig+0x474>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x2ea>
 8004288:	4b64      	ldr	r3, [pc, #400]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428c:	4a63      	ldr	r2, [pc, #396]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6713      	str	r3, [r2, #112]	@ 0x70
 8004294:	e01c      	b.n	80042d0 <HAL_RCC_OscConfig+0x324>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b05      	cmp	r3, #5
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x30c>
 800429e:	4b5f      	ldr	r3, [pc, #380]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a2:	4a5e      	ldr	r2, [pc, #376]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042a4:	f043 0304 	orr.w	r3, r3, #4
 80042a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042aa:	4b5c      	ldr	r3, [pc, #368]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	4a5b      	ldr	r2, [pc, #364]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b6:	e00b      	b.n	80042d0 <HAL_RCC_OscConfig+0x324>
 80042b8:	4b58      	ldr	r3, [pc, #352]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042bc:	4a57      	ldr	r2, [pc, #348]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c4:	4b55      	ldr	r3, [pc, #340]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c8:	4a54      	ldr	r2, [pc, #336]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042ca:	f023 0304 	bic.w	r3, r3, #4
 80042ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d015      	beq.n	8004304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fe f9a2 	bl	8002620 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fe f99e 	bl	8002620 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0cb      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f6:	4b49      	ldr	r3, [pc, #292]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0ee      	beq.n	80042e0 <HAL_RCC_OscConfig+0x334>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004304:	f7fe f98c 	bl	8002620 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430a:	e00a      	b.n	8004322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430c:	f7fe f988 	bl	8002620 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0b5      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004322:	4b3e      	ldr	r3, [pc, #248]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ee      	bne.n	800430c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004334:	4b39      	ldr	r3, [pc, #228]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	4a38      	ldr	r2, [pc, #224]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 800433a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80a1 	beq.w	800448c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800434a:	4b34      	ldr	r3, [pc, #208]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b08      	cmp	r3, #8
 8004354:	d05c      	beq.n	8004410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d141      	bne.n	80043e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435e:	4b31      	ldr	r3, [pc, #196]	@ (8004424 <HAL_RCC_OscConfig+0x478>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fe f95c 	bl	8002620 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436c:	f7fe f958 	bl	8002620 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e087      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	4b27      	ldr	r3, [pc, #156]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	019b      	lsls	r3, r3, #6
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	3b01      	subs	r3, #1
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	491b      	ldr	r1, [pc, #108]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004424 <HAL_RCC_OscConfig+0x478>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ba:	f7fe f931 	bl	8002620 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fe f92d 	bl	8002620 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e05c      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d4:	4b11      	ldr	r3, [pc, #68]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x416>
 80043e0:	e054      	b.n	800448c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <HAL_RCC_OscConfig+0x478>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fe f91a 	bl	8002620 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fe f916 	bl	8002620 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e045      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_RCC_OscConfig+0x470>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x444>
 800440e:	e03d      	b.n	800448c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d107      	bne.n	8004428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e038      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
 800441c:	40023800 	.word	0x40023800
 8004420:	40007000 	.word	0x40007000
 8004424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004428:	4b1b      	ldr	r3, [pc, #108]	@ (8004498 <HAL_RCC_OscConfig+0x4ec>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d028      	beq.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d121      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d11a      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004458:	4013      	ands	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800445e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004460:	4293      	cmp	r3, r2
 8004462:	d111      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	085b      	lsrs	r3, r3, #1
 8004470:	3b01      	subs	r3, #1
 8004472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d107      	bne.n	8004488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800

0800449c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0cc      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b0:	4b68      	ldr	r3, [pc, #416]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d90c      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b65      	ldr	r3, [pc, #404]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b63      	ldr	r3, [pc, #396]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0b8      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f0:	4b59      	ldr	r3, [pc, #356]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a58      	ldr	r2, [pc, #352]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004508:	4b53      	ldr	r3, [pc, #332]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a52      	ldr	r2, [pc, #328]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004514:	4b50      	ldr	r3, [pc, #320]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	494d      	ldr	r1, [pc, #308]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d044      	beq.n	80045bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d107      	bne.n	800454a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	4b47      	ldr	r3, [pc, #284]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d119      	bne.n	800457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e07f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d003      	beq.n	800455a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004556:	2b03      	cmp	r3, #3
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455a:	4b3f      	ldr	r3, [pc, #252]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e06f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456a:	4b3b      	ldr	r3, [pc, #236]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e067      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800457a:	4b37      	ldr	r3, [pc, #220]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4934      	ldr	r1, [pc, #208]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800458c:	f7fe f848 	bl	8002620 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	e00a      	b.n	80045aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004594:	f7fe f844 	bl	8002620 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e04f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 020c 	and.w	r2, r3, #12
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1eb      	bne.n	8004594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045bc:	4b25      	ldr	r3, [pc, #148]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d20c      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ca:	4b22      	ldr	r3, [pc, #136]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b20      	ldr	r3, [pc, #128]	@ (8004654 <HAL_RCC_ClockConfig+0x1b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e032      	b.n	800464a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f0:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4916      	ldr	r1, [pc, #88]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800460e:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	490e      	ldr	r1, [pc, #56]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004622:	f000 f821 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8004626:	4602      	mov	r2, r0
 8004628:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	490a      	ldr	r1, [pc, #40]	@ (800465c <HAL_RCC_ClockConfig+0x1c0>)
 8004634:	5ccb      	ldrb	r3, [r1, r3]
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800463e:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <HAL_RCC_ClockConfig+0x1c8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fd ffa8 	bl	8002598 <HAL_InitTick>

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40023c00 	.word	0x40023c00
 8004658:	40023800 	.word	0x40023800
 800465c:	08005b40 	.word	0x08005b40
 8004660:	20000000 	.word	0x20000000
 8004664:	20000004 	.word	0x20000004

08004668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b094      	sub	sp, #80	@ 0x50
 800466e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	647b      	str	r3, [r7, #68]	@ 0x44
 8004674:	2300      	movs	r3, #0
 8004676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004678:	2300      	movs	r3, #0
 800467a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004680:	4b79      	ldr	r3, [pc, #484]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d00d      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x40>
 800468c:	2b08      	cmp	r3, #8
 800468e:	f200 80e1 	bhi.w	8004854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x34>
 8004696:	2b04      	cmp	r3, #4
 8004698:	d003      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800469a:	e0db      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800469c:	4b73      	ldr	r3, [pc, #460]	@ (800486c <HAL_RCC_GetSysClockFreq+0x204>)
 800469e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80046a0:	e0db      	b.n	800485a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a2:	4b73      	ldr	r3, [pc, #460]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x208>)
 80046a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a6:	e0d8      	b.n	800485a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d063      	beq.n	8004786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046be:	4b6a      	ldr	r3, [pc, #424]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	099b      	lsrs	r3, r3, #6
 80046c4:	2200      	movs	r2, #0
 80046c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046d2:	2300      	movs	r3, #0
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046da:	4622      	mov	r2, r4
 80046dc:	462b      	mov	r3, r5
 80046de:	f04f 0000 	mov.w	r0, #0
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	0159      	lsls	r1, r3, #5
 80046e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ec:	0150      	lsls	r0, r2, #5
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4621      	mov	r1, r4
 80046f4:	1a51      	subs	r1, r2, r1
 80046f6:	6139      	str	r1, [r7, #16]
 80046f8:	4629      	mov	r1, r5
 80046fa:	eb63 0301 	sbc.w	r3, r3, r1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800470c:	4659      	mov	r1, fp
 800470e:	018b      	lsls	r3, r1, #6
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004716:	4651      	mov	r1, sl
 8004718:	018a      	lsls	r2, r1, #6
 800471a:	4651      	mov	r1, sl
 800471c:	ebb2 0801 	subs.w	r8, r2, r1
 8004720:	4659      	mov	r1, fp
 8004722:	eb63 0901 	sbc.w	r9, r3, r1
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800473a:	4690      	mov	r8, r2
 800473c:	4699      	mov	r9, r3
 800473e:	4623      	mov	r3, r4
 8004740:	eb18 0303 	adds.w	r3, r8, r3
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	462b      	mov	r3, r5
 8004748:	eb49 0303 	adc.w	r3, r9, r3
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800475a:	4629      	mov	r1, r5
 800475c:	024b      	lsls	r3, r1, #9
 800475e:	4621      	mov	r1, r4
 8004760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004764:	4621      	mov	r1, r4
 8004766:	024a      	lsls	r2, r1, #9
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800476e:	2200      	movs	r2, #0
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004778:	f7fb fd38 	bl	80001ec <__aeabi_uldivmod>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4613      	mov	r3, r2
 8004782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004784:	e058      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004786:	4b38      	ldr	r3, [pc, #224]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	099b      	lsrs	r3, r3, #6
 800478c:	2200      	movs	r2, #0
 800478e:	4618      	mov	r0, r3
 8004790:	4611      	mov	r1, r2
 8004792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	2300      	movs	r3, #0
 800479a:	627b      	str	r3, [r7, #36]	@ 0x24
 800479c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047a0:	4642      	mov	r2, r8
 80047a2:	464b      	mov	r3, r9
 80047a4:	f04f 0000 	mov.w	r0, #0
 80047a8:	f04f 0100 	mov.w	r1, #0
 80047ac:	0159      	lsls	r1, r3, #5
 80047ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b2:	0150      	lsls	r0, r2, #5
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4641      	mov	r1, r8
 80047ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80047be:	4649      	mov	r1, r9
 80047c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047d8:	ebb2 040a 	subs.w	r4, r2, sl
 80047dc:	eb63 050b 	sbc.w	r5, r3, fp
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	00eb      	lsls	r3, r5, #3
 80047ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ee:	00e2      	lsls	r2, r4, #3
 80047f0:	4614      	mov	r4, r2
 80047f2:	461d      	mov	r5, r3
 80047f4:	4643      	mov	r3, r8
 80047f6:	18e3      	adds	r3, r4, r3
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	464b      	mov	r3, r9
 80047fc:	eb45 0303 	adc.w	r3, r5, r3
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800480e:	4629      	mov	r1, r5
 8004810:	028b      	lsls	r3, r1, #10
 8004812:	4621      	mov	r1, r4
 8004814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004818:	4621      	mov	r1, r4
 800481a:	028a      	lsls	r2, r1, #10
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004822:	2200      	movs	r2, #0
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	61fa      	str	r2, [r7, #28]
 8004828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800482c:	f7fb fcde 	bl	80001ec <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4613      	mov	r3, r2
 8004836:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004838:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	3301      	adds	r3, #1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800484a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004852:	e002      	b.n	800485a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_RCC_GetSysClockFreq+0x204>)
 8004856:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800485a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800485c:	4618      	mov	r0, r3
 800485e:	3750      	adds	r7, #80	@ 0x50
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800
 800486c:	00f42400 	.word	0x00f42400
 8004870:	007a1200 	.word	0x007a1200

08004874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004878:	4b03      	ldr	r3, [pc, #12]	@ (8004888 <HAL_RCC_GetHCLKFreq+0x14>)
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000000 	.word	0x20000000

0800488c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004890:	f7ff fff0 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	0a9b      	lsrs	r3, r3, #10
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4903      	ldr	r1, [pc, #12]	@ (80048b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40023800 	.word	0x40023800
 80048b0:	08005b50 	.word	0x08005b50

080048b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048b8:	f7ff ffdc 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 80048bc:	4602      	mov	r2, r0
 80048be:	4b05      	ldr	r3, [pc, #20]	@ (80048d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	0b5b      	lsrs	r3, r3, #13
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	4903      	ldr	r1, [pc, #12]	@ (80048d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ca:	5ccb      	ldrb	r3, [r1, r3]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40023800 	.word	0x40023800
 80048d8:	08005b50 	.word	0x08005b50

080048dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e041      	b.n	8004972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc fb6a 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 f95e 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d001      	beq.n	8004994 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e046      	b.n	8004a22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a23      	ldr	r2, [pc, #140]	@ (8004a30 <HAL_TIM_Base_Start+0xb4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d022      	beq.n	80049ec <HAL_TIM_Base_Start+0x70>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ae:	d01d      	beq.n	80049ec <HAL_TIM_Base_Start+0x70>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a34 <HAL_TIM_Base_Start+0xb8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d018      	beq.n	80049ec <HAL_TIM_Base_Start+0x70>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1e      	ldr	r2, [pc, #120]	@ (8004a38 <HAL_TIM_Base_Start+0xbc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <HAL_TIM_Base_Start+0x70>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a3c <HAL_TIM_Base_Start+0xc0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_Base_Start+0x70>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a40 <HAL_TIM_Base_Start+0xc4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_Base_Start+0x70>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a19      	ldr	r2, [pc, #100]	@ (8004a44 <HAL_TIM_Base_Start+0xc8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_Base_Start+0x70>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a18      	ldr	r2, [pc, #96]	@ (8004a48 <HAL_TIM_Base_Start+0xcc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d111      	bne.n	8004a10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d010      	beq.n	8004a20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0e:	e007      	b.n	8004a20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	40010400 	.word	0x40010400
 8004a44:	40014000 	.word	0x40014000
 8004a48:	40001800 	.word	0x40001800

08004a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_TIM_ConfigClockSource+0x1c>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e0b4      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x186>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa0:	d03e      	beq.n	8004b20 <HAL_TIM_ConfigClockSource+0xd4>
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa6:	f200 8087 	bhi.w	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aae:	f000 8086 	beq.w	8004bbe <HAL_TIM_ConfigClockSource+0x172>
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab6:	d87f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab8:	2b70      	cmp	r3, #112	@ 0x70
 8004aba:	d01a      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0xa6>
 8004abc:	2b70      	cmp	r3, #112	@ 0x70
 8004abe:	d87b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac0:	2b60      	cmp	r3, #96	@ 0x60
 8004ac2:	d050      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x11a>
 8004ac4:	2b60      	cmp	r3, #96	@ 0x60
 8004ac6:	d877      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac8:	2b50      	cmp	r3, #80	@ 0x50
 8004aca:	d03c      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0xfa>
 8004acc:	2b50      	cmp	r3, #80	@ 0x50
 8004ace:	d873      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad0:	2b40      	cmp	r3, #64	@ 0x40
 8004ad2:	d058      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x13a>
 8004ad4:	2b40      	cmp	r3, #64	@ 0x40
 8004ad6:	d86f      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad8:	2b30      	cmp	r3, #48	@ 0x30
 8004ada:	d064      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8004adc:	2b30      	cmp	r3, #48	@ 0x30
 8004ade:	d86b      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d060      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d867      	bhi.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05c      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d05a      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x15a>
 8004af0:	e062      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6899      	ldr	r1, [r3, #8]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f000 f985 	bl	8004e10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	609a      	str	r2, [r3, #8]
      break;
 8004b1e:	e04f      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f000 f96e 	bl	8004e10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b42:	609a      	str	r2, [r3, #8]
      break;
 8004b44:	e03c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 f8e2 	bl	8004d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2150      	movs	r1, #80	@ 0x50
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f93b 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 8004b64:	e02c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6859      	ldr	r1, [r3, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f000 f901 	bl	8004d7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2160      	movs	r1, #96	@ 0x60
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 f92b 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 8004b84:	e01c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f000 f8c2 	bl	8004d1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2140      	movs	r1, #64	@ 0x40
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f91b 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 8004ba4:	e00c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 f912 	bl	8004dda <TIM_ITRx_SetConfig>
      break;
 8004bb6:	e003      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
      break;
 8004bbc:	e000      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a40      	ldr	r2, [pc, #256]	@ (8004cf0 <TIM_Base_SetConfig+0x114>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d013      	beq.n	8004c1c <TIM_Base_SetConfig+0x40>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bfa:	d00f      	beq.n	8004c1c <TIM_Base_SetConfig+0x40>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a3d      	ldr	r2, [pc, #244]	@ (8004cf4 <TIM_Base_SetConfig+0x118>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00b      	beq.n	8004c1c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a3c      	ldr	r2, [pc, #240]	@ (8004cf8 <TIM_Base_SetConfig+0x11c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d007      	beq.n	8004c1c <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3b      	ldr	r2, [pc, #236]	@ (8004cfc <TIM_Base_SetConfig+0x120>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3a      	ldr	r2, [pc, #232]	@ (8004d00 <TIM_Base_SetConfig+0x124>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d108      	bne.n	8004c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf0 <TIM_Base_SetConfig+0x114>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d02b      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3c:	d027      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2c      	ldr	r2, [pc, #176]	@ (8004cf4 <TIM_Base_SetConfig+0x118>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d023      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a2b      	ldr	r2, [pc, #172]	@ (8004cf8 <TIM_Base_SetConfig+0x11c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01f      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2a      	ldr	r2, [pc, #168]	@ (8004cfc <TIM_Base_SetConfig+0x120>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01b      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a29      	ldr	r2, [pc, #164]	@ (8004d00 <TIM_Base_SetConfig+0x124>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d017      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a28      	ldr	r2, [pc, #160]	@ (8004d04 <TIM_Base_SetConfig+0x128>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a27      	ldr	r2, [pc, #156]	@ (8004d08 <TIM_Base_SetConfig+0x12c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00f      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a26      	ldr	r2, [pc, #152]	@ (8004d0c <TIM_Base_SetConfig+0x130>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00b      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a25      	ldr	r2, [pc, #148]	@ (8004d10 <TIM_Base_SetConfig+0x134>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d007      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a24      	ldr	r2, [pc, #144]	@ (8004d14 <TIM_Base_SetConfig+0x138>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a23      	ldr	r2, [pc, #140]	@ (8004d18 <TIM_Base_SetConfig+0x13c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d108      	bne.n	8004ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf0 <TIM_Base_SetConfig+0x114>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <TIM_Base_SetConfig+0xf8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a0c      	ldr	r2, [pc, #48]	@ (8004d00 <TIM_Base_SetConfig+0x124>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d103      	bne.n	8004cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	615a      	str	r2, [r3, #20]
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40000400 	.word	0x40000400
 8004cf8:	40000800 	.word	0x40000800
 8004cfc:	40000c00 	.word	0x40000c00
 8004d00:	40010400 	.word	0x40010400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40014400 	.word	0x40014400
 8004d0c:	40014800 	.word	0x40014800
 8004d10:	40001800 	.word	0x40001800
 8004d14:	40001c00 	.word	0x40001c00
 8004d18:	40002000 	.word	0x40002000

08004d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f023 0201 	bic.w	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 030a 	bic.w	r3, r3, #10
 8004d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b087      	sub	sp, #28
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0210 	bic.w	r2, r3, #16
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004db6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f043 0307 	orr.w	r3, r3, #7
 8004dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	609a      	str	r2, [r3, #8]
}
 8004e04:	bf00      	nop
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	021a      	lsls	r2, r3, #8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	609a      	str	r2, [r3, #8]
}
 8004e44:	bf00      	nop
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e05a      	b.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a21      	ldr	r2, [pc, #132]	@ (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d022      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1d      	ldr	r2, [pc, #116]	@ (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d018      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1a      	ldr	r2, [pc, #104]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a17      	ldr	r2, [pc, #92]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a15      	ldr	r2, [pc, #84]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d10c      	bne.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40010400 	.word	0x40010400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40001800 	.word	0x40001800

08004f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e03f      	b.n	8004fda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc f854 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2224      	movs	r2, #36	@ 0x24
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f829 	bl	8004fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe8:	b0c0      	sub	sp, #256	@ 0x100
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	68d9      	ldr	r1, [r3, #12]
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	ea40 0301 	orr.w	r3, r0, r1
 800500c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	431a      	orrs	r2, r3
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	431a      	orrs	r2, r3
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800503c:	f021 010c 	bic.w	r1, r1, #12
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800504a:	430b      	orrs	r3, r1
 800504c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505e:	6999      	ldr	r1, [r3, #24]
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	ea40 0301 	orr.w	r3, r0, r1
 800506a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b8f      	ldr	r3, [pc, #572]	@ (80052b0 <UART_SetConfig+0x2cc>)
 8005074:	429a      	cmp	r2, r3
 8005076:	d005      	beq.n	8005084 <UART_SetConfig+0xa0>
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b8d      	ldr	r3, [pc, #564]	@ (80052b4 <UART_SetConfig+0x2d0>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d104      	bne.n	800508e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7ff fc16 	bl	80048b4 <HAL_RCC_GetPCLK2Freq>
 8005088:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800508c:	e003      	b.n	8005096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800508e:	f7ff fbfd 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 8005092:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050a0:	f040 810c 	bne.w	80052bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	1891      	adds	r1, r2, r2
 80050bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050be:	415b      	adcs	r3, r3
 80050c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050c6:	4621      	mov	r1, r4
 80050c8:	eb12 0801 	adds.w	r8, r2, r1
 80050cc:	4629      	mov	r1, r5
 80050ce:	eb43 0901 	adc.w	r9, r3, r1
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050e6:	4690      	mov	r8, r2
 80050e8:	4699      	mov	r9, r3
 80050ea:	4623      	mov	r3, r4
 80050ec:	eb18 0303 	adds.w	r3, r8, r3
 80050f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050f4:	462b      	mov	r3, r5
 80050f6:	eb49 0303 	adc.w	r3, r9, r3
 80050fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800510a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800510e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005112:	460b      	mov	r3, r1
 8005114:	18db      	adds	r3, r3, r3
 8005116:	653b      	str	r3, [r7, #80]	@ 0x50
 8005118:	4613      	mov	r3, r2
 800511a:	eb42 0303 	adc.w	r3, r2, r3
 800511e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005128:	f7fb f860 	bl	80001ec <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4b61      	ldr	r3, [pc, #388]	@ (80052b8 <UART_SetConfig+0x2d4>)
 8005132:	fba3 2302 	umull	r2, r3, r3, r2
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	011c      	lsls	r4, r3, #4
 800513a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005144:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800514c:	4642      	mov	r2, r8
 800514e:	464b      	mov	r3, r9
 8005150:	1891      	adds	r1, r2, r2
 8005152:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005154:	415b      	adcs	r3, r3
 8005156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800515c:	4641      	mov	r1, r8
 800515e:	eb12 0a01 	adds.w	sl, r2, r1
 8005162:	4649      	mov	r1, r9
 8005164:	eb43 0b01 	adc.w	fp, r3, r1
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800517c:	4692      	mov	sl, r2
 800517e:	469b      	mov	fp, r3
 8005180:	4643      	mov	r3, r8
 8005182:	eb1a 0303 	adds.w	r3, sl, r3
 8005186:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800518a:	464b      	mov	r3, r9
 800518c:	eb4b 0303 	adc.w	r3, fp, r3
 8005190:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051a8:	460b      	mov	r3, r1
 80051aa:	18db      	adds	r3, r3, r3
 80051ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ae:	4613      	mov	r3, r2
 80051b0:	eb42 0303 	adc.w	r3, r2, r3
 80051b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051be:	f7fb f815 	bl	80001ec <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <UART_SetConfig+0x2d4>)
 80051ca:	fba3 2301 	umull	r2, r3, r3, r1
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2264      	movs	r2, #100	@ 0x64
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	1acb      	subs	r3, r1, r3
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051de:	4b36      	ldr	r3, [pc, #216]	@ (80052b8 <UART_SetConfig+0x2d4>)
 80051e0:	fba3 2302 	umull	r2, r3, r3, r2
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051ec:	441c      	add	r4, r3
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	1891      	adds	r1, r2, r2
 8005206:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005208:	415b      	adcs	r3, r3
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800520c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005210:	4641      	mov	r1, r8
 8005212:	1851      	adds	r1, r2, r1
 8005214:	6339      	str	r1, [r7, #48]	@ 0x30
 8005216:	4649      	mov	r1, r9
 8005218:	414b      	adcs	r3, r1
 800521a:	637b      	str	r3, [r7, #52]	@ 0x34
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005228:	4659      	mov	r1, fp
 800522a:	00cb      	lsls	r3, r1, #3
 800522c:	4651      	mov	r1, sl
 800522e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005232:	4651      	mov	r1, sl
 8005234:	00ca      	lsls	r2, r1, #3
 8005236:	4610      	mov	r0, r2
 8005238:	4619      	mov	r1, r3
 800523a:	4603      	mov	r3, r0
 800523c:	4642      	mov	r2, r8
 800523e:	189b      	adds	r3, r3, r2
 8005240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005244:	464b      	mov	r3, r9
 8005246:	460a      	mov	r2, r1
 8005248:	eb42 0303 	adc.w	r3, r2, r3
 800524c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800525c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005264:	460b      	mov	r3, r1
 8005266:	18db      	adds	r3, r3, r3
 8005268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800526a:	4613      	mov	r3, r2
 800526c:	eb42 0303 	adc.w	r3, r2, r3
 8005270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800527a:	f7fa ffb7 	bl	80001ec <__aeabi_uldivmod>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <UART_SetConfig+0x2d4>)
 8005284:	fba3 1302 	umull	r1, r3, r3, r2
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	2164      	movs	r1, #100	@ 0x64
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	3332      	adds	r3, #50	@ 0x32
 8005296:	4a08      	ldr	r2, [pc, #32]	@ (80052b8 <UART_SetConfig+0x2d4>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	f003 0207 	and.w	r2, r3, #7
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4422      	add	r2, r4
 80052aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052ac:	e106      	b.n	80054bc <UART_SetConfig+0x4d8>
 80052ae:	bf00      	nop
 80052b0:	40011000 	.word	0x40011000
 80052b4:	40011400 	.word	0x40011400
 80052b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052ce:	4642      	mov	r2, r8
 80052d0:	464b      	mov	r3, r9
 80052d2:	1891      	adds	r1, r2, r2
 80052d4:	6239      	str	r1, [r7, #32]
 80052d6:	415b      	adcs	r3, r3
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052de:	4641      	mov	r1, r8
 80052e0:	1854      	adds	r4, r2, r1
 80052e2:	4649      	mov	r1, r9
 80052e4:	eb43 0501 	adc.w	r5, r3, r1
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	00eb      	lsls	r3, r5, #3
 80052f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f6:	00e2      	lsls	r2, r4, #3
 80052f8:	4614      	mov	r4, r2
 80052fa:	461d      	mov	r5, r3
 80052fc:	4643      	mov	r3, r8
 80052fe:	18e3      	adds	r3, r4, r3
 8005300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005304:	464b      	mov	r3, r9
 8005306:	eb45 0303 	adc.w	r3, r5, r3
 800530a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800531a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800532a:	4629      	mov	r1, r5
 800532c:	008b      	lsls	r3, r1, #2
 800532e:	4621      	mov	r1, r4
 8005330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005334:	4621      	mov	r1, r4
 8005336:	008a      	lsls	r2, r1, #2
 8005338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800533c:	f7fa ff56 	bl	80001ec <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4b60      	ldr	r3, [pc, #384]	@ (80054c8 <UART_SetConfig+0x4e4>)
 8005346:	fba3 2302 	umull	r2, r3, r3, r2
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	011c      	lsls	r4, r3, #4
 800534e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005352:	2200      	movs	r2, #0
 8005354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005358:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800535c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	1891      	adds	r1, r2, r2
 8005366:	61b9      	str	r1, [r7, #24]
 8005368:	415b      	adcs	r3, r3
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005370:	4641      	mov	r1, r8
 8005372:	1851      	adds	r1, r2, r1
 8005374:	6139      	str	r1, [r7, #16]
 8005376:	4649      	mov	r1, r9
 8005378:	414b      	adcs	r3, r1
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005388:	4659      	mov	r1, fp
 800538a:	00cb      	lsls	r3, r1, #3
 800538c:	4651      	mov	r1, sl
 800538e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005392:	4651      	mov	r1, sl
 8005394:	00ca      	lsls	r2, r1, #3
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	4603      	mov	r3, r0
 800539c:	4642      	mov	r2, r8
 800539e:	189b      	adds	r3, r3, r2
 80053a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053a4:	464b      	mov	r3, r9
 80053a6:	460a      	mov	r2, r1
 80053a8:	eb42 0303 	adc.w	r3, r2, r3
 80053ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053c8:	4649      	mov	r1, r9
 80053ca:	008b      	lsls	r3, r1, #2
 80053cc:	4641      	mov	r1, r8
 80053ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d2:	4641      	mov	r1, r8
 80053d4:	008a      	lsls	r2, r1, #2
 80053d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053da:	f7fa ff07 	bl	80001ec <__aeabi_uldivmod>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	4b38      	ldr	r3, [pc, #224]	@ (80054c8 <UART_SetConfig+0x4e4>)
 80053e6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2264      	movs	r2, #100	@ 0x64
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	1acb      	subs	r3, r1, r3
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	3332      	adds	r3, #50	@ 0x32
 80053f8:	4a33      	ldr	r2, [pc, #204]	@ (80054c8 <UART_SetConfig+0x4e4>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005404:	441c      	add	r4, r3
 8005406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800540a:	2200      	movs	r2, #0
 800540c:	673b      	str	r3, [r7, #112]	@ 0x70
 800540e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005410:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005414:	4642      	mov	r2, r8
 8005416:	464b      	mov	r3, r9
 8005418:	1891      	adds	r1, r2, r2
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	415b      	adcs	r3, r3
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005424:	4641      	mov	r1, r8
 8005426:	1851      	adds	r1, r2, r1
 8005428:	6039      	str	r1, [r7, #0]
 800542a:	4649      	mov	r1, r9
 800542c:	414b      	adcs	r3, r1
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800543c:	4659      	mov	r1, fp
 800543e:	00cb      	lsls	r3, r1, #3
 8005440:	4651      	mov	r1, sl
 8005442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005446:	4651      	mov	r1, sl
 8005448:	00ca      	lsls	r2, r1, #3
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	4603      	mov	r3, r0
 8005450:	4642      	mov	r2, r8
 8005452:	189b      	adds	r3, r3, r2
 8005454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005456:	464b      	mov	r3, r9
 8005458:	460a      	mov	r2, r1
 800545a:	eb42 0303 	adc.w	r3, r2, r3
 800545e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	663b      	str	r3, [r7, #96]	@ 0x60
 800546a:	667a      	str	r2, [r7, #100]	@ 0x64
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005478:	4649      	mov	r1, r9
 800547a:	008b      	lsls	r3, r1, #2
 800547c:	4641      	mov	r1, r8
 800547e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005482:	4641      	mov	r1, r8
 8005484:	008a      	lsls	r2, r1, #2
 8005486:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800548a:	f7fa feaf 	bl	80001ec <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <UART_SetConfig+0x4e4>)
 8005494:	fba3 1302 	umull	r1, r3, r3, r2
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	2164      	movs	r1, #100	@ 0x64
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	3332      	adds	r3, #50	@ 0x32
 80054a6:	4a08      	ldr	r2, [pc, #32]	@ (80054c8 <UART_SetConfig+0x4e4>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	f003 020f 	and.w	r2, r3, #15
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4422      	add	r2, r4
 80054ba:	609a      	str	r2, [r3, #8]
}
 80054bc:	bf00      	nop
 80054be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054c2:	46bd      	mov	sp, r7
 80054c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c8:	51eb851f 	.word	0x51eb851f

080054cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054cc:	b084      	sub	sp, #16
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	f107 001c 	add.w	r0, r7, #28
 80054da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d122      	bne.n	800552a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80054f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800550c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800550e:	2b01      	cmp	r3, #1
 8005510:	d105      	bne.n	800551e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 faa2 	bl	8005a68 <USB_CoreReset>
 8005524:	4603      	mov	r3, r0
 8005526:	73fb      	strb	r3, [r7, #15]
 8005528:	e01a      	b.n	8005560 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fa96 	bl	8005a68 <USB_CoreReset>
 800553c:	4603      	mov	r3, r0
 800553e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	639a      	str	r2, [r3, #56]	@ 0x38
 8005552:	e005      	b.n	8005560 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	2b01      	cmp	r3, #1
 8005564:	d10b      	bne.n	800557e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f043 0206 	orr.w	r2, r3, #6
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f043 0220 	orr.w	r2, r3, #32
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800558a:	b004      	add	sp, #16
 800558c:	4770      	bx	lr

0800558e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d115      	bne.n	80055fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055de:	2001      	movs	r0, #1
 80055e0:	f7fd f82a 	bl	8002638 <HAL_Delay>
      ms++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa2e 	bl	8005a4c <USB_GetMode>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d01e      	beq.n	8005634 <USB_SetCurrentMode+0x84>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b31      	cmp	r3, #49	@ 0x31
 80055fa:	d9f0      	bls.n	80055de <USB_SetCurrentMode+0x2e>
 80055fc:	e01a      	b.n	8005634 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d115      	bne.n	8005630 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005610:	2001      	movs	r0, #1
 8005612:	f7fd f811 	bl	8002638 <HAL_Delay>
      ms++;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3301      	adds	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fa15 	bl	8005a4c <USB_GetMode>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <USB_SetCurrentMode+0x84>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b31      	cmp	r3, #49	@ 0x31
 800562c:	d9f0      	bls.n	8005610 <USB_SetCurrentMode+0x60>
 800562e:	e001      	b.n	8005634 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e005      	b.n	8005640 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b32      	cmp	r3, #50	@ 0x32
 8005638:	d101      	bne.n	800563e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005648:	b084      	sub	sp, #16
 800564a:	b580      	push	{r7, lr}
 800564c:	b086      	sub	sp, #24
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	e009      	b.n	800567c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3340      	adds	r3, #64	@ 0x40
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	2200      	movs	r2, #0
 8005674:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	3301      	adds	r3, #1
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b0e      	cmp	r3, #14
 8005680:	d9f2      	bls.n	8005668 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d11c      	bne.n	80056c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005696:	f043 0302 	orr.w	r3, r3, #2
 800569a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ac:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	639a      	str	r2, [r3, #56]	@ 0x38
 80056c0:	e00b      	b.n	80056da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056e0:	461a      	mov	r2, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ec:	4619      	mov	r1, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f4:	461a      	mov	r2, r3
 80056f6:	680b      	ldr	r3, [r1, #0]
 80056f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10c      	bne.n	800571a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d104      	bne.n	8005710 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005706:	2100      	movs	r1, #0
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f965 	bl	80059d8 <USB_SetDevSpeed>
 800570e:	e008      	b.n	8005722 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005710:	2101      	movs	r1, #1
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f960 	bl	80059d8 <USB_SetDevSpeed>
 8005718:	e003      	b.n	8005722 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800571a:	2103      	movs	r1, #3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f95b 	bl	80059d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005722:	2110      	movs	r1, #16
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f8f3 	bl	8005910 <USB_FlushTxFifo>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f91f 	bl	8005978 <USB_FlushRxFifo>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800574a:	461a      	mov	r2, r3
 800574c:	2300      	movs	r3, #0
 800574e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005756:	461a      	mov	r2, r3
 8005758:	2300      	movs	r3, #0
 800575a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005762:	461a      	mov	r2, r3
 8005764:	2300      	movs	r3, #0
 8005766:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	e043      	b.n	80057f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005780:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005784:	d118      	bne.n	80057b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005798:	461a      	mov	r2, r3
 800579a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	e013      	b.n	80057ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ae:	461a      	mov	r2, r3
 80057b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e008      	b.n	80057ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c4:	461a      	mov	r2, r3
 80057c6:	2300      	movs	r3, #0
 80057c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d6:	461a      	mov	r2, r3
 80057d8:	2300      	movs	r3, #0
 80057da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e8:	461a      	mov	r2, r3
 80057ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	3301      	adds	r3, #1
 80057f4:	613b      	str	r3, [r7, #16]
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d3b7      	bcc.n	800576e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	e043      	b.n	800588c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800581a:	d118      	bne.n	800584e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582e:	461a      	mov	r2, r3
 8005830:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e013      	b.n	8005860 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005844:	461a      	mov	r2, r3
 8005846:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	e008      	b.n	8005860 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585a:	461a      	mov	r2, r3
 800585c:	2300      	movs	r3, #0
 800585e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586c:	461a      	mov	r2, r3
 800586e:	2300      	movs	r3, #0
 8005870:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587e:	461a      	mov	r2, r3
 8005880:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005884:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3301      	adds	r3, #1
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	429a      	cmp	r2, r3
 8005892:	d3b7      	bcc.n	8005804 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80058b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	f043 0210 	orr.w	r2, r3, #16
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	4b0f      	ldr	r3, [pc, #60]	@ (800590c <USB_DevInit+0x2c4>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f043 0208 	orr.w	r2, r3, #8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d107      	bne.n	80058fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058f4:	f043 0304 	orr.w	r3, r3, #4
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005908:	b004      	add	sp, #16
 800590a:	4770      	bx	lr
 800590c:	803c3800 	.word	0x803c3800

08005910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4a13      	ldr	r2, [pc, #76]	@ (8005974 <USB_FlushTxFifo+0x64>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d901      	bls.n	8005930 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e01b      	b.n	8005968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	daf2      	bge.n	800591e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	019b      	lsls	r3, r3, #6
 8005940:	f043 0220 	orr.w	r2, r3, #32
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a08      	ldr	r2, [pc, #32]	@ (8005974 <USB_FlushTxFifo+0x64>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e006      	b.n	8005968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b20      	cmp	r3, #32
 8005964:	d0f0      	beq.n	8005948 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	00030d40 	.word	0x00030d40

08005978 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3301      	adds	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a11      	ldr	r2, [pc, #68]	@ (80059d4 <USB_FlushRxFifo+0x5c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e018      	b.n	80059c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	daf2      	bge.n	8005984 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2210      	movs	r2, #16
 80059a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a08      	ldr	r2, [pc, #32]	@ (80059d4 <USB_FlushRxFifo+0x5c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e006      	b.n	80059c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d0f0      	beq.n	80059a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	00030d40 	.word	0x00030d40

080059d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	68f9      	ldr	r1, [r7, #12]
 80059f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a24:	f023 0303 	bic.w	r3, r3, #3
 8005a28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a38:	f043 0302 	orr.w	r3, r3, #2
 8005a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f003 0301 	and.w	r3, r3, #1
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	@ (8005acc <USB_CoreReset+0x64>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e01b      	b.n	8005abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	daf2      	bge.n	8005a74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4a09      	ldr	r2, [pc, #36]	@ (8005acc <USB_CoreReset+0x64>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d901      	bls.n	8005ab0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e006      	b.n	8005abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d0f0      	beq.n	8005a9e <USB_CoreReset+0x36>

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	00030d40 	.word	0x00030d40

08005ad0 <memset>:
 8005ad0:	4402      	add	r2, r0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d100      	bne.n	8005ada <memset+0xa>
 8005ad8:	4770      	bx	lr
 8005ada:	f803 1b01 	strb.w	r1, [r3], #1
 8005ade:	e7f9      	b.n	8005ad4 <memset+0x4>

08005ae0 <__libc_init_array>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8005b18 <__libc_init_array+0x38>)
 8005ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8005b1c <__libc_init_array+0x3c>)
 8005ae6:	1b64      	subs	r4, r4, r5
 8005ae8:	10a4      	asrs	r4, r4, #2
 8005aea:	2600      	movs	r6, #0
 8005aec:	42a6      	cmp	r6, r4
 8005aee:	d109      	bne.n	8005b04 <__libc_init_array+0x24>
 8005af0:	4d0b      	ldr	r5, [pc, #44]	@ (8005b20 <__libc_init_array+0x40>)
 8005af2:	4c0c      	ldr	r4, [pc, #48]	@ (8005b24 <__libc_init_array+0x44>)
 8005af4:	f000 f818 	bl	8005b28 <_init>
 8005af8:	1b64      	subs	r4, r4, r5
 8005afa:	10a4      	asrs	r4, r4, #2
 8005afc:	2600      	movs	r6, #0
 8005afe:	42a6      	cmp	r6, r4
 8005b00:	d105      	bne.n	8005b0e <__libc_init_array+0x2e>
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b08:	4798      	blx	r3
 8005b0a:	3601      	adds	r6, #1
 8005b0c:	e7ee      	b.n	8005aec <__libc_init_array+0xc>
 8005b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b12:	4798      	blx	r3
 8005b14:	3601      	adds	r6, #1
 8005b16:	e7f2      	b.n	8005afe <__libc_init_array+0x1e>
 8005b18:	08005b60 	.word	0x08005b60
 8005b1c:	08005b60 	.word	0x08005b60
 8005b20:	08005b60 	.word	0x08005b60
 8005b24:	08005b64 	.word	0x08005b64

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
