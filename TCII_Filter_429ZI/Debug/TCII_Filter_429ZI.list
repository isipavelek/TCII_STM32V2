
TCII_Filter_429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006770  08006770  00007770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800681c  0800681c  0000802c  2**0
                  CONTENTS
  4 .ARM          00000008  0800681c  0800681c  0000781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006824  08006824  0000802c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006824  08006824  00007824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006828  08006828  00007828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0800682c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000802c  2**0
                  CONTENTS
 10 .bss          000068f4  2000002c  2000002c  0000802c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006920  20006920  0000802c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019169  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000387c  00000000  00000000  000211c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  00024a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001021  00000000  00000000  00025f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287f8  00000000  00000000  00026f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb19  00000000  00000000  0004f751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0231  00000000  00000000  0006c26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015c49b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c4  00000000  00000000  0015c4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00161ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006758 	.word	0x08006758

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000030 	.word	0x20000030
 80001e8:	08006758 	.word	0x08006758

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_ADC_ConvCpltCallback>:


#define CARGANDO_A false


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	static bool estadoADC = CARGANDO_A;
	static uint16_t index = 0;
	uint32_t val=ADC_Read();
 80004e4:	f000 f88a 	bl	80005fc <ADC_Read>
 80004e8:	60f8      	str	r0, [r7, #12]
	if (estadoADC==CARGANDO_A){
 80004ea:	4b35      	ldr	r3, [pc, #212]	@ (80005c0 <HAL_ADC_ConvCpltCallback+0xe4>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	f083 0301 	eor.w	r3, r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d019      	beq.n	800052c <HAL_ADC_ConvCpltCallback+0x50>
		InputA[index] =(float32_t)val;
 80004f8:	4b32      	ldr	r3, [pc, #200]	@ (80005c4 <HAL_ADC_ConvCpltCallback+0xe8>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	ee07 2a90 	vmov	s15, r2
 8000502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000506:	4a30      	ldr	r2, [pc, #192]	@ (80005c8 <HAL_ADC_ConvCpltCallback+0xec>)
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4413      	add	r3, r2
 800050c:	edc3 7a00 	vstr	s15, [r3]
		DAC_Write((uint32_t)OutputA[index]);
 8000510:	4b2c      	ldr	r3, [pc, #176]	@ (80005c4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	4a2d      	ldr	r2, [pc, #180]	@ (80005cc <HAL_ADC_ConvCpltCallback+0xf0>)
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	edd3 7a00 	vldr	s15, [r3]
 800051e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000522:	ee17 0a90 	vmov	r0, s15
 8000526:	f000 f87d 	bl	8000624 <DAC_Write>
 800052a:	e018      	b.n	800055e <HAL_ADC_ConvCpltCallback+0x82>
	}
	else {
		InputB[index] =(float32_t) val ;
 800052c:	4b25      	ldr	r3, [pc, #148]	@ (80005c4 <HAL_ADC_ConvCpltCallback+0xe8>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	ee07 2a90 	vmov	s15, r2
 8000536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800053a:	4a25      	ldr	r2, [pc, #148]	@ (80005d0 <HAL_ADC_ConvCpltCallback+0xf4>)
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	edc3 7a00 	vstr	s15, [r3]
		DAC_Write((uint32_t)OutputB[index]);
 8000544:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	4a22      	ldr	r2, [pc, #136]	@ (80005d4 <HAL_ADC_ConvCpltCallback+0xf8>)
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4413      	add	r3, r2
 800054e:	edd3 7a00 	vldr	s15, [r3]
 8000552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000556:	ee17 0a90 	vmov	r0, s15
 800055a:	f000 f863 	bl	8000624 <DAC_Write>
	}

	index++;
 800055e:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	b29a      	uxth	r2, r3
 8000566:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000568:	801a      	strh	r2, [r3, #0]
	if (index == SAMPLES_PER_BLOCK) {
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <HAL_ADC_ConvCpltCallback+0xe8>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000572:	d11c      	bne.n	80005ae <HAL_ADC_ConvCpltCallback+0xd2>
		index = 0;
 8000574:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	801a      	strh	r2, [r3, #0]
		if(estadoADC==CARGANDO_A)estado=PROCESAR_A;
 800057a:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <HAL_ADC_ConvCpltCallback+0xe4>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	f083 0301 	eor.w	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d003      	beq.n	8000590 <HAL_ADC_ConvCpltCallback+0xb4>
 8000588:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <HAL_ADC_ConvCpltCallback+0xfc>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	e002      	b.n	8000596 <HAL_ADC_ConvCpltCallback+0xba>
		else estado=PROCESAR_B;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000592:	2202      	movs	r2, #2
 8000594:	701a      	strb	r2, [r3, #0]
		estadoADC ^= 1;
 8000596:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	f083 0301 	eor.w	r3, r3, #1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	bf14      	ite	ne
 80005a4:	2301      	movne	r3, #1
 80005a6:	2300      	moveq	r3, #0
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <HAL_ADC_ConvCpltCallback+0xe4>)
 80005ac:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(MEASURE_Pin_GPIO_Port,MEASURE_Pin);
 80005ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b2:	480a      	ldr	r0, [pc, #40]	@ (80005dc <HAL_ADC_ConvCpltCallback+0x100>)
 80005b4:	f003 fc25 	bl	8003e02 <HAL_GPIO_TogglePin>

}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000049 	.word	0x20000049
 80005c4:	2000004a 	.word	0x2000004a
 80005c8:	20002918 	.word	0x20002918
 80005cc:	20004918 	.word	0x20004918
 80005d0:	20003918 	.word	0x20003918
 80005d4:	20005918 	.word	0x20005918
 80005d8:	20000048 	.word	0x20000048
 80005dc:	40020800 	.word	0x40020800

080005e0 <ADC_Init>:

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "adc_port.h"

void ADC_Init(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <ADC_Init+0x14>)
 80005e6:	f002 f84f 	bl	8002688 <HAL_ADC_Start_IT>

	HAL_TIM_Base_Start(&htim2);
 80005ea:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <ADC_Init+0x18>)
 80005ec:	f004 fa28 	bl	8004a40 <HAL_TIM_Base_Start>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000200 	.word	0x20000200
 80005f8:	2000030c 	.word	0x2000030c

080005fc <ADC_Read>:
uint32_t ADC_Read(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	return (HAL_ADC_GetValue(&hadc1));
 8000600:	4802      	ldr	r0, [pc, #8]	@ (800060c <ADC_Read+0x10>)
 8000602:	f002 fa2f 	bl	8002a64 <HAL_ADC_GetValue>
 8000606:	4603      	mov	r3, r0
}
 8000608:	4618      	mov	r0, r3
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000200 	.word	0x20000200

08000610 <DAC_Init>:

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "dac_port.h"

void DAC_Init(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

	HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000614:	2100      	movs	r1, #0
 8000616:	4802      	ldr	r0, [pc, #8]	@ (8000620 <DAC_Init+0x10>)
 8000618:	f002 fdad 	bl	8003176 <HAL_DAC_Start>

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000248 	.word	0x20000248

08000624 <DAC_Write>:

void DAC_Write(uint32_t value){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R, value);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	4803      	ldr	r0, [pc, #12]	@ (8000640 <DAC_Write+0x1c>)
 8000634:	f002 fdf1 	bl	800321a <HAL_DAC_SetValue>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000248 	.word	0x20000248

08000644 <Hard_Init>:
/**
 * brief Inicialización de HW
 *
 */

void Hard_Init(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_Init();
 8000648:	f001 ff44 	bl	80024d4 <HAL_Init>
	SystemClock_Config();
 800064c:	f000 f812 	bl	8000674 <SystemClock_Config>
	MX_GPIO_Init();
 8000650:	f000 f9fc 	bl	8000a4c <MX_GPIO_Init>
	MX_ETH_Init();
 8000654:	f000 f908 	bl	8000868 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000658:	f000 f9a0 	bl	800099c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800065c:	f000 f9c8 	bl	80009f0 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 8000660:	f000 f886 	bl	8000770 <MX_ADC1_Init>
	MX_DAC_Init();
 8000664:	f000 f8d6 	bl	8000814 <MX_DAC_Init>
	MX_TIM2_Init();
 8000668:	f000 f94c 	bl	8000904 <MX_TIM2_Init>
	MX_NVIC_Init();
 800066c:	f000 f86c 	bl	8000748 <MX_NVIC_Init>

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	@ 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	@ 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f006 f83c 	bl	8006700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a27      	ldr	r2, [pc, #156]	@ (8000740 <SystemClock_Config+0xcc>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <SystemClock_Config+0xd0>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = FBUS/1000000;
 80006e8:	23a8      	movs	r3, #168	@ 0xa8
 80006ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f0:	2307      	movs	r3, #7
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fcb9 	bl	8004070 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 fa64 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2105      	movs	r1, #5
 8000726:	4618      	mov	r0, r3
 8000728:	f003 ff1a 	bl	8004560 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000732:	f000 fa4d 	bl	8000bd0 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	@ 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
void MX_NVIC_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2012      	movs	r0, #18
 8000752:	f002 fcb8 	bl	80030c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000756:	2012      	movs	r0, #18
 8000758:	f002 fcd1 	bl	80030fe <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2101      	movs	r1, #1
 8000760:	2027      	movs	r0, #39	@ 0x27
 8000762:	f002 fcb0 	bl	80030c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000766:	2027      	movs	r0, #39	@ 0x27
 8000768:	f002 fcc9 	bl	80030fe <HAL_NVIC_EnableIRQ>



}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0


  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]


  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000782:	4b22      	ldr	r3, [pc, #136]	@ (800080c <MX_ADC1_Init+0x9c>)
 8000784:	4a22      	ldr	r2, [pc, #136]	@ (8000810 <MX_ADC1_Init+0xa0>)
 8000786:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000788:	4b20      	ldr	r3, [pc, #128]	@ (800080c <MX_ADC1_Init+0x9c>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078e:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <MX_ADC1_Init+0x9c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_ADC1_Init+0x9c>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_ADC1_Init+0x9c>)
 800079c:	2201      	movs	r2, #1
 800079e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <MX_ADC1_Init+0x9c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007a8:	4b18      	ldr	r3, [pc, #96]	@ (800080c <MX_ADC1_Init+0x9c>)
 80007aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_ADC1_Init+0x9c>)
 80007b2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_ADC1_Init+0x9c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_ADC1_Init+0x9c>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_ADC1_Init+0x9c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_ADC1_Init+0x9c>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d2:	480e      	ldr	r0, [pc, #56]	@ (800080c <MX_ADC1_Init+0x9c>)
 80007d4:	f001 ff14 	bl	8002600 <HAL_ADC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80007de:	f000 f9f7 	bl	8000bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <MX_ADC1_Init+0x9c>)
 80007f4:	f002 f958 	bl	8002aa8 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007fe:	f000 f9e7 	bl	8000bd0 <Error_Handler>
  }


}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000200 	.word	0x20000200
 8000810:	40012000 	.word	0x40012000

08000814 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
  hdac.Instance = DAC;
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_DAC_Init+0x4c>)
 8000824:	4a0f      	ldr	r2, [pc, #60]	@ (8000864 <MX_DAC_Init+0x50>)
 8000826:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <MX_DAC_Init+0x4c>)
 800082a:	f002 fc82 	bl	8003132 <HAL_DAC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000834:	f000 f9cc 	bl	8000bd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <MX_DAC_Init+0x4c>)
 8000848:	f002 fd0c 	bl	8003264 <HAL_DAC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000852:	f000 f9bd 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000248 	.word	0x20000248
 8000864:	40007400 	.word	0x40007400

08000868 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
void MX_ETH_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  heth.Instance = ETH;
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_ETH_Init+0x84>)
 800086e:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <MX_ETH_Init+0x88>)
 8000870:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <MX_ETH_Init+0x8c>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_ETH_Init+0x8c>)
 800087a:	2280      	movs	r2, #128	@ 0x80
 800087c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800087e:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <MX_ETH_Init+0x8c>)
 8000880:	22e1      	movs	r2, #225	@ 0xe1
 8000882:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_ETH_Init+0x8c>)
 8000886:	2200      	movs	r2, #0
 8000888:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_ETH_Init+0x8c>)
 800088c:	2200      	movs	r2, #0
 800088e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_ETH_Init+0x8c>)
 8000892:	2200      	movs	r2, #0
 8000894:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_ETH_Init+0x84>)
 8000898:	4a16      	ldr	r2, [pc, #88]	@ (80008f4 <MX_ETH_Init+0x8c>)
 800089a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_ETH_Init+0x84>)
 800089e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80008a2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_ETH_Init+0x84>)
 80008a6:	4a14      	ldr	r2, [pc, #80]	@ (80008f8 <MX_ETH_Init+0x90>)
 80008a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_ETH_Init+0x84>)
 80008ac:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <MX_ETH_Init+0x94>)
 80008ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_ETH_Init+0x84>)
 80008b2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008b6:	615a      	str	r2, [r3, #20]


  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <MX_ETH_Init+0x84>)
 80008ba:	f002 fdb5 	bl	8003428 <HAL_ETH_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008c4:	f000 f984 	bl	8000bd0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008c8:	2238      	movs	r2, #56	@ 0x38
 80008ca:	2100      	movs	r1, #0
 80008cc:	480c      	ldr	r0, [pc, #48]	@ (8000900 <MX_ETH_Init+0x98>)
 80008ce:	f005 ff17 	bl	8006700 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_ETH_Init+0x98>)
 80008d4:	2221      	movs	r2, #33	@ 0x21
 80008d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_ETH_Init+0x98>)
 80008da:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80008de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <MX_ETH_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000025c 	.word	0x2000025c
 80008f0:	40028000 	.word	0x40028000
 80008f4:	200008a4 	.word	0x200008a4
 80008f8:	20000160 	.word	0x20000160
 80008fc:	200000c0 	.word	0x200000c0
 8000900:	20000088 	.word	0x20000088

08000904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000922:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_TIM2_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = SAMPLE_RATE/(FACTOR_BUS);//SAMPLE_RATE/2;//FBUS/SAMPLE_RATE;
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000936:	f240 727d 	movw	r2, #1917	@ 0x77d
 800093a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_TIM2_Init+0x94>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000948:	4813      	ldr	r0, [pc, #76]	@ (8000998 <MX_TIM2_Init+0x94>)
 800094a:	f004 f829 	bl	80049a0 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000954:	f000 f93c 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000966:	f004 f8d3 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000970:	f000 f92e 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000974:	2320      	movs	r3, #32
 8000976:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_TIM2_Init+0x94>)
 8000982:	f004 fac7 	bl	8004f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 f920 	bl	8000bd0 <Error_Handler>
  }


}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000030c 	.word	0x2000030c

0800099c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <MX_USART3_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009d4:	f004 fb1a 	bl	800500c <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f8f7 	bl	8000bd0 <Error_Handler>
  }


}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000354 	.word	0x20000354
 80009ec:	40004800 	.word	0x40004800

080009f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0


  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2202      	movs	r2, #2
 8000a06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	f003 f9ff 	bl	8003e36 <HAL_PCD_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a3e:	f000 f8c7 	bl	8000bd0 <Error_Handler>
  }

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000398 	.word	0x20000398

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	@ 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b56      	ldr	r3, [pc, #344]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a55      	ldr	r2, [pc, #340]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b53      	ldr	r3, [pc, #332]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b4f      	ldr	r3, [pc, #316]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a4e      	ldr	r2, [pc, #312]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b4c      	ldr	r3, [pc, #304]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b48      	ldr	r3, [pc, #288]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a47      	ldr	r2, [pc, #284]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b45      	ldr	r3, [pc, #276]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b41      	ldr	r3, [pc, #260]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a40      	ldr	r2, [pc, #256]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a39      	ldr	r2, [pc, #228]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b37      	ldr	r3, [pc, #220]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b33      	ldr	r3, [pc, #204]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a32      	ldr	r2, [pc, #200]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b30      	ldr	r3, [pc, #192]	@ (8000bc0 <MX_GPIO_Init+0x174>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b10:	482c      	ldr	r0, [pc, #176]	@ (8000bc4 <MX_GPIO_Init+0x178>)
 8000b12:	f003 f95d 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEASURE_Pin_GPIO_Port,MEASURE_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b1c:	482a      	ldr	r0, [pc, #168]	@ (8000bc8 <MX_GPIO_Init+0x17c>)
 8000b1e:	f003 f957 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2140      	movs	r1, #64	@ 0x40
 8000b26:	4829      	ldr	r0, [pc, #164]	@ (8000bcc <MX_GPIO_Init+0x180>)
 8000b28:	f003 f952 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MEASURE_Pin */
  GPIO_InitStruct.Pin = MEASURE_Pin;
 8000b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MEASURE_Pin_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4820      	ldr	r0, [pc, #128]	@ (8000bc8 <MX_GPIO_Init+0x17c>)
 8000b46:	f002 ff97 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4819      	ldr	r0, [pc, #100]	@ (8000bc8 <MX_GPIO_Init+0x17c>)
 8000b62:	f002 ff89 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b66:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4811      	ldr	r0, [pc, #68]	@ (8000bc4 <MX_GPIO_Init+0x178>)
 8000b80:	f002 ff7a 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b84:	2340      	movs	r3, #64	@ 0x40
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <MX_GPIO_Init+0x180>)
 8000b9c:	f002 ff6c 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <MX_GPIO_Init+0x180>)
 8000bb4:	f002 ff60 	bl	8003a78 <HAL_GPIO_Init>

}
 8000bb8:	bf00      	nop
 8000bba:	3730      	adds	r7, #48	@ 0x30
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40021800 	.word	0x40021800

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop

  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <main>:
float32_t InputB[SAMPLES_PER_BLOCK]={0};
float32_t OutputA[SAMPLES_PER_BLOCK]={0};
float32_t OutputB[SAMPLES_PER_BLOCK]={0};
extern UART_HandleTypeDef huart3;

int main(void){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8

	Hard_Init();
 8000be2:	f7ff fd2f 	bl	8000644 <Hard_Init>
	ADC_Init();
 8000be6:	f7ff fcfb 	bl	80005e0 <ADC_Init>
	DAC_Init();
 8000bea:	f7ff fd11 	bl	8000610 <DAC_Init>
	//arm_float_to_q31(float_iir_taps, iir_taps, IIR_TAP_NUM);

	//Inicializa los filtros
	//arm_fir_init_q31(&SFIR,FIR_TAP_NUM,fir_taps,fir_state,SAMPLES_PER_BLOCK);

	arm_fir_init_f32(&SFIR,FIR_TAP_NUM,float_fir_taps,fir_state,SAMPLES_PER_BLOCK);
 8000bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	4b37      	ldr	r3, [pc, #220]	@ (8000cd4 <main+0xf8>)
 8000bf6:	4a38      	ldr	r2, [pc, #224]	@ (8000cd8 <main+0xfc>)
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	4838      	ldr	r0, [pc, #224]	@ (8000cdc <main+0x100>)
 8000bfc:	f001 fc4b 	bl	8002496 <arm_fir_init_f32>
//	arm_biquad_cascade_df1_init_f32(&SIIR,IIR_TAP_NUM/5,float_iir_taps,iir_state);
	arm_biquad_cascade_df1_init_f32(&SIIR,IIR_TAP_NUM,float_iir_taps,iir_state);
 8000c00:	4b37      	ldr	r3, [pc, #220]	@ (8000ce0 <main+0x104>)
 8000c02:	4a38      	ldr	r2, [pc, #224]	@ (8000ce4 <main+0x108>)
 8000c04:	210f      	movs	r1, #15
 8000c06:	4838      	ldr	r0, [pc, #224]	@ (8000ce8 <main+0x10c>)
 8000c08:	f000 fd66 	bl	80016d8 <arm_biquad_cascade_df1_init_f32>

	UART_Menu();
 8000c0c:	f000 fb68 	bl	80012e0 <UART_Menu>
	UART_Receive_IT_init();
 8000c10:	f000 fb9c 	bl	800134c <UART_Receive_IT_init>

	while(true){

		if(estado!=NO_PROCESAR){
 8000c14:	4b35      	ldr	r3, [pc, #212]	@ (8000cec <main+0x110>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0fb      	beq.n	8000c14 <main+0x38>
			switch (filter){
 8000c1c:	4b34      	ldr	r3, [pc, #208]	@ (8000cf0 <main+0x114>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d02a      	beq.n	8000c7a <main+0x9e>
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	dc4f      	bgt.n	8000cc8 <main+0xec>
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <main+0x56>
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d038      	beq.n	8000ca2 <main+0xc6>
						if(estado==PROCESAR_A){
							arm_fir_f32(&SFIR,InputA, OutputA, SAMPLES_PER_BLOCK);
						}else {
							arm_fir_f32(&SFIR,InputB, OutputB , SAMPLES_PER_BLOCK);
						}
				default:break;
 8000c30:	e04a      	b.n	8000cc8 <main+0xec>
						for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
 8000c32:	2300      	movs	r3, #0
 8000c34:	80fb      	strh	r3, [r7, #6]
 8000c36:	e01b      	b.n	8000c70 <main+0x94>
							if(estado==PROCESAR_A)OutputA[i]=InputA[i];
 8000c38:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <main+0x110>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d10a      	bne.n	8000c56 <main+0x7a>
 8000c40:	88fa      	ldrh	r2, [r7, #6]
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	492b      	ldr	r1, [pc, #172]	@ (8000cf4 <main+0x118>)
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	440a      	add	r2, r1
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	492a      	ldr	r1, [pc, #168]	@ (8000cf8 <main+0x11c>)
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	e009      	b.n	8000c6a <main+0x8e>
							else OutputB[i]=InputB[i];
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4928      	ldr	r1, [pc, #160]	@ (8000cfc <main+0x120>)
 8000c5c:	0092      	lsls	r2, r2, #2
 8000c5e:	440a      	add	r2, r1
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	4927      	ldr	r1, [pc, #156]	@ (8000d00 <main+0x124>)
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	601a      	str	r2, [r3, #0]
						for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	80fb      	strh	r3, [r7, #6]
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c76:	d3df      	bcc.n	8000c38 <main+0x5c>
						break;
 8000c78:	e027      	b.n	8000cca <main+0xee>
						if(estado==PROCESAR_A){
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <main+0x110>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d107      	bne.n	8000c92 <main+0xb6>
							arm_biquad_cascade_df1_f32(&SIIR, InputA, OutputA, SAMPLES_PER_BLOCK);
 8000c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c86:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <main+0x11c>)
 8000c88:	491a      	ldr	r1, [pc, #104]	@ (8000cf4 <main+0x118>)
 8000c8a:	4817      	ldr	r0, [pc, #92]	@ (8000ce8 <main+0x10c>)
 8000c8c:	f000 fba9 	bl	80013e2 <arm_biquad_cascade_df1_f32>
						break;
 8000c90:	e01b      	b.n	8000cca <main+0xee>
							arm_biquad_cascade_df1_f32(&SIIR, InputB, OutputB, SAMPLES_PER_BLOCK);
 8000c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c96:	4a1a      	ldr	r2, [pc, #104]	@ (8000d00 <main+0x124>)
 8000c98:	4918      	ldr	r1, [pc, #96]	@ (8000cfc <main+0x120>)
 8000c9a:	4813      	ldr	r0, [pc, #76]	@ (8000ce8 <main+0x10c>)
 8000c9c:	f000 fba1 	bl	80013e2 <arm_biquad_cascade_df1_f32>
						break;
 8000ca0:	e013      	b.n	8000cca <main+0xee>
						if(estado==PROCESAR_A){
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <main+0x110>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d107      	bne.n	8000cba <main+0xde>
							arm_fir_f32(&SFIR,InputA, OutputA, SAMPLES_PER_BLOCK);
 8000caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cae:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <main+0x11c>)
 8000cb0:	4910      	ldr	r1, [pc, #64]	@ (8000cf4 <main+0x118>)
 8000cb2:	480a      	ldr	r0, [pc, #40]	@ (8000cdc <main+0x100>)
 8000cb4:	f000 fd2c 	bl	8001710 <arm_fir_f32>
				default:break;
 8000cb8:	e006      	b.n	8000cc8 <main+0xec>
							arm_fir_f32(&SFIR,InputB, OutputB , SAMPLES_PER_BLOCK);
 8000cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <main+0x124>)
 8000cc0:	490e      	ldr	r1, [pc, #56]	@ (8000cfc <main+0x120>)
 8000cc2:	4806      	ldr	r0, [pc, #24]	@ (8000cdc <main+0x100>)
 8000cc4:	f000 fd24 	bl	8001710 <arm_fir_f32>
				default:break;
 8000cc8:	bf00      	nop

			}
			estado=NO_PROCESAR;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <main+0x110>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
		if(estado!=NO_PROCESAR){
 8000cd0:	e7a0      	b.n	8000c14 <main+0x38>
 8000cd2:	bf00      	nop
 8000cd4:	200008c4 	.word	0x200008c4
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	200008ac 	.word	0x200008ac
 8000ce0:	200018e0 	.word	0x200018e0
 8000ce4:	2000004c 	.word	0x2000004c
 8000ce8:	200008b8 	.word	0x200008b8
 8000cec:	20000048 	.word	0x20000048
 8000cf0:	200008aa 	.word	0x200008aa
 8000cf4:	20002918 	.word	0x20002918
 8000cf8:	20004918 	.word	0x20004918
 8000cfc:	20003918 	.word	0x20003918
 8000d00:	20005918 	.word	0x20005918

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <HAL_ADC_MspInit+0x7c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d127      	bne.n	8000dc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <HAL_ADC_MspInit+0x80>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dae:	2301      	movs	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <HAL_ADC_MspInit+0x84>)
 8000dc2:	f002 fe59 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	@ 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40012000 	.word	0x40012000
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <HAL_DAC_MspInit+0x7c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d127      	bne.n	8000e4e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <HAL_DAC_MspInit+0x80>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a15      	ldr	r2, [pc, #84]	@ (8000e5c <HAL_DAC_MspInit+0x80>)
 8000e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <HAL_DAC_MspInit+0x80>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_DAC_MspInit+0x80>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a0e      	ldr	r2, [pc, #56]	@ (8000e5c <HAL_DAC_MspInit+0x80>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <HAL_DAC_MspInit+0x80>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e36:	2310      	movs	r3, #16
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <HAL_DAC_MspInit+0x84>)
 8000e4a:	f002 fe15 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	@ 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40007400 	.word	0x40007400
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	@ 0x38
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a55      	ldr	r2, [pc, #340]	@ (8000fd8 <HAL_ETH_MspInit+0x174>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	f040 80a4 	bne.w	8000fd0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
 8000e8c:	4b53      	ldr	r3, [pc, #332]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	4a52      	ldr	r2, [pc, #328]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000e92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e98:	4b50      	ldr	r3, [pc, #320]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ea0:	623b      	str	r3, [r7, #32]
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eac:	4a4b      	ldr	r2, [pc, #300]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000eae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb4:	4b49      	ldr	r3, [pc, #292]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	4b45      	ldr	r3, [pc, #276]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec8:	4a44      	ldr	r2, [pc, #272]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000eca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000ece:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed0:	4b42      	ldr	r3, [pc, #264]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	4a3d      	ldr	r2, [pc, #244]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eec:	4b3b      	ldr	r3, [pc, #236]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	4a36      	ldr	r2, [pc, #216]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f08:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f24:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f38:	4a28      	ldr	r2, [pc, #160]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f40:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <HAL_ETH_MspInit+0x178>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f4c:	2332      	movs	r3, #50	@ 0x32
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5c:	230b      	movs	r3, #11
 8000f5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	481e      	ldr	r0, [pc, #120]	@ (8000fe0 <HAL_ETH_MspInit+0x17c>)
 8000f68:	f002 fd86 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f6c:	2386      	movs	r3, #134	@ 0x86
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4817      	ldr	r0, [pc, #92]	@ (8000fe4 <HAL_ETH_MspInit+0x180>)
 8000f88:	f002 fd76 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9e:	230b      	movs	r3, #11
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480f      	ldr	r0, [pc, #60]	@ (8000fe8 <HAL_ETH_MspInit+0x184>)
 8000faa:	f002 fd65 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc0:	230b      	movs	r3, #11
 8000fc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4808      	ldr	r0, [pc, #32]	@ (8000fec <HAL_ETH_MspInit+0x188>)
 8000fcc:	f002 fd54 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3738      	adds	r7, #56	@ 0x38
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40028000 	.word	0x40028000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40021800 	.word	0x40021800

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001000:	d10d      	bne.n	800101e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <HAL_TIM_Base_MspInit+0x3c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	4a08      	ldr	r2, [pc, #32]	@ (800102c <HAL_TIM_Base_MspInit+0x3c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6413      	str	r3, [r2, #64]	@ 0x40
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_TIM_Base_MspInit+0x3c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a19      	ldr	r2, [pc, #100]	@ (80010b4 <HAL_UART_MspInit+0x84>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12c      	bne.n	80010ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a17      	ldr	r2, [pc, #92]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 800105c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a10      	ldr	r2, [pc, #64]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_UART_MspInit+0x88>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800108a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800109c:	2307      	movs	r3, #7
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_UART_MspInit+0x8c>)
 80010a8:	f002 fce6 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40004800 	.word	0x40004800
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020c00 	.word	0x40020c00

080010c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e0:	d13f      	bne.n	8001162 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b21      	ldr	r3, [pc, #132]	@ (800116c <HAL_PCD_MspInit+0xac>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a20      	ldr	r2, [pc, #128]	@ (800116c <HAL_PCD_MspInit+0xac>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <HAL_PCD_MspInit+0xac>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010fe:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001110:	230a      	movs	r3, #10
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4815      	ldr	r0, [pc, #84]	@ (8001170 <HAL_PCD_MspInit+0xb0>)
 800111c:	f002 fcac 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	480e      	ldr	r0, [pc, #56]	@ (8001170 <HAL_PCD_MspInit+0xb0>)
 8001136:	f002 fc9f 	bl	8003a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <HAL_PCD_MspInit+0xac>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800113e:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <HAL_PCD_MspInit+0xac>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001144:	6353      	str	r3, [r2, #52]	@ 0x34
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_PCD_MspInit+0xac>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a07      	ldr	r2, [pc, #28]	@ (800116c <HAL_PCD_MspInit+0xac>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b05      	ldr	r3, [pc, #20]	@ (800116c <HAL_PCD_MspInit+0xac>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	@ 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <NMI_Handler+0x4>

0800117c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <MemManage_Handler+0x4>

0800118c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <UsageFault_Handler+0x4>

0800119c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f001 f9d5 	bl	8002578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011d8:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <ADC_IRQHandler+0x10>)
 80011da:	f001 fb33 	bl	8002844 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000200 	.word	0x20000200

080011e8 <USART3_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void USART3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011ec:	4802      	ldr	r0, [pc, #8]	@ (80011f8 <USART3_IRQHandler+0x10>)
 80011ee:	f004 f81d 	bl	800522c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000354 	.word	0x20000354

080011fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <UART_handler>:
const uint8_t txt4[]="Ingrese 3 para IIR\n\r";
const uint8_t txt5[]="Ingrese 4 nada\n\r";
extern float32_t OutputA[SAMPLES_PER_BLOCK];
extern float32_t OutputB[SAMPLES_PER_BLOCK];

void UART_handler(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
	if(RxChar3=='1'){
 8001226:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <UART_handler+0xa0>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b31      	cmp	r3, #49	@ 0x31
 800122c:	d107      	bne.n	800123e <UART_handler+0x1e>
		filter= TALKTHROUGH;
 800122e:	4b25      	ldr	r3, [pc, #148]	@ (80012c4 <UART_handler+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
		UART_Transmit((const uint8_t *)"TALKTHROUGH\r\n", sizeof("TALKTHROUGH\r\n"));
 8001234:	210e      	movs	r1, #14
 8001236:	4824      	ldr	r0, [pc, #144]	@ (80012c8 <UART_handler+0xa8>)
 8001238:	f000 f896 	bl	8001368 <UART_Transmit>
 800123c:	e03a      	b.n	80012b4 <UART_handler+0x94>
	}else if(RxChar3=='2'){
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <UART_handler+0xa0>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b32      	cmp	r3, #50	@ 0x32
 8001244:	d107      	bne.n	8001256 <UART_handler+0x36>
		filter= FIR;
 8001246:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <UART_handler+0xa4>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
		UART_Transmit((const uint8_t *)"FIR\r\n", sizeof("FIR\r\n"));
 800124c:	2106      	movs	r1, #6
 800124e:	481f      	ldr	r0, [pc, #124]	@ (80012cc <UART_handler+0xac>)
 8001250:	f000 f88a 	bl	8001368 <UART_Transmit>
 8001254:	e02e      	b.n	80012b4 <UART_handler+0x94>
	}else if(RxChar3=='3'){
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <UART_handler+0xa0>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b33      	cmp	r3, #51	@ 0x33
 800125c:	d107      	bne.n	800126e <UART_handler+0x4e>
		filter= IIR;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <UART_handler+0xa4>)
 8001260:	2202      	movs	r2, #2
 8001262:	701a      	strb	r2, [r3, #0]
		UART_Transmit((const uint8_t *)"IIR\r\n", sizeof("IIR\r\n"));
 8001264:	2106      	movs	r1, #6
 8001266:	481a      	ldr	r0, [pc, #104]	@ (80012d0 <UART_handler+0xb0>)
 8001268:	f000 f87e 	bl	8001368 <UART_Transmit>
 800126c:	e022      	b.n	80012b4 <UART_handler+0x94>
	}else if(RxChar3=='4'){
 800126e:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <UART_handler+0xa0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b34      	cmp	r3, #52	@ 0x34
 8001274:	d11e      	bne.n	80012b4 <UART_handler+0x94>
		filter= NOTHING;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <UART_handler+0xa4>)
 8001278:	2203      	movs	r2, #3
 800127a:	701a      	strb	r2, [r3, #0]
		UART_Transmit((const uint8_t *)"Nada\r\n", sizeof("Nada\r\n"));
 800127c:	2107      	movs	r1, #7
 800127e:	4815      	ldr	r0, [pc, #84]	@ (80012d4 <UART_handler+0xb4>)
 8001280:	f000 f872 	bl	8001368 <UART_Transmit>
		for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
 8001284:	2300      	movs	r3, #0
 8001286:	80fb      	strh	r3, [r7, #6]
 8001288:	e010      	b.n	80012ac <UART_handler+0x8c>
			OutputA[i]=0;
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <UART_handler+0xb8>)
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
			OutputB[i]=0;
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <UART_handler+0xbc>)
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
		for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	3301      	adds	r3, #1
 80012aa:	80fb      	strh	r3, [r7, #6]
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012b2:	d3ea      	bcc.n	800128a <UART_handler+0x6a>
		}
	}
	UART_Menu();
 80012b4:	f000 f814 	bl	80012e0 <UART_Menu>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20006918 	.word	0x20006918
 80012c4:	200008aa 	.word	0x200008aa
 80012c8:	08006770 	.word	0x08006770
 80012cc:	08006780 	.word	0x08006780
 80012d0:	08006788 	.word	0x08006788
 80012d4:	08006790 	.word	0x08006790
 80012d8:	20004918 	.word	0x20004918
 80012dc:	20005918 	.word	0x20005918

080012e0 <UART_Menu>:
void UART_Menu(void){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	UART_Transmit(txt1, sizeof(txt1));
 80012e4:	2108      	movs	r1, #8
 80012e6:	480a      	ldr	r0, [pc, #40]	@ (8001310 <UART_Menu+0x30>)
 80012e8:	f000 f83e 	bl	8001368 <UART_Transmit>
	UART_Transmit(txt2, sizeof(txt2));
 80012ec:	211e      	movs	r1, #30
 80012ee:	4809      	ldr	r0, [pc, #36]	@ (8001314 <UART_Menu+0x34>)
 80012f0:	f000 f83a 	bl	8001368 <UART_Transmit>
	UART_Transmit(txt3, sizeof(txt3));
 80012f4:	2115      	movs	r1, #21
 80012f6:	4808      	ldr	r0, [pc, #32]	@ (8001318 <UART_Menu+0x38>)
 80012f8:	f000 f836 	bl	8001368 <UART_Transmit>
	UART_Transmit(txt4, sizeof(txt4));
 80012fc:	2115      	movs	r1, #21
 80012fe:	4807      	ldr	r0, [pc, #28]	@ (800131c <UART_Menu+0x3c>)
 8001300:	f000 f832 	bl	8001368 <UART_Transmit>
	UART_Transmit(txt5, sizeof(txt5));
 8001304:	2111      	movs	r1, #17
 8001306:	4806      	ldr	r0, [pc, #24]	@ (8001320 <UART_Menu+0x40>)
 8001308:	f000 f82e 	bl	8001368 <UART_Transmit>


}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	080067b0 	.word	0x080067b0
 8001314:	080067b8 	.word	0x080067b8
 8001318:	080067d8 	.word	0x080067d8
 800131c:	080067f0 	.word	0x080067f0
 8001320:	08006808 	.word	0x08006808

08001324 <HAL_UART_RxCpltCallback>:
#include "hw_init.h"

extern UART_HandleTypeDef huart3;
extern uint8_t RxChar3;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	UART_handler();
 800132c:	f7ff ff78 	bl	8001220 <UART_handler>
	HAL_UART_Receive_IT(&huart3,&RxChar3,1);
 8001330:	2201      	movs	r2, #1
 8001332:	4904      	ldr	r1, [pc, #16]	@ (8001344 <HAL_UART_RxCpltCallback+0x20>)
 8001334:	4804      	ldr	r0, [pc, #16]	@ (8001348 <HAL_UART_RxCpltCallback+0x24>)
 8001336:	f003 ff48 	bl	80051ca <HAL_UART_Receive_IT>

}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20006918 	.word	0x20006918
 8001348:	20000354 	.word	0x20000354

0800134c <UART_Receive_IT_init>:

void UART_Receive_IT_init(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3,&RxChar3,1);
 8001350:	2201      	movs	r2, #1
 8001352:	4903      	ldr	r1, [pc, #12]	@ (8001360 <UART_Receive_IT_init+0x14>)
 8001354:	4803      	ldr	r0, [pc, #12]	@ (8001364 <UART_Receive_IT_init+0x18>)
 8001356:	f003 ff38 	bl	80051ca <HAL_UART_Receive_IT>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20006918 	.word	0x20006918
 8001364:	20000354 	.word	0x20000354

08001368 <UART_Transmit>:

void UART_Transmit(const uint8_t *pData, uint16_t Size){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart3, pData, Size, HAL_MAX_DELAY);
 8001374:	887a      	ldrh	r2, [r7, #2]
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <UART_Transmit+0x24>)
 800137e:	f003 fe92 	bl	80050a6 <HAL_UART_Transmit>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000354 	.word	0x20000354

08001390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001396:	490e      	ldr	r1, [pc, #56]	@ (80013d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001398:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013ac:	4c0b      	ldr	r4, [pc, #44]	@ (80013dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ba:	f7ff ff1f 	bl	80011fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013be:	f005 f9a7 	bl	8006710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c2:	f7ff fc0b 	bl	8000bdc <main>
  bx  lr    
 80013c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80013d4:	0800682c 	.word	0x0800682c
  ldr r2, =_sbss
 80013d8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80013dc:	20006920 	.word	0x20006920

080013e0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <CAN1_RX0_IRQHandler>

080013e2 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b097      	sub	sp, #92	@ 0x5c
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
  float32_t *pIn = pSrc;                         /*  source pointer            */
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	657b      	str	r3, [r7, #84]	@ 0x54
  float32_t *pOut = pDst;                        /*  destination pointer       */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	653b      	str	r3, [r7, #80]	@ 0x50
  float32_t *pState = S->pState;                 /*  pState pointer            */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float32_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	64bb      	str	r3, [r7, #72]	@ 0x48
  float32_t acc;                                 /*  Simulates the accumulator */
  float32_t b0, b1, b2, a1, a2;                  /*  Filter coefficients       */
  float32_t Xn1, Xn2, Yn1, Yn2;                  /*  Filter pState variables   */
  float32_t Xn;                                  /*  temporary input           */
  uint32_t sample, stage = S->numStages;         /*  loop counters             */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	633b      	str	r3, [r7, #48]	@ 0x30
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 800140a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800140c:	1d1a      	adds	r2, r3, #4
 800140e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    b1 = *pCoeffs++;
 8001414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001416:	1d1a      	adds	r2, r3, #4
 8001418:	64ba      	str	r2, [r7, #72]	@ 0x48
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
    b2 = *pCoeffs++;
 800141e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001420:	1d1a      	adds	r2, r3, #4
 8001422:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    a1 = *pCoeffs++;
 8001428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800142a:	1d1a      	adds	r2, r3, #4
 800142c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	623b      	str	r3, [r7, #32]
    a2 = *pCoeffs++;
 8001432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001434:	1d1a      	adds	r2, r3, #4
 8001436:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	61fb      	str	r3, [r7, #28]

    /* Reading the pState values */
    Xn1 = pState[0];
 800143c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	647b      	str	r3, [r7, #68]	@ 0x44
    Xn2 = pState[1];
 8001442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	643b      	str	r3, [r7, #64]	@ 0x40
    Yn1 = pState[2];
 8001448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Yn2 = pState[3];
 800144e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	63bb      	str	r3, [r7, #56]	@ 0x38
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     */

    sample = blockSize >> 2u;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	637b      	str	r3, [r7, #52]	@ 0x34

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while(sample > 0u)
 800145a:	e0ce      	b.n	80015fa <arm_biquad_cascade_df1_f32+0x218>
    {
      /* Read the first input */
      Xn = *pIn++;
 800145c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800145e:	1d1a      	adds	r2, r3, #4
 8001460:	657a      	str	r2, [r7, #84]	@ 0x54
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn2 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8001466:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800146a:	edd7 7a06 	vldr	s15, [r7, #24]
 800146e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001472:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001476:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800147a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001482:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001486:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800148a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001492:	edd7 6a08 	vldr	s13, [r7, #32]
 8001496:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800149a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80014a6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn2;
 80014b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014b8:	1d1a      	adds	r2, r3, #4
 80014ba:	653a      	str	r2, [r7, #80]	@ 0x50
 80014bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80014be:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the second input */
      Xn2 = *pIn++;
 80014c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014c2:	1d1a      	adds	r2, r3, #4
 80014c4:	657a      	str	r2, [r7, #84]	@ 0x54
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	643b      	str	r3, [r7, #64]	@ 0x40

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn1 = (b0 * Xn2) + (b1 * Xn) + (b2 * Xn1) + (a1 * Yn2) + (a2 * Yn1);
 80014ca:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014ce:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80014d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d6:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80014da:	edd7 7a06 	vldr	s15, [r7, #24]
 80014de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80014ea:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80014ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f6:	edd7 6a08 	vldr	s13, [r7, #32]
 80014fa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001506:	edd7 6a07 	vldr	s13, [r7, #28]
 800150a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800150e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001516:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn1;
 800151a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800151c:	1d1a      	adds	r2, r3, #4
 800151e:	653a      	str	r2, [r7, #80]	@ 0x50
 8001520:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001522:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the third input */
      Xn1 = *pIn++;
 8001524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001526:	1d1a      	adds	r2, r3, #4
 8001528:	657a      	str	r2, [r7, #84]	@ 0x54
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	647b      	str	r3, [r7, #68]	@ 0x44

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn2 = (b0 * Xn1) + (b1 * Xn2) + (b2 * Xn) + (a1 * Yn1) + (a2 * Yn2);
 800152e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001532:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800153a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800153e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800154a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800154e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155a:	edd7 6a08 	vldr	s13, [r7, #32]
 800155e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156a:	edd7 6a07 	vldr	s13, [r7, #28]
 800156e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn2;
 800157e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001580:	1d1a      	adds	r2, r3, #4
 8001582:	653a      	str	r2, [r7, #80]	@ 0x50
 8001584:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001586:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the forth input */
      Xn = *pIn++;
 8001588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800158a:	1d1a      	adds	r2, r3, #4
 800158c:	657a      	str	r2, [r7, #84]	@ 0x54
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn1 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn2) + (a2 * Yn1);
 8001592:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001596:	edd7 7a06 	vldr	s15, [r7, #24]
 800159a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80015a2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80015a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80015b2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80015b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015be:	edd7 6a08 	vldr	s13, [r7, #32]
 80015c2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80015c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80015d2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80015d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015de:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn1;
 80015e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015e4:	1d1a      	adds	r2, r3, #4
 80015e6:	653a      	str	r2, [r7, #80]	@ 0x50
 80015e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015ea:	601a      	str	r2, [r3, #0]
      /* The states should be updated as:  */
      /* Xn2 = Xn1    */
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */
      Xn2 = Xn1;
 80015ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015ee:	643b      	str	r3, [r7, #64]	@ 0x40
      Xn1 = Xn;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	647b      	str	r3, [r7, #68]	@ 0x44

      /* decrement the loop counter */
      sample--;
 80015f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015f6:	3b01      	subs	r3, #1
 80015f8:	637b      	str	r3, [r7, #52]	@ 0x34
    while(sample > 0u)
 80015fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f47f af2d 	bne.w	800145c <arm_biquad_cascade_df1_f32+0x7a>

    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    sample = blockSize & 0x3u;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	637b      	str	r3, [r7, #52]	@ 0x34

    while(sample > 0u)
 800160a:	e03c      	b.n	8001686 <arm_biquad_cascade_df1_f32+0x2a4>
    {
      /* Read the input */
      Xn = *pIn++;
 800160c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800160e:	1d1a      	adds	r2, r3, #4
 8001610:	657a      	str	r2, [r7, #84]	@ 0x54
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8001616:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800161a:	edd7 7a06 	vldr	s15, [r7, #24]
 800161e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001622:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001626:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800162a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001632:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001636:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800163a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001642:	edd7 6a08 	vldr	s13, [r7, #32]
 8001646:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800164a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001652:	edd7 6a07 	vldr	s13, [r7, #28]
 8001656:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800165a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001662:	edc7 7a05 	vstr	s15, [r7, #20]

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = acc;
 8001666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001668:	1d1a      	adds	r2, r3, #4
 800166a:	653a      	str	r2, [r7, #80]	@ 0x50
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	601a      	str	r2, [r3, #0]
      /* The states should be updated as:    */
      /* Xn2 = Xn1    */
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */
      Xn2 = Xn1;
 8001670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001672:	643b      	str	r3, [r7, #64]	@ 0x40
      Xn1 = Xn;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	647b      	str	r3, [r7, #68]	@ 0x44
      Yn2 = Yn1;
 8001678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800167a:	63bb      	str	r3, [r7, #56]	@ 0x38
      Yn1 = acc;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* decrement the loop counter */
      sample--;
 8001680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001682:	3b01      	subs	r3, #1
 8001684:	637b      	str	r3, [r7, #52]	@ 0x34
    while(sample > 0u)
 8001686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1bf      	bne.n	800160c <arm_biquad_cascade_df1_f32+0x22a>

    }

    /*  Store the updated state variables back into the pState array */
    *pState++ = Xn1;
 800168c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800168e:	1d1a      	adds	r2, r3, #4
 8001690:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001694:	601a      	str	r2, [r3, #0]
    *pState++ = Xn2;
 8001696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001698:	1d1a      	adds	r2, r3, #4
 800169a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800169c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800169e:	601a      	str	r2, [r3, #0]
    *pState++ = Yn1;
 80016a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016a2:	1d1a      	adds	r2, r3, #4
 80016a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80016a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016a8:	601a      	str	r2, [r3, #0]
    *pState++ = Yn2;
 80016aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016ac:	1d1a      	adds	r2, r3, #4
 80016ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80016b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016b2:	601a      	str	r2, [r3, #0]

    /*  The first stage goes from the input buffer to the output buffer. */
    /*  Subsequent numStages  occur in-place in the output buffer */
    pIn = pDst;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Reset the output pointer */
    pOut = pDst;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	653b      	str	r3, [r7, #80]	@ 0x50

    /* decrement the loop counter */
    stage--;
 80016bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016be:	3b01      	subs	r3, #1
 80016c0:	633b      	str	r3, [r7, #48]	@ 0x30

  } while(stage > 0u);
 80016c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f47f aea0 	bne.w	800140a <arm_biquad_cascade_df1_f32+0x28>

  } while(stage > 0u);

#endif /*   #ifndef ARM_MATH_CM0_FAMILY         */

}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	375c      	adds	r7, #92	@ 0x5c
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
  arm_biquad_casd_df1_inst_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	460b      	mov	r3, r1
 80016e6:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 80016e8:	7afa      	ldrb	r2, [r7, #11]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	601a      	str	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4u * (uint32_t) numStages) * sizeof(float32_t));
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	461a      	mov	r2, r3
 80016fa:	2100      	movs	r1, #0
 80016fc:	6838      	ldr	r0, [r7, #0]
 80016fe:	f004 ffff 	bl	8006700 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	605a      	str	r2, [r3, #4]
}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 8001710:	b480      	push	{r7}
 8001712:	b0a7      	sub	sp, #156	@ 0x9c
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */
   float32_t p0,p1,p2,p3,p4,p5,p6,p7;             /* Temporary product values */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001738:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800173c:	3b01      	subs	r3, #1
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]  
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]  
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]  
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]  
    */
   blkCnt = blockSize >> 3;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	08db      	lsrs	r3, r3, #3
 800174a:	643b      	str	r3, [r7, #64]	@ 0x40

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.  
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 800174c:	f000 bdf8 	b.w	8002340 <arm_fir_f32+0xc30>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	1d13      	adds	r3, r2, #4
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800175a:	1d19      	adds	r1, r3, #4
 800175c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	1d13      	adds	r3, r2, #4
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800176e:	1d19      	adds	r1, r3, #4
 8001770:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	1d13      	adds	r3, r2, #4
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001782:	1d19      	adds	r1, r3, #4
 8001784:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	1d13      	adds	r3, r2, #4
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001796:	1d19      	adds	r1, r3, #4
 8001798:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      acc1 = 0.0f;
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      acc2 = 0.0f;
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      acc3 = 0.0f;
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	67bb      	str	r3, [r7, #120]	@ 0x78
      acc4 = 0.0f;
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	677b      	str	r3, [r7, #116]	@ 0x74
      acc5 = 0.0f;
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	673b      	str	r3, [r7, #112]	@ 0x70
      acc6 = 0.0f;
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
      acc7 = 0.0f;		
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	66bb      	str	r3, [r7, #104]	@ 0x68

      /* Initialize state pointer */
      px = pState;
 80017d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Initialize coeff pointer */
      pb = (pCoeffs);		
 80017dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   
      /* This is separated from the others to avoid 
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	1d13      	adds	r3, r2, #4
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017ec:	1d19      	adds	r1, r3, #4
 80017ee:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	1d13      	adds	r3, r2, #4
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001800:	1d19      	adds	r1, r3, #4
 8001802:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	1d13      	adds	r3, r2, #4
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001814:	1d19      	adds	r1, r3, #4
 8001816:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	1d13      	adds	r3, r2, #4
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001828:	1d19      	adds	r1, r3, #4
 800182a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 8001832:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001836:	1d1a      	adds	r2, r3, #4
 8001838:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	667b      	str	r3, [r7, #100]	@ 0x64
      x1 = *px++;
 8001840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001844:	1d1a      	adds	r2, r3, #4
 8001846:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	663b      	str	r3, [r7, #96]	@ 0x60
      x2 = *px++;
 800184e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001852:	1d1a      	adds	r2, r3, #4
 8001854:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      x3 = *px++;
 800185c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001860:	1d1a      	adds	r2, r3, #4
 8001862:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	65bb      	str	r3, [r7, #88]	@ 0x58
      x4 = *px++;
 800186a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800186e:	1d1a      	adds	r2, r3, #4
 8001870:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	657b      	str	r3, [r7, #84]	@ 0x54
      x5 = *px++;
 8001878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800187c:	1d1a      	adds	r2, r3, #4
 800187e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	653b      	str	r3, [r7, #80]	@ 0x50
      x6 = *px++;
 8001886:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800188a:	1d1a      	adds	r2, r3, #4
 800188c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3u;
 8001894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001896:	08db      	lsrs	r3, r3, #3
 8001898:	647b      	str	r3, [r7, #68]	@ 0x44
      
      /* Loop over the number of taps.  Unroll by a factor of 8.  
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
 800189a:	f000 bc73 	b.w	8002184 <arm_fir_f32+0xa74>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 800189e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018a2:	1d1a      	adds	r2, r3, #4
 80018a4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 80018ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018b0:	1d1a      	adds	r2, r3, #4
 80018b2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	633b      	str	r3, [r7, #48]	@ 0x30

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         p0 = x0 * c0;
 80018ba:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80018be:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         p1 = x1 * c0;
 80018ca:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80018ce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         p2 = x2 * c0;
 80018da:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80018de:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         p3 = x3 * c0;
 80018ea:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80018ee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f6:	edc7 7a08 	vstr	s15, [r7, #32]

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         p4 = x4 * c0;
 80018fa:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80018fe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001906:	edc7 7a07 	vstr	s15, [r7, #28]

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         p5 = x5 * c0;
 800190a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800190e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001916:	edc7 7a06 	vstr	s15, [r7, #24]

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         p6 = x6 * c0;
 800191a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800191e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001926:	edc7 7a05 	vstr	s15, [r7, #20]

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         p7 = x7 * c0;
 800192a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800192e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	edc7 7a04 	vstr	s15, [r7, #16]
         
         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 800193a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800193e:	1d1a      	adds	r2, r3, #4
 8001940:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 8001948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800194c:	1d1a      	adds	r2, r3, #4
 800194e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	667b      	str	r3, [r7, #100]	@ 0x64
         
         acc0 += p0;
 8001956:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 800195a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001962:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001966:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800196a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001976:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800197a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001982:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001986:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800198a:	edd7 7a08 	vldr	s15, [r7, #32]
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001996:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800199a:	edd7 7a07 	vldr	s15, [r7, #28]
 800199e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 80019a6:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80019aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b2:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 80019b6:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80019ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80019be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 80019c6:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80019ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68


         /* Perform the multiply-accumulate */
         p0 = x1 * c0;
 80019d6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80019da:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x2 * c0;   
 80019e6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80019ea:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x3 * c0;   
 80019f6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80019fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x4 * c0;   
 8001a06:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001a0a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a12:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x5 * c0;   
 8001a16:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001a1a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a22:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x6 * c0;   
 8001a26:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a2a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a32:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x7 * c0;   
 8001a36:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001a3a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x0 * c0;   
 8001a46:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001a4a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a52:	edc7 7a04 	vstr	s15, [r7, #16]
         
         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 8001a56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a5a:	1d1a      	adds	r2, r3, #4
 8001a5c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 8001a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a68:	1d1a      	adds	r2, r3, #4
 8001a6a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	663b      	str	r3, [r7, #96]	@ 0x60
         
         acc0 += p0;
 8001a72:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001a76:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001a82:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001a86:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001a92:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001a96:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001aa2:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001aa6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aae:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001ab2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001ab6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abe:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001ac2:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001ac6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001ad2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001ad6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ade:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001ae2:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001ae6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aee:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x2 * c0;
 8001af2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001af6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x3 * c0;   
 8001b02:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001b06:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x4 * c0;   
 8001b12:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001b16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x5 * c0;   
 8001b22:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b26:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2e:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x6 * c0;   
 8001b32:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b36:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3e:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x7 * c0;   
 8001b42:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001b46:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4e:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x0 * c0;   
 8001b52:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001b56:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5e:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x1 * c0;   
 8001b62:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001b66:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001b72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b76:	1d1a      	adds	r2, r3, #4
 8001b78:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 8001b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b84:	1d1a      	adds	r2, r3, #4
 8001b86:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
         
         acc0 += p0;
 8001b8e:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001b92:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001b9e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001ba2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001bae:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001bb2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bba:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001bbe:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001bc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bca:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001bce:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001bd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001bde:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001be2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001bee:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001bf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfa:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001bfe:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001c02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0a:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x3 * c0;
 8001c0e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001c12:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x4 * c0;   
 8001c1e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001c22:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x5 * c0;   
 8001c2e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c32:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x6 * c0;   
 8001c3e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001c42:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4a:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x7 * c0;   
 8001c4e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c52:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5a:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x0 * c0;   
 8001c5e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001c62:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x1 * c0;   
 8001c6e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001c72:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7a:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x2 * c0;   
 8001c7e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001c82:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8a:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c92:	1d1a      	adds	r2, r3, #4
 8001c94:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 8001c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ca0:	1d1a      	adds	r2, r3, #4
 8001ca2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
         
         acc0 += p0;
 8001caa:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001cae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb6:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001cba:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001cbe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001cca:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001cce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd6:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001cda:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001cde:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001cea:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001cee:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf6:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001cfa:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001cfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001d0a:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001d0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001d1a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001d1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d26:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x4 * c0;
 8001d2a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001d2e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d36:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x5 * c0;   
 8001d3a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001d3e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d46:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x6 * c0;   
 8001d4a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001d4e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x7 * c0;   
 8001d5a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d5e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d66:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x0 * c0;   
 8001d6a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001d6e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d76:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x1 * c0;   
 8001d7a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001d7e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d86:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x2 * c0;   
 8001d8a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001d8e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d96:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x3 * c0;   
 8001d9a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001d9e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da6:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dae:	1d1a      	adds	r2, r3, #4
 8001db0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 8001db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dbc:	1d1a      	adds	r2, r3, #4
 8001dbe:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	657b      	str	r3, [r7, #84]	@ 0x54
         
         acc0 += p0;
 8001dc6:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001dca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd2:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001dd6:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001dda:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001de6:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001dea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001df6:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001dfa:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001e06:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001e0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e12:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001e16:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001e1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001e26:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001e2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e32:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001e36:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e42:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x5 * c0;
 8001e46:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e4a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e52:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x6 * c0;   
 8001e56:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e5a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e62:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x7 * c0;   
 8001e66:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001e6a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x0 * c0;   
 8001e76:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001e7a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e82:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x1 * c0;   
 8001e86:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001e8a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x2 * c0;   
 8001e96:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001e9a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea2:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x3 * c0;   
 8001ea6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001eaa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb2:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x4 * c0;   
 8001eb6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001eba:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001ec6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001eca:	1d1a      	adds	r2, r3, #4
 8001ecc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8001ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ed8:	1d1a      	adds	r2, r3, #4
 8001eda:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	653b      	str	r3, [r7, #80]	@ 0x50
         
         acc0 += p0;
 8001ee2:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001ee6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001ef2:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001ef6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001f02:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001f06:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001f12:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001f16:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001f22:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001f26:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001f32:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001f36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001f42:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001f46:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001f52:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001f56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x6 * c0;
 8001f62:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001f66:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x7 * c0;   
 8001f72:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001f76:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x0 * c0;   
 8001f82:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001f86:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x1 * c0;   
 8001f92:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001f96:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9e:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x2 * c0;   
 8001fa2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001fa6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fae:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x3 * c0;   
 8001fb2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001fb6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fbe:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x4 * c0;   
 8001fc2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001fc6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fce:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x5 * c0;   
 8001fd2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001fd6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fde:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fe6:	1d1a      	adds	r2, r3, #4
 8001fe8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8001ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ff4:	1d1a      	adds	r2, r3, #4
 8001ff6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
         
         acc0 += p0;
 8001ffe:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002002:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 800200e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002012:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 800201e:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002022:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 800202e:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002032:	edd7 7a08 	vldr	s15, [r7, #32]
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 800203e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002042:	edd7 7a07 	vldr	s15, [r7, #28]
 8002046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 800204e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002052:	edd7 7a06 	vldr	s15, [r7, #24]
 8002056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 800205e:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002062:	edd7 7a05 	vldr	s15, [r7, #20]
 8002066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 800206e:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002072:	edd7 7a04 	vldr	s15, [r7, #16]
 8002076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207a:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x7 * c0;
 800207e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002082:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x0 * c0;   
 800208e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002092:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x1 * c0;   
 800209e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80020a2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x2 * c0;   
 80020ae:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80020b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ba:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x3 * c0;   
 80020be:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80020c2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ca:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x4 * c0;   
 80020ce:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80020d2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x5 * c0;   
 80020de:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020e2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ea:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x6 * c0;   
 80020ee:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80020f2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	edc7 7a04 	vstr	s15, [r7, #16]

         tapCnt--;
 80020fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002100:	3b01      	subs	r3, #1
 8002102:	647b      	str	r3, [r7, #68]	@ 0x44
         
         acc0 += p0;
 8002104:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002108:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800210c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002110:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8002114:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002118:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800211c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002120:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8002124:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002128:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800212c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002130:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8002134:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002138:	edd7 7a08 	vldr	s15, [r7, #32]
 800213c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002140:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8002144:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002148:	edd7 7a07 	vldr	s15, [r7, #28]
 800214c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002150:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8002154:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002158:	edd7 7a06 	vldr	s15, [r7, #24]
 800215c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002160:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8002164:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002168:	edd7 7a05 	vldr	s15, [r7, #20]
 800216c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002170:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8002174:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002178:	edd7 7a04 	vldr	s15, [r7, #16]
 800217c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002180:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
      while(tapCnt > 0u)
 8002184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002186:	2b00      	cmp	r3, #0
 8002188:	f47f ab89 	bne.w	800189e <arm_fir_f32+0x18e>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 800218c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	647b      	str	r3, [r7, #68]	@ 0x44

      while(tapCnt > 0u)
 8002194:	e09e      	b.n	80022d4 <arm_fir_f32+0xbc4>
      {
         /* Read coefficients */
         c0 = *(pb++);
 8002196:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800219a:	1d1a      	adds	r2, r3, #4
 800219c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Fetch 1 state variable */
         x7 = *(px++);
 80021a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021a8:	1d1a      	adds	r2, r3, #4
 80021aa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	633b      	str	r3, [r7, #48]	@ 0x30

         /* Perform the multiply-accumulates */      
         p0 = x0 * c0;
 80021b2:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80021b6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80021ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021be:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x1 * c0;   
 80021c2:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80021c6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80021ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ce:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x2 * c0;   
 80021d2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80021d6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x3 * c0;   
 80021e2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80021e6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80021ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ee:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x4 * c0;   
 80021f2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80021f6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x5 * c0;   
 8002202:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002206:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x6 * c0;   
 8002212:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002216:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x7 * c0;   
 8002222:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002226:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800222a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222e:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Reuse the present sample states for next sample */
         x0 = x1;
 8002232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002234:	667b      	str	r3, [r7, #100]	@ 0x64
         x1 = x2;
 8002236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002238:	663b      	str	r3, [r7, #96]	@ 0x60
         x2 = x3;
 800223a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800223c:	65fb      	str	r3, [r7, #92]	@ 0x5c
         x3 = x4;
 800223e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002240:	65bb      	str	r3, [r7, #88]	@ 0x58
         x4 = x5;
 8002242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002244:	657b      	str	r3, [r7, #84]	@ 0x54
         x5 = x6;
 8002246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002248:	653b      	str	r3, [r7, #80]	@ 0x50
         x6 = x7;
 800224a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224c:	64fb      	str	r3, [r7, #76]	@ 0x4c
         
         acc0 += p0;
 800224e:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002252:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 800225e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002262:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 800226e:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002272:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 800227e:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002282:	edd7 7a08 	vldr	s15, [r7, #32]
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 800228e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002292:	edd7 7a07 	vldr	s15, [r7, #28]
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 800229e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80022a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80022a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022aa:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 80022ae:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80022b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80022b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ba:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 80022be:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80022c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ca:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Decrement the loop counter */
         tapCnt--;
 80022ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d0:	3b01      	subs	r3, #1
 80022d2:	647b      	str	r3, [r7, #68]	@ 0x44
      while(tapCnt > 0u)
 80022d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f47f af5d 	bne.w	8002196 <arm_fir_f32+0xa86>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 80022dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022e0:	3320      	adds	r3, #32
 80022e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	1d1a      	adds	r2, r3, #4
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80022f0:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	1d1a      	adds	r2, r3, #4
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022fc:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	1d1a      	adds	r2, r3, #4
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002306:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	1d1a      	adds	r2, r3, #4
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002310:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1d1a      	adds	r2, r3, #4
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800231a:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002324:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1d1a      	adds	r2, r3, #4
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800232e:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	1d1a      	adds	r2, r3, #4
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002338:	601a      	str	r2, [r3, #0]

      blkCnt--;
 800233a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800233c:	3b01      	subs	r3, #1
 800233e:	643b      	str	r3, [r7, #64]	@ 0x40
   while(blkCnt > 0u)
 8002340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	f47f aa04 	bne.w	8001750 <arm_fir_f32+0x40>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.  
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	643b      	str	r3, [r7, #64]	@ 0x40

   while(blkCnt > 0u)
 8002350:	e040      	b.n	80023d4 <arm_fir_f32+0xcc4>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	1d13      	adds	r3, r2, #4
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800235c:	1d19      	adds	r1, r3, #4
 800235e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      /* Initialize state pointer */
      px = pState;
 800236e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 8002376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      i = numTaps;
 800237c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237e:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 8002380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002384:	1d1a      	adds	r2, r3, #4
 8002386:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800238a:	ed93 7a00 	vldr	s14, [r3]
 800238e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a0:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80023a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a8:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         i--;
 80023ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023ae:	3b01      	subs	r3, #1
 80023b0:	64bb      	str	r3, [r7, #72]	@ 0x48

      } while(i > 0u);
 80023b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e3      	bne.n	8002380 <arm_fir_f32+0xc70>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1d1a      	adds	r2, r3, #4
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80023c2:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 80023c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023c8:	3304      	adds	r3, #4
 80023ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      blkCnt--;
 80023ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d0:	3b01      	subs	r3, #1
 80023d2:	643b      	str	r3, [r7, #64]	@ 0x40
   while(blkCnt > 0u)
 80023d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1bb      	bne.n	8002352 <arm_fir_f32+0xc42>
   /* Processing is complete.  
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.  
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

   tapCnt = (numTaps - 1u) >> 2u;
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	3b01      	subs	r3, #1
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	647b      	str	r3, [r7, #68]	@ 0x44

   /* copy data */
   while(tapCnt > 0u)
 80023ea:	e032      	b.n	8002452 <arm_fir_f32+0xd42>
   {
      *pStateCurnt++ = *pState++;
 80023ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80023f0:	1d13      	adds	r3, r2, #4
 80023f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023fa:	1d19      	adds	r1, r3, #4
 80023fc:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8002404:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002408:	1d13      	adds	r3, r2, #4
 800240a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800240e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002412:	1d19      	adds	r1, r3, #4
 8002414:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 800241c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002420:	1d13      	adds	r3, r2, #4
 8002422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002426:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800242a:	1d19      	adds	r1, r3, #4
 800242c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8002434:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002438:	1d13      	adds	r3, r2, #4
 800243a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800243e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002442:	1d19      	adds	r1, r3, #4
 8002444:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 800244c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800244e:	3b01      	subs	r3, #1
 8002450:	647b      	str	r3, [r7, #68]	@ 0x44
   while(tapCnt > 0u)
 8002452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1c9      	bne.n	80023ec <arm_fir_f32+0xcdc>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 8002458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245a:	3b01      	subs	r3, #1
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	647b      	str	r3, [r7, #68]	@ 0x44

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 8002462:	e00e      	b.n	8002482 <arm_fir_f32+0xd72>
   {
      *pStateCurnt++ = *pState++;
 8002464:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002468:	1d13      	adds	r3, r2, #4
 800246a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800246e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002472:	1d19      	adds	r1, r3, #4
 8002474:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 800247c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800247e:	3b01      	subs	r3, #1
 8002480:	647b      	str	r3, [r7, #68]	@ 0x44
   while(tapCnt > 0u)
 8002482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ed      	bne.n	8002464 <arm_fir_f32+0xd54>
   }
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	379c      	adds	r7, #156	@ 0x9c
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	460b      	mov	r3, r1
 80024a4:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	897a      	ldrh	r2, [r7, #10]
 80024aa:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 80024b2:	897a      	ldrh	r2, [r7, #10]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4413      	add	r3, r2
 80024b8:	3b01      	subs	r3, #1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	461a      	mov	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f004 f91d 	bl	8006700 <memset>

  /* Assign state pointer */
  S->pState = pState;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	605a      	str	r2, [r3, #4]

}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <HAL_Init+0x40>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002514 <HAL_Init+0x40>)
 80024de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_Init+0x40>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <HAL_Init+0x40>)
 80024ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f0:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <HAL_Init+0x40>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a07      	ldr	r2, [pc, #28]	@ (8002514 <HAL_Init+0x40>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fc:	2003      	movs	r0, #3
 80024fe:	f000 fdd7 	bl	80030b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002502:	2000      	movs	r0, #0
 8002504:	f000 f808 	bl	8002518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002508:	f7fe fbfc 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023c00 	.word	0x40023c00

08002518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_InitTick+0x54>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_InitTick+0x58>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800252e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fdef 	bl	800311a <HAL_SYSTICK_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00e      	b.n	8002564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b0f      	cmp	r3, #15
 800254a:	d80a      	bhi.n	8002562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800254c:	2200      	movs	r2, #0
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f000 fdb7 	bl	80030c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002558:	4a06      	ldr	r2, [pc, #24]	@ (8002574 <HAL_InitTick+0x5c>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000020 	.word	0x20000020
 8002570:	20000028 	.word	0x20000028
 8002574:	20000024 	.word	0x20000024

08002578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_IncTick+0x20>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_IncTick+0x24>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	@ (800259c <HAL_IncTick+0x24>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000028 	.word	0x20000028
 800259c:	2000691c 	.word	0x2000691c

080025a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b03      	ldr	r3, [pc, #12]	@ (80025b4 <HAL_GetTick+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2000691c 	.word	0x2000691c

080025b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff ffee 	bl	80025a0 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d005      	beq.n	80025de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d2:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <HAL_Delay+0x44>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025de:	bf00      	nop
 80025e0:	f7ff ffde 	bl	80025a0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8f7      	bhi.n	80025e0 <HAL_Delay+0x28>
  {
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000028 	.word	0x20000028

08002600 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e033      	b.n	800267e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe fb98 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	d118      	bne.n	8002670 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002646:	f023 0302 	bic.w	r3, r3, #2
 800264a:	f043 0202 	orr.w	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fb5a 	bl	8002d0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	641a      	str	r2, [r3, #64]	@ 0x40
 800266e:	e001      	b.n	8002674 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Start_IT+0x1a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e0bd      	b.n	800281e <HAL_ADC_Start_IT+0x196>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d018      	beq.n	80026ea <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026c8:	4b58      	ldr	r3, [pc, #352]	@ (800282c <HAL_ADC_Start_IT+0x1a4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a58      	ldr	r2, [pc, #352]	@ (8002830 <HAL_ADC_Start_IT+0x1a8>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0c9a      	lsrs	r2, r3, #18
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026dc:	e002      	b.n	80026e4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	f040 8085 	bne.w	8002804 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002724:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002738:	d106      	bne.n	8002748 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	f023 0206 	bic.w	r2, r3, #6
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	645a      	str	r2, [r3, #68]	@ 0x44
 8002746:	e002      	b.n	800274e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002756:	4b37      	ldr	r3, [pc, #220]	@ (8002834 <HAL_ADC_Start_IT+0x1ac>)
 8002758:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002762:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002772:	f043 0320 	orr.w	r3, r3, #32
 8002776:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2b00      	cmp	r3, #0
 8002782:	d12a      	bne.n	80027da <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2b      	ldr	r2, [pc, #172]	@ (8002838 <HAL_ADC_Start_IT+0x1b0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d015      	beq.n	80027ba <HAL_ADC_Start_IT+0x132>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2a      	ldr	r2, [pc, #168]	@ (800283c <HAL_ADC_Start_IT+0x1b4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d105      	bne.n	80027a4 <HAL_ADC_Start_IT+0x11c>
 8002798:	4b26      	ldr	r3, [pc, #152]	@ (8002834 <HAL_ADC_Start_IT+0x1ac>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a25      	ldr	r2, [pc, #148]	@ (8002840 <HAL_ADC_Start_IT+0x1b8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d136      	bne.n	800281c <HAL_ADC_Start_IT+0x194>
 80027ae:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <HAL_ADC_Start_IT+0x1ac>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d130      	bne.n	800281c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d129      	bne.n	800281c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	e020      	b.n	800281c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a16      	ldr	r2, [pc, #88]	@ (8002838 <HAL_ADC_Start_IT+0x1b0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d11b      	bne.n	800281c <HAL_ADC_Start_IT+0x194>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d114      	bne.n	800281c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	e00b      	b.n	800281c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f043 0210 	orr.w	r2, r3, #16
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002814:	f043 0201 	orr.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000020 	.word	0x20000020
 8002830:	431bde83 	.word	0x431bde83
 8002834:	40012300 	.word	0x40012300
 8002838:	40012000 	.word	0x40012000
 800283c:	40012100 	.word	0x40012100
 8002840:	40012200 	.word	0x40012200

08002844 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d049      	beq.n	800290e <HAL_ADC_IRQHandler+0xca>
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d046      	beq.n	800290e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d12b      	bne.n	80028fe <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d127      	bne.n	80028fe <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d119      	bne.n	80028fe <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0220 	bic.w	r2, r2, #32
 80028d8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fd fdec 	bl	80004dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0212 	mvn.w	r2, #18
 800290c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d057      	beq.n	80029d4 <HAL_ADC_IRQHandler+0x190>
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d054      	beq.n	80029d4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d139      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002956:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002968:	2b00      	cmp	r3, #0
 800296a:	d12b      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d124      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d11d      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	d119      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800299e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fa9d 	bl	8002f04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f06f 020c 	mvn.w	r2, #12
 80029d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d017      	beq.n	8002a1a <HAL_ADC_IRQHandler+0x1d6>
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d014      	beq.n	8002a1a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10d      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f837 	bl	8002a7e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0201 	mvn.w	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a28:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d015      	beq.n	8002a5c <HAL_ADC_IRQHandler+0x218>
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d012      	beq.n	8002a5c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3a:	f043 0202 	orr.w	r2, r3, #2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f06f 0220 	mvn.w	r2, #32
 8002a4a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f820 	bl	8002a92 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f06f 0220 	mvn.w	r2, #32
 8002a5a:	601a      	str	r2, [r3, #0]
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1c>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e113      	b.n	8002cec <HAL_ADC_ConfigChannel+0x244>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	d925      	bls.n	8002b20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68d9      	ldr	r1, [r3, #12]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b1e      	subs	r3, #30
 8002aea:	2207      	movs	r2, #7
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43da      	mvns	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	400a      	ands	r2, r1
 8002af8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68d9      	ldr	r1, [r3, #12]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4403      	add	r3, r0
 8002b12:	3b1e      	subs	r3, #30
 8002b14:	409a      	lsls	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	e022      	b.n	8002b66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6919      	ldr	r1, [r3, #16]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	2207      	movs	r2, #7
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	400a      	ands	r2, r1
 8002b42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6919      	ldr	r1, [r3, #16]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4403      	add	r3, r0
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d824      	bhi.n	8002bb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3b05      	subs	r3, #5
 8002b80:	221f      	movs	r2, #31
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b05      	subs	r3, #5
 8002baa:	fa00 f203 	lsl.w	r2, r0, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bb6:	e04c      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d824      	bhi.n	8002c0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	3b23      	subs	r3, #35	@ 0x23
 8002bd2:	221f      	movs	r2, #31
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	400a      	ands	r2, r1
 8002be0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b23      	subs	r3, #35	@ 0x23
 8002bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c08:	e023      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	3b41      	subs	r3, #65	@ 0x41
 8002c1c:	221f      	movs	r2, #31
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	400a      	ands	r2, r1
 8002c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b41      	subs	r3, #65	@ 0x41
 8002c46:	fa00 f203 	lsl.w	r2, r0, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c52:	4b29      	ldr	r3, [pc, #164]	@ (8002cf8 <HAL_ADC_ConfigChannel+0x250>)
 8002c54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a28      	ldr	r2, [pc, #160]	@ (8002cfc <HAL_ADC_ConfigChannel+0x254>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d10f      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1d8>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b12      	cmp	r3, #18
 8002c66:	d10b      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <HAL_ADC_ConfigChannel+0x254>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d12b      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x23a>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d00 <HAL_ADC_ConfigChannel+0x258>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0x1f4>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b11      	cmp	r3, #17
 8002c9a:	d122      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a11      	ldr	r2, [pc, #68]	@ (8002d00 <HAL_ADC_ConfigChannel+0x258>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d111      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cbe:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <HAL_ADC_ConfigChannel+0x25c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a11      	ldr	r2, [pc, #68]	@ (8002d08 <HAL_ADC_ConfigChannel+0x260>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	0c9a      	lsrs	r2, r3, #18
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cd4:	e002      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f9      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40012300 	.word	0x40012300
 8002cfc:	40012000 	.word	0x40012000
 8002d00:	10000012 	.word	0x10000012
 8002d04:	20000020 	.word	0x20000020
 8002d08:	431bde83 	.word	0x431bde83

08002d0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d14:	4b79      	ldr	r3, [pc, #484]	@ (8002efc <ADC_Init+0x1f0>)
 8002d16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	021a      	lsls	r2, r3, #8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	4a58      	ldr	r2, [pc, #352]	@ (8002f00 <ADC_Init+0x1f4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d022      	beq.n	8002dea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002db2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6899      	ldr	r1, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6899      	ldr	r1, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	e00f      	b.n	8002e0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0202 	bic.w	r2, r2, #2
 8002e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6899      	ldr	r1, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7e1b      	ldrb	r3, [r3, #24]
 8002e24:	005a      	lsls	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01b      	beq.n	8002e70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	3b01      	subs	r3, #1
 8002e64:	035a      	lsls	r2, r3, #13
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	e007      	b.n	8002e80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	051a      	lsls	r2, r3, #20
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6899      	ldr	r1, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ec2:	025a      	lsls	r2, r3, #9
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6899      	ldr	r1, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	029a      	lsls	r2, r3, #10
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40012300 	.word	0x40012300
 8002f00:	0f000001 	.word	0x0f000001

08002f04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f28:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	@ (8002f5c <NVIC_SetPriorityGrouping+0x44>)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <NVIC_GetPriorityGrouping+0x18>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 0307 	and.w	r3, r3, #7
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	4907      	ldr	r1, [pc, #28]	@ (8002fac <NVIC_EnableIRQ+0x30>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2001      	movs	r0, #1
 8002f96:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	da0b      	bge.n	8002fdc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	490c      	ldr	r1, [pc, #48]	@ (8002ffc <NVIC_SetPriority+0x4c>)
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	3b04      	subs	r3, #4
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fda:	e009      	b.n	8002ff0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	4907      	ldr	r1, [pc, #28]	@ (8003000 <NVIC_SetPriority+0x50>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000ed00 	.word	0xe000ed00
 8003000:	e000e100 	.word	0xe000e100

08003004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	@ 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf28      	it	cs
 8003022:	2304      	movcs	r3, #4
 8003024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3304      	adds	r3, #4
 800302a:	2b06      	cmp	r3, #6
 800302c:	d902      	bls.n	8003034 <NVIC_EncodePriority+0x30>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3b03      	subs	r3, #3
 8003032:	e000      	b.n	8003036 <NVIC_EncodePriority+0x32>
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43d9      	mvns	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	4313      	orrs	r3, r2
         );
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	@ 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800307c:	d301      	bcc.n	8003082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307e:	2301      	movs	r3, #1
 8003080:	e00f      	b.n	80030a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003082:	4a0a      	ldr	r2, [pc, #40]	@ (80030ac <SysTick_Config+0x40>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308a:	210f      	movs	r1, #15
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	f7ff ff8e 	bl	8002fb0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003094:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <SysTick_Config+0x40>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309a:	4b04      	ldr	r3, [pc, #16]	@ (80030ac <SysTick_Config+0x40>)
 800309c:	2207      	movs	r2, #7
 800309e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	e000e010 	.word	0xe000e010

080030b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff2d 	bl	8002f18 <NVIC_SetPriorityGrouping>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030d8:	f7ff ff42 	bl	8002f60 <NVIC_GetPriorityGrouping>
 80030dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	6978      	ldr	r0, [r7, #20]
 80030e4:	f7ff ff8e 	bl	8003004 <NVIC_EncodePriority>
 80030e8:	4602      	mov	r2, r0
 80030ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff5d 	bl	8002fb0 <NVIC_SetPriority>
}
 80030f6:	bf00      	nop
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff35 	bl	8002f7c <NVIC_EnableIRQ>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ffa2 	bl	800306c <SysTick_Config>
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e014      	b.n	800316e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	791b      	ldrb	r3, [r3, #4]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fd fe41 	bl	8000ddc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	795b      	ldrb	r3, [r3, #5]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_DAC_Start+0x16>
 8003188:	2302      	movs	r3, #2
 800318a:	e040      	b.n	800320e <HAL_DAC_Start+0x98>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2201      	movs	r2, #1
 80031a6:	409a      	lsls	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10f      	bne.n	80031d6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80031c0:	2b3c      	cmp	r3, #60	@ 0x3c
 80031c2:	d11d      	bne.n	8003200 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	605a      	str	r2, [r3, #4]
 80031d4:	e014      	b.n	8003200 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	213c      	movs	r1, #60	@ 0x3c
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d107      	bne.n	8003200 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0202 	orr.w	r2, r2, #2
 80031fe:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800321a:	b480      	push	{r7}
 800321c:	b087      	sub	sp, #28
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3308      	adds	r3, #8
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	e004      	b.n	800324e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3314      	adds	r3, #20
 800324c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	461a      	mov	r2, r3
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	795b      	ldrb	r3, [r3, #5]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_DAC_ConfigChannel+0x18>
 8003278:	2302      	movs	r3, #2
 800327a:	e03c      	b.n	80032f6 <HAL_DAC_ConfigChannel+0x92>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2202      	movs	r2, #2
 8003286:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4013      	ands	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	22c0      	movs	r2, #192	@ 0xc0
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	400a      	ands	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003310:	f7ff f946 	bl	80025a0 <HAL_GetTick>
 8003314:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d008      	beq.n	8003334 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2280      	movs	r2, #128	@ 0x80
 8003326:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e052      	b.n	80033da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0216 	bic.w	r2, r2, #22
 8003342:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003352:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d103      	bne.n	8003364 <HAL_DMA_Abort+0x62>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0208 	bic.w	r2, r2, #8
 8003372:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003384:	e013      	b.n	80033ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003386:	f7ff f90b 	bl	80025a0 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b05      	cmp	r3, #5
 8003392:	d90c      	bls.n	80033ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2203      	movs	r2, #3
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e015      	b.n	80033da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e4      	bne.n	8003386 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c0:	223f      	movs	r2, #63	@ 0x3f
 80033c2:	409a      	lsls	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d004      	beq.n	8003400 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e00c      	b.n	800341a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2205      	movs	r2, #5
 8003404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06c      	b.n	8003514 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003440:	2b00      	cmp	r3, #0
 8003442:	d106      	bne.n	8003452 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2223      	movs	r2, #35	@ 0x23
 8003448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fd fd09 	bl	8000e64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	4b31      	ldr	r3, [pc, #196]	@ (800351c <HAL_ETH_Init+0xf4>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	4a30      	ldr	r2, [pc, #192]	@ (800351c <HAL_ETH_Init+0xf4>)
 800345c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003460:	6453      	str	r3, [r2, #68]	@ 0x44
 8003462:	4b2e      	ldr	r3, [pc, #184]	@ (800351c <HAL_ETH_Init+0xf4>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800346e:	4b2c      	ldr	r3, [pc, #176]	@ (8003520 <HAL_ETH_Init+0xf8>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4a2b      	ldr	r2, [pc, #172]	@ (8003520 <HAL_ETH_Init+0xf8>)
 8003474:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003478:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800347a:	4b29      	ldr	r3, [pc, #164]	@ (8003520 <HAL_ETH_Init+0xf8>)
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	4927      	ldr	r1, [pc, #156]	@ (8003520 <HAL_ETH_Init+0xf8>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003488:	4b25      	ldr	r3, [pc, #148]	@ (8003520 <HAL_ETH_Init+0xf8>)
 800348a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a4:	f7ff f87c 	bl	80025a0 <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034aa:	e011      	b.n	80034d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80034ac:	f7ff f878 	bl	80025a0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80034ba:	d909      	bls.n	80034d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2204      	movs	r2, #4
 80034c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	22e0      	movs	r2, #224	@ 0xe0
 80034c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e021      	b.n	8003514 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e4      	bne.n	80034ac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f958 	bl	8003798 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f9ff 	bl	80038ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa55 	bl	800399e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	461a      	mov	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f9bd 	bl	800387c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2210      	movs	r2, #16
 800350e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	40013800 	.word	0x40013800

08003524 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4b51      	ldr	r3, [pc, #324]	@ (8003680 <ETH_SetMACConfig+0x15c>)
 800353a:	4013      	ands	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	7c1b      	ldrb	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <ETH_SetMACConfig+0x28>
 8003546:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800354a:	e000      	b.n	800354e <ETH_SetMACConfig+0x2a>
 800354c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	7c5b      	ldrb	r3, [r3, #17]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <ETH_SetMACConfig+0x38>
 8003556:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800355a:	e000      	b.n	800355e <ETH_SetMACConfig+0x3a>
 800355c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800355e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003564:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	7fdb      	ldrb	r3, [r3, #31]
 800356a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800356c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003572:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	7f92      	ldrb	r2, [r2, #30]
 8003578:	2a00      	cmp	r2, #0
 800357a:	d102      	bne.n	8003582 <ETH_SetMACConfig+0x5e>
 800357c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003580:	e000      	b.n	8003584 <ETH_SetMACConfig+0x60>
 8003582:	2200      	movs	r2, #0
                        macconf->Speed |
 8003584:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	7f1b      	ldrb	r3, [r3, #28]
 800358a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800358c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003592:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	791b      	ldrb	r3, [r3, #4]
 8003598:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800359a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80035a2:	2a00      	cmp	r2, #0
 80035a4:	d102      	bne.n	80035ac <ETH_SetMACConfig+0x88>
 80035a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035aa:	e000      	b.n	80035ae <ETH_SetMACConfig+0x8a>
 80035ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80035ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	7bdb      	ldrb	r3, [r3, #15]
 80035b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035c6:	4313      	orrs	r3, r2
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035de:	2001      	movs	r0, #1
 80035e0:	f7fe ffea 	bl	80025b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80035fa:	4013      	ands	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003602:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800360a:	2a00      	cmp	r2, #0
 800360c:	d101      	bne.n	8003612 <ETH_SetMACConfig+0xee>
 800360e:	2280      	movs	r2, #128	@ 0x80
 8003610:	e000      	b.n	8003614 <ETH_SetMACConfig+0xf0>
 8003612:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003614:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800361a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003622:	2a01      	cmp	r2, #1
 8003624:	d101      	bne.n	800362a <ETH_SetMACConfig+0x106>
 8003626:	2208      	movs	r2, #8
 8003628:	e000      	b.n	800362c <ETH_SetMACConfig+0x108>
 800362a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800362c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003634:	2a01      	cmp	r2, #1
 8003636:	d101      	bne.n	800363c <ETH_SetMACConfig+0x118>
 8003638:	2204      	movs	r2, #4
 800363a:	e000      	b.n	800363e <ETH_SetMACConfig+0x11a>
 800363c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800363e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003646:	2a01      	cmp	r2, #1
 8003648:	d101      	bne.n	800364e <ETH_SetMACConfig+0x12a>
 800364a:	2202      	movs	r2, #2
 800364c:	e000      	b.n	8003650 <ETH_SetMACConfig+0x12c>
 800364e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003650:	4313      	orrs	r3, r2
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003668:	2001      	movs	r0, #1
 800366a:	f7fe ffa5 	bl	80025b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	619a      	str	r2, [r3, #24]
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	ff20810f 	.word	0xff20810f

08003684 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4b3d      	ldr	r3, [pc, #244]	@ (8003794 <ETH_SetDMAConfig+0x110>)
 800369e:	4013      	ands	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	7b1b      	ldrb	r3, [r3, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <ETH_SetDMAConfig+0x2c>
 80036aa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80036ae:	e000      	b.n	80036b2 <ETH_SetDMAConfig+0x2e>
 80036b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	7b5b      	ldrb	r3, [r3, #13]
 80036b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	7f52      	ldrb	r2, [r2, #29]
 80036be:	2a00      	cmp	r2, #0
 80036c0:	d102      	bne.n	80036c8 <ETH_SetDMAConfig+0x44>
 80036c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80036c6:	e000      	b.n	80036ca <ETH_SetDMAConfig+0x46>
 80036c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	7b9b      	ldrb	r3, [r3, #14]
 80036d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	7f1b      	ldrb	r3, [r3, #28]
 80036de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80036e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	7f9b      	ldrb	r3, [r3, #30]
 80036e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036f8:	4313      	orrs	r3, r2
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003708:	461a      	mov	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800371a:	2001      	movs	r0, #1
 800371c:	f7fe ff4c 	bl	80025b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003728:	461a      	mov	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	791b      	ldrb	r3, [r3, #4]
 8003732:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003738:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800373e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003744:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800374c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800374e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003756:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800375c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003766:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800376a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003778:	2001      	movs	r0, #1
 800377a:	f7fe ff1d 	bl	80025b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6013      	str	r3, [r2, #0]
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	f8de3f23 	.word	0xf8de3f23

08003798 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b0a6      	sub	sp, #152	@ 0x98
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80037ac:	2300      	movs	r3, #0
 80037ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80037d4:	2300      	movs	r3, #0
 80037d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80037fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003800:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800380c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff fe86 	bl	8003524 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003818:	2301      	movs	r3, #1
 800381a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800381c:	2301      	movs	r3, #1
 800381e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003826:	2301      	movs	r3, #1
 8003828:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800382e:	2300      	movs	r3, #0
 8003830:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003834:	2300      	movs	r3, #0
 8003836:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800383a:	2300      	movs	r3, #0
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003844:	2301      	movs	r3, #1
 8003846:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003848:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800384c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800384e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003852:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003858:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003860:	2300      	movs	r3, #0
 8003862:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003864:	2300      	movs	r3, #0
 8003866:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003868:	f107 0308 	add.w	r3, r7, #8
 800386c:	4619      	mov	r1, r3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff ff08 	bl	8003684 <ETH_SetDMAConfig>
}
 8003874:	bf00      	nop
 8003876:	3798      	adds	r7, #152	@ 0x98
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3305      	adds	r3, #5
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	3204      	adds	r2, #4
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	4b11      	ldr	r3, [pc, #68]	@ (80038e4 <ETH_MACAddressConfig+0x68>)
 800389e:	4413      	add	r3, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3303      	adds	r3, #3
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	061a      	lsls	r2, r3, #24
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3302      	adds	r3, #2
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3301      	adds	r3, #1
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	4313      	orrs	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	7812      	ldrb	r2, [r2, #0]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <ETH_MACAddressConfig+0x6c>)
 80038ce:	4413      	add	r3, r2
 80038d0:	461a      	mov	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6013      	str	r3, [r2, #0]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40028040 	.word	0x40028040
 80038e8:	40028044 	.word	0x40028044

080038ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e03e      	b.n	8003978 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68d9      	ldr	r1, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	440b      	add	r3, r1
 800390a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2200      	movs	r2, #0
 8003916:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2200      	movs	r2, #0
 8003922:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	3206      	adds	r2, #6
 800392c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d80c      	bhi.n	800395c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68d9      	ldr	r1, [r3, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	440b      	add	r3, r1
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	e004      	b.n	8003966 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3301      	adds	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d9bd      	bls.n	80038fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003990:	611a      	str	r2, [r3, #16]
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800399e:	b480      	push	{r7}
 80039a0:	b085      	sub	sp, #20
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e046      	b.n	8003a3a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6919      	ldr	r1, [r3, #16]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	440b      	add	r3, r1
 80039bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2200      	movs	r2, #0
 80039c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2200      	movs	r2, #0
 80039ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2200      	movs	r2, #0
 80039d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2200      	movs	r2, #0
 80039da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80039e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80039f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	3212      	adds	r2, #18
 8003a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d80c      	bhi.n	8003a2a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6919      	ldr	r1, [r3, #16]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	440b      	add	r3, r1
 8003a22:	461a      	mov	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	e004      	b.n	8003a34 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3301      	adds	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d9b5      	bls.n	80039ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a6a:	60da      	str	r2, [r3, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	@ 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	e177      	b.n	8003d84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a94:	2201      	movs	r2, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	f040 8166 	bne.w	8003d7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d005      	beq.n	8003aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d130      	bne.n	8003b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b00:	2201      	movs	r2, #1
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 0201 	and.w	r2, r3, #1
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d017      	beq.n	8003b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2203      	movs	r2, #3
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d123      	bne.n	8003bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	08da      	lsrs	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3208      	adds	r2, #8
 8003b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	220f      	movs	r2, #15
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	08da      	lsrs	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3208      	adds	r2, #8
 8003bb6:	69b9      	ldr	r1, [r7, #24]
 8003bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0203 	and.w	r2, r3, #3
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80c0 	beq.w	8003d7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	4b66      	ldr	r3, [pc, #408]	@ (8003d9c <HAL_GPIO_Init+0x324>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	4a65      	ldr	r2, [pc, #404]	@ (8003d9c <HAL_GPIO_Init+0x324>)
 8003c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c0e:	4b63      	ldr	r3, [pc, #396]	@ (8003d9c <HAL_GPIO_Init+0x324>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c1a:	4a61      	ldr	r2, [pc, #388]	@ (8003da0 <HAL_GPIO_Init+0x328>)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	3302      	adds	r3, #2
 8003c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	220f      	movs	r2, #15
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a58      	ldr	r2, [pc, #352]	@ (8003da4 <HAL_GPIO_Init+0x32c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d037      	beq.n	8003cb6 <HAL_GPIO_Init+0x23e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a57      	ldr	r2, [pc, #348]	@ (8003da8 <HAL_GPIO_Init+0x330>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d031      	beq.n	8003cb2 <HAL_GPIO_Init+0x23a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a56      	ldr	r2, [pc, #344]	@ (8003dac <HAL_GPIO_Init+0x334>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d02b      	beq.n	8003cae <HAL_GPIO_Init+0x236>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a55      	ldr	r2, [pc, #340]	@ (8003db0 <HAL_GPIO_Init+0x338>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d025      	beq.n	8003caa <HAL_GPIO_Init+0x232>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a54      	ldr	r2, [pc, #336]	@ (8003db4 <HAL_GPIO_Init+0x33c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01f      	beq.n	8003ca6 <HAL_GPIO_Init+0x22e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a53      	ldr	r2, [pc, #332]	@ (8003db8 <HAL_GPIO_Init+0x340>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d019      	beq.n	8003ca2 <HAL_GPIO_Init+0x22a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a52      	ldr	r2, [pc, #328]	@ (8003dbc <HAL_GPIO_Init+0x344>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <HAL_GPIO_Init+0x226>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a51      	ldr	r2, [pc, #324]	@ (8003dc0 <HAL_GPIO_Init+0x348>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00d      	beq.n	8003c9a <HAL_GPIO_Init+0x222>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a50      	ldr	r2, [pc, #320]	@ (8003dc4 <HAL_GPIO_Init+0x34c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <HAL_GPIO_Init+0x21e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a4f      	ldr	r2, [pc, #316]	@ (8003dc8 <HAL_GPIO_Init+0x350>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_GPIO_Init+0x21a>
 8003c8e:	2309      	movs	r3, #9
 8003c90:	e012      	b.n	8003cb8 <HAL_GPIO_Init+0x240>
 8003c92:	230a      	movs	r3, #10
 8003c94:	e010      	b.n	8003cb8 <HAL_GPIO_Init+0x240>
 8003c96:	2308      	movs	r3, #8
 8003c98:	e00e      	b.n	8003cb8 <HAL_GPIO_Init+0x240>
 8003c9a:	2307      	movs	r3, #7
 8003c9c:	e00c      	b.n	8003cb8 <HAL_GPIO_Init+0x240>
 8003c9e:	2306      	movs	r3, #6
 8003ca0:	e00a      	b.n	8003cb8 <HAL_GPIO_Init+0x240>
 8003ca2:	2305      	movs	r3, #5
 8003ca4:	e008      	b.n	8003cb8 <HAL_GPIO_Init+0x240>
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	e006      	b.n	8003cb8 <HAL_GPIO_Init+0x240>
 8003caa:	2303      	movs	r3, #3
 8003cac:	e004      	b.n	8003cb8 <HAL_GPIO_Init+0x240>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e002      	b.n	8003cb8 <HAL_GPIO_Init+0x240>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <HAL_GPIO_Init+0x240>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	f002 0203 	and.w	r2, r2, #3
 8003cbe:	0092      	lsls	r2, r2, #2
 8003cc0:	4093      	lsls	r3, r2
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cc8:	4935      	ldr	r1, [pc, #212]	@ (8003da0 <HAL_GPIO_Init+0x328>)
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	089b      	lsrs	r3, r3, #2
 8003cce:	3302      	adds	r3, #2
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8003dcc <HAL_GPIO_Init+0x354>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cfa:	4a34      	ldr	r2, [pc, #208]	@ (8003dcc <HAL_GPIO_Init+0x354>)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d00:	4b32      	ldr	r3, [pc, #200]	@ (8003dcc <HAL_GPIO_Init+0x354>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d24:	4a29      	ldr	r2, [pc, #164]	@ (8003dcc <HAL_GPIO_Init+0x354>)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d2a:	4b28      	ldr	r3, [pc, #160]	@ (8003dcc <HAL_GPIO_Init+0x354>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dcc <HAL_GPIO_Init+0x354>)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d54:	4b1d      	ldr	r3, [pc, #116]	@ (8003dcc <HAL_GPIO_Init+0x354>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d78:	4a14      	ldr	r2, [pc, #80]	@ (8003dcc <HAL_GPIO_Init+0x354>)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3301      	adds	r3, #1
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b0f      	cmp	r3, #15
 8003d88:	f67f ae84 	bls.w	8003a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	3724      	adds	r7, #36	@ 0x24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40013800 	.word	0x40013800
 8003da4:	40020000 	.word	0x40020000
 8003da8:	40020400 	.word	0x40020400
 8003dac:	40020800 	.word	0x40020800
 8003db0:	40020c00 	.word	0x40020c00
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40021400 	.word	0x40021400
 8003dbc:	40021800 	.word	0x40021800
 8003dc0:	40021c00 	.word	0x40021c00
 8003dc4:	40022000 	.word	0x40022000
 8003dc8:	40022400 	.word	0x40022400
 8003dcc:	40013c00 	.word	0x40013c00

08003dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de0:	787b      	ldrb	r3, [r7, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dec:	e003      	b.n	8003df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dee:	887b      	ldrh	r3, [r7, #2]
 8003df0:	041a      	lsls	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	619a      	str	r2, [r3, #24]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e14:	887a      	ldrh	r2, [r7, #2]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	041a      	lsls	r2, r3, #16
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	400b      	ands	r3, r1
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	619a      	str	r2, [r3, #24]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e38:	b08f      	sub	sp, #60	@ 0x3c
 8003e3a:	af0a      	add	r7, sp, #40	@ 0x28
 8003e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e10f      	b.n	8004068 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd f92c 	bl	80010c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f002 f999 	bl	80061be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	687e      	ldr	r6, [r7, #4]
 8003e94:	466d      	mov	r5, sp
 8003e96:	f106 0410 	add.w	r4, r6, #16
 8003e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ea2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ea6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eaa:	1d33      	adds	r3, r6, #4
 8003eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eae:	6838      	ldr	r0, [r7, #0]
 8003eb0:	f002 f924 	bl	80060fc <USB_CoreInit>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0d0      	b.n	8004068 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 f987 	bl	80061e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
 8003ed6:	e04a      	b.n	8003f6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	333d      	adds	r3, #61	@ 0x3d
 8003ee8:	2201      	movs	r2, #1
 8003eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003eec:	7bfa      	ldrb	r2, [r7, #15]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	333c      	adds	r3, #60	@ 0x3c
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	b298      	uxth	r0, r3
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	3344      	adds	r3, #68	@ 0x44
 8003f14:	4602      	mov	r2, r0
 8003f16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	3340      	adds	r3, #64	@ 0x40
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	3348      	adds	r3, #72	@ 0x48
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f40:	7bfa      	ldrb	r2, [r7, #15]
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	334c      	adds	r3, #76	@ 0x4c
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f54:	7bfa      	ldrb	r2, [r7, #15]
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	3354      	adds	r3, #84	@ 0x54
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d3af      	bcc.n	8003ed8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]
 8003f7c:	e044      	b.n	8004008 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f7e:	7bfa      	ldrb	r2, [r7, #15]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003fa6:	7bfa      	ldrb	r2, [r7, #15]
 8003fa8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003faa:	7bfa      	ldrb	r2, [r7, #15]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fec:	7bfa      	ldrb	r2, [r7, #15]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	3301      	adds	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	7bfa      	ldrb	r2, [r7, #15]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d3b5      	bcc.n	8003f7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	687e      	ldr	r6, [r7, #4]
 800401a:	466d      	mov	r5, sp
 800401c:	f106 0410 	add.w	r4, r6, #16
 8004020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004028:	e894 0003 	ldmia.w	r4, {r0, r1}
 800402c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004030:	1d33      	adds	r3, r6, #4
 8004032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004034:	6838      	ldr	r0, [r7, #0]
 8004036:	f002 f91f 	bl	8006278 <USB_DevInit>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e00d      	b.n	8004068 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f002 faea 	bl	800663a <USB_DevDisconnect>

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e267      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d075      	beq.n	800417a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800408e:	4b88      	ldr	r3, [pc, #544]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b04      	cmp	r3, #4
 8004098:	d00c      	beq.n	80040b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800409a:	4b85      	ldr	r3, [pc, #532]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d112      	bne.n	80040cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a6:	4b82      	ldr	r3, [pc, #520]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040b2:	d10b      	bne.n	80040cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	4b7e      	ldr	r3, [pc, #504]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d05b      	beq.n	8004178 <HAL_RCC_OscConfig+0x108>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d157      	bne.n	8004178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e242      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d4:	d106      	bne.n	80040e4 <HAL_RCC_OscConfig+0x74>
 80040d6:	4b76      	ldr	r3, [pc, #472]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a75      	ldr	r2, [pc, #468]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e01d      	b.n	8004120 <HAL_RCC_OscConfig+0xb0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040ec:	d10c      	bne.n	8004108 <HAL_RCC_OscConfig+0x98>
 80040ee:	4b70      	ldr	r3, [pc, #448]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6f      	ldr	r2, [pc, #444]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b6d      	ldr	r3, [pc, #436]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a6c      	ldr	r2, [pc, #432]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e00b      	b.n	8004120 <HAL_RCC_OscConfig+0xb0>
 8004108:	4b69      	ldr	r3, [pc, #420]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a68      	ldr	r2, [pc, #416]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 800410e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b66      	ldr	r3, [pc, #408]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a65      	ldr	r2, [pc, #404]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 800411a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800411e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d013      	beq.n	8004150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fe fa3a 	bl	80025a0 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7fe fa36 	bl	80025a0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	@ 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e207      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	4b5b      	ldr	r3, [pc, #364]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0xc0>
 800414e:	e014      	b.n	800417a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe fa26 	bl	80025a0 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004158:	f7fe fa22 	bl	80025a0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	@ 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e1f3      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416a:	4b51      	ldr	r3, [pc, #324]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0xe8>
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d063      	beq.n	800424e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004186:	4b4a      	ldr	r3, [pc, #296]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004192:	4b47      	ldr	r3, [pc, #284]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800419a:	2b08      	cmp	r3, #8
 800419c:	d11c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419e:	4b44      	ldr	r3, [pc, #272]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d116      	bne.n	80041d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041aa:	4b41      	ldr	r3, [pc, #260]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_RCC_OscConfig+0x152>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e1c7      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c2:	4b3b      	ldr	r3, [pc, #236]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4937      	ldr	r1, [pc, #220]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	e03a      	b.n	800424e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d020      	beq.n	8004222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e0:	4b34      	ldr	r3, [pc, #208]	@ (80042b4 <HAL_RCC_OscConfig+0x244>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fe f9db 	bl	80025a0 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ee:	f7fe f9d7 	bl	80025a0 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1a8      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004200:	4b2b      	ldr	r3, [pc, #172]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420c:	4b28      	ldr	r3, [pc, #160]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4925      	ldr	r1, [pc, #148]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]
 8004220:	e015      	b.n	800424e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004222:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <HAL_RCC_OscConfig+0x244>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fe f9ba 	bl	80025a0 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004230:	f7fe f9b6 	bl	80025a0 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e187      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004242:	4b1b      	ldr	r3, [pc, #108]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d036      	beq.n	80042c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d016      	beq.n	8004290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004262:	4b15      	ldr	r3, [pc, #84]	@ (80042b8 <HAL_RCC_OscConfig+0x248>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7fe f99a 	bl	80025a0 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004270:	f7fe f996 	bl	80025a0 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e167      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004282:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <HAL_RCC_OscConfig+0x240>)
 8004284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x200>
 800428e:	e01b      	b.n	80042c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_RCC_OscConfig+0x248>)
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004296:	f7fe f983 	bl	80025a0 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429c:	e00e      	b.n	80042bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429e:	f7fe f97f 	bl	80025a0 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d907      	bls.n	80042bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e150      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
 80042b0:	40023800 	.word	0x40023800
 80042b4:	42470000 	.word	0x42470000
 80042b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042bc:	4b88      	ldr	r3, [pc, #544]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 80042be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ea      	bne.n	800429e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8097 	beq.w	8004404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	4b81      	ldr	r3, [pc, #516]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	4b7d      	ldr	r3, [pc, #500]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	4a7c      	ldr	r2, [pc, #496]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042f6:	4b7a      	ldr	r3, [pc, #488]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004306:	4b77      	ldr	r3, [pc, #476]	@ (80044e4 <HAL_RCC_OscConfig+0x474>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d118      	bne.n	8004344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004312:	4b74      	ldr	r3, [pc, #464]	@ (80044e4 <HAL_RCC_OscConfig+0x474>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a73      	ldr	r2, [pc, #460]	@ (80044e4 <HAL_RCC_OscConfig+0x474>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800431c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431e:	f7fe f93f 	bl	80025a0 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fe f93b 	bl	80025a0 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e10c      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	4b6a      	ldr	r3, [pc, #424]	@ (80044e4 <HAL_RCC_OscConfig+0x474>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x2ea>
 800434c:	4b64      	ldr	r3, [pc, #400]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004350:	4a63      	ldr	r2, [pc, #396]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	6713      	str	r3, [r2, #112]	@ 0x70
 8004358:	e01c      	b.n	8004394 <HAL_RCC_OscConfig+0x324>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b05      	cmp	r3, #5
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x30c>
 8004362:	4b5f      	ldr	r3, [pc, #380]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	4a5e      	ldr	r2, [pc, #376]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004368:	f043 0304 	orr.w	r3, r3, #4
 800436c:	6713      	str	r3, [r2, #112]	@ 0x70
 800436e:	4b5c      	ldr	r3, [pc, #368]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	4a5b      	ldr	r2, [pc, #364]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	6713      	str	r3, [r2, #112]	@ 0x70
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0x324>
 800437c:	4b58      	ldr	r3, [pc, #352]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004380:	4a57      	ldr	r2, [pc, #348]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	@ 0x70
 8004388:	4b55      	ldr	r3, [pc, #340]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	4a54      	ldr	r2, [pc, #336]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 800438e:	f023 0304 	bic.w	r3, r3, #4
 8004392:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d015      	beq.n	80043c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fe f900 	bl	80025a0 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fe f8fc 	bl	80025a0 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e0cb      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ba:	4b49      	ldr	r3, [pc, #292]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0ee      	beq.n	80043a4 <HAL_RCC_OscConfig+0x334>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c8:	f7fe f8ea 	bl	80025a0 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fe f8e6 	bl	80025a0 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e0b5      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e6:	4b3e      	ldr	r3, [pc, #248]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ee      	bne.n	80043d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d105      	bne.n	8004404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f8:	4b39      	ldr	r3, [pc, #228]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	4a38      	ldr	r2, [pc, #224]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 80043fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004402:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80a1 	beq.w	8004550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800440e:	4b34      	ldr	r3, [pc, #208]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b08      	cmp	r3, #8
 8004418:	d05c      	beq.n	80044d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d141      	bne.n	80044a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004422:	4b31      	ldr	r3, [pc, #196]	@ (80044e8 <HAL_RCC_OscConfig+0x478>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fe f8ba 	bl	80025a0 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004430:	f7fe f8b6 	bl	80025a0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e087      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	4b27      	ldr	r3, [pc, #156]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	019b      	lsls	r3, r3, #6
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	3b01      	subs	r3, #1
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	061b      	lsls	r3, r3, #24
 8004472:	491b      	ldr	r1, [pc, #108]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004478:	4b1b      	ldr	r3, [pc, #108]	@ (80044e8 <HAL_RCC_OscConfig+0x478>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fe f88f 	bl	80025a0 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004486:	f7fe f88b 	bl	80025a0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e05c      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004498:	4b11      	ldr	r3, [pc, #68]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x416>
 80044a4:	e054      	b.n	8004550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <HAL_RCC_OscConfig+0x478>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fe f878 	bl	80025a0 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fe f874 	bl	80025a0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e045      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <HAL_RCC_OscConfig+0x470>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x444>
 80044d2:	e03d      	b.n	8004550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d107      	bne.n	80044ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e038      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40007000 	.word	0x40007000
 80044e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044ec:	4b1b      	ldr	r3, [pc, #108]	@ (800455c <HAL_RCC_OscConfig+0x4ec>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d028      	beq.n	800454c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d121      	bne.n	800454c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d11a      	bne.n	800454c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004524:	4293      	cmp	r3, r2
 8004526:	d111      	bne.n	800454c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	3b01      	subs	r3, #1
 8004536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800

08004560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0cc      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004574:	4b68      	ldr	r3, [pc, #416]	@ (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d90c      	bls.n	800459c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b65      	ldr	r3, [pc, #404]	@ (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b63      	ldr	r3, [pc, #396]	@ (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0b8      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d020      	beq.n	80045ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b4:	4b59      	ldr	r3, [pc, #356]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4a58      	ldr	r2, [pc, #352]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045cc:	4b53      	ldr	r3, [pc, #332]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4a52      	ldr	r2, [pc, #328]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d8:	4b50      	ldr	r3, [pc, #320]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	494d      	ldr	r1, [pc, #308]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d044      	beq.n	8004680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fe:	4b47      	ldr	r3, [pc, #284]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d119      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e07f      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d003      	beq.n	800461e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461a:	2b03      	cmp	r3, #3
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	4b3f      	ldr	r3, [pc, #252]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e06f      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462e:	4b3b      	ldr	r3, [pc, #236]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e067      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463e:	4b37      	ldr	r3, [pc, #220]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4934      	ldr	r1, [pc, #208]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004650:	f7fd ffa6 	bl	80025a0 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004656:	e00a      	b.n	800466e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004658:	f7fd ffa2 	bl	80025a0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e04f      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	4b2b      	ldr	r3, [pc, #172]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 020c 	and.w	r2, r3, #12
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	429a      	cmp	r2, r3
 800467e:	d1eb      	bne.n	8004658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004680:	4b25      	ldr	r3, [pc, #148]	@ (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d20c      	bcs.n	80046a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b22      	ldr	r3, [pc, #136]	@ (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	4b20      	ldr	r3, [pc, #128]	@ (8004718 <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e032      	b.n	800470e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b4:	4b19      	ldr	r3, [pc, #100]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4916      	ldr	r1, [pc, #88]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046d2:	4b12      	ldr	r3, [pc, #72]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	490e      	ldr	r1, [pc, #56]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046e6:	f000 f821 	bl	800472c <HAL_RCC_GetSysClockFreq>
 80046ea:	4602      	mov	r2, r0
 80046ec:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	490a      	ldr	r1, [pc, #40]	@ (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 80046f8:	5ccb      	ldrb	r3, [r1, r3]
 80046fa:	fa22 f303 	lsr.w	r3, r2, r3
 80046fe:	4a09      	ldr	r2, [pc, #36]	@ (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004702:	4b09      	ldr	r3, [pc, #36]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd ff06 	bl	8002518 <HAL_InitTick>

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023c00 	.word	0x40023c00
 800471c:	40023800 	.word	0x40023800
 8004720:	08006798 	.word	0x08006798
 8004724:	20000020 	.word	0x20000020
 8004728:	20000024 	.word	0x20000024

0800472c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800472c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004730:	b094      	sub	sp, #80	@ 0x50
 8004732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	647b      	str	r3, [r7, #68]	@ 0x44
 8004738:	2300      	movs	r3, #0
 800473a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800473c:	2300      	movs	r3, #0
 800473e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004744:	4b79      	ldr	r3, [pc, #484]	@ (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b08      	cmp	r3, #8
 800474e:	d00d      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x40>
 8004750:	2b08      	cmp	r3, #8
 8004752:	f200 80e1 	bhi.w	8004918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x34>
 800475a:	2b04      	cmp	r3, #4
 800475c:	d003      	beq.n	8004766 <HAL_RCC_GetSysClockFreq+0x3a>
 800475e:	e0db      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004760:	4b73      	ldr	r3, [pc, #460]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x204>)
 8004762:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004764:	e0db      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004766:	4b73      	ldr	r3, [pc, #460]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x208>)
 8004768:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800476a:	e0d8      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800476c:	4b6f      	ldr	r3, [pc, #444]	@ (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004774:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004776:	4b6d      	ldr	r3, [pc, #436]	@ (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d063      	beq.n	800484a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004782:	4b6a      	ldr	r3, [pc, #424]	@ (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	099b      	lsrs	r3, r3, #6
 8004788:	2200      	movs	r2, #0
 800478a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800478c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004794:	633b      	str	r3, [r7, #48]	@ 0x30
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	@ 0x34
 800479a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800479e:	4622      	mov	r2, r4
 80047a0:	462b      	mov	r3, r5
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f04f 0100 	mov.w	r1, #0
 80047aa:	0159      	lsls	r1, r3, #5
 80047ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b0:	0150      	lsls	r0, r2, #5
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4621      	mov	r1, r4
 80047b8:	1a51      	subs	r1, r2, r1
 80047ba:	6139      	str	r1, [r7, #16]
 80047bc:	4629      	mov	r1, r5
 80047be:	eb63 0301 	sbc.w	r3, r3, r1
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d0:	4659      	mov	r1, fp
 80047d2:	018b      	lsls	r3, r1, #6
 80047d4:	4651      	mov	r1, sl
 80047d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047da:	4651      	mov	r1, sl
 80047dc:	018a      	lsls	r2, r1, #6
 80047de:	4651      	mov	r1, sl
 80047e0:	ebb2 0801 	subs.w	r8, r2, r1
 80047e4:	4659      	mov	r1, fp
 80047e6:	eb63 0901 	sbc.w	r9, r3, r1
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fe:	4690      	mov	r8, r2
 8004800:	4699      	mov	r9, r3
 8004802:	4623      	mov	r3, r4
 8004804:	eb18 0303 	adds.w	r3, r8, r3
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	462b      	mov	r3, r5
 800480c:	eb49 0303 	adc.w	r3, r9, r3
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800481e:	4629      	mov	r1, r5
 8004820:	024b      	lsls	r3, r1, #9
 8004822:	4621      	mov	r1, r4
 8004824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004828:	4621      	mov	r1, r4
 800482a:	024a      	lsls	r2, r1, #9
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004832:	2200      	movs	r2, #0
 8004834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004836:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800483c:	f7fb fcd6 	bl	80001ec <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004848:	e058      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484a:	4b38      	ldr	r3, [pc, #224]	@ (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	099b      	lsrs	r3, r3, #6
 8004850:	2200      	movs	r2, #0
 8004852:	4618      	mov	r0, r3
 8004854:	4611      	mov	r1, r2
 8004856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800485a:	623b      	str	r3, [r7, #32]
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004864:	4642      	mov	r2, r8
 8004866:	464b      	mov	r3, r9
 8004868:	f04f 0000 	mov.w	r0, #0
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	0159      	lsls	r1, r3, #5
 8004872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004876:	0150      	lsls	r0, r2, #5
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4641      	mov	r1, r8
 800487e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004882:	4649      	mov	r1, r9
 8004884:	eb63 0b01 	sbc.w	fp, r3, r1
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800489c:	ebb2 040a 	subs.w	r4, r2, sl
 80048a0:	eb63 050b 	sbc.w	r5, r3, fp
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	00eb      	lsls	r3, r5, #3
 80048ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b2:	00e2      	lsls	r2, r4, #3
 80048b4:	4614      	mov	r4, r2
 80048b6:	461d      	mov	r5, r3
 80048b8:	4643      	mov	r3, r8
 80048ba:	18e3      	adds	r3, r4, r3
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	464b      	mov	r3, r9
 80048c0:	eb45 0303 	adc.w	r3, r5, r3
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048d2:	4629      	mov	r1, r5
 80048d4:	028b      	lsls	r3, r1, #10
 80048d6:	4621      	mov	r1, r4
 80048d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048dc:	4621      	mov	r1, r4
 80048de:	028a      	lsls	r2, r1, #10
 80048e0:	4610      	mov	r0, r2
 80048e2:	4619      	mov	r1, r3
 80048e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048e6:	2200      	movs	r2, #0
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	61fa      	str	r2, [r7, #28]
 80048ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f0:	f7fb fc7c 	bl	80001ec <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4613      	mov	r3, r2
 80048fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048fc:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <HAL_RCC_GetSysClockFreq+0x200>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	3301      	adds	r3, #1
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800490c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800490e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004916:	e002      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004918:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x204>)
 800491a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800491c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800491e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004920:	4618      	mov	r0, r3
 8004922:	3750      	adds	r7, #80	@ 0x50
 8004924:	46bd      	mov	sp, r7
 8004926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	00f42400 	.word	0x00f42400
 8004934:	007a1200 	.word	0x007a1200

08004938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800493c:	4b03      	ldr	r3, [pc, #12]	@ (800494c <HAL_RCC_GetHCLKFreq+0x14>)
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000020 	.word	0x20000020

08004950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004954:	f7ff fff0 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0a9b      	lsrs	r3, r3, #10
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4903      	ldr	r1, [pc, #12]	@ (8004974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40023800 	.word	0x40023800
 8004974:	080067a8 	.word	0x080067a8

08004978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800497c:	f7ff ffdc 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0b5b      	lsrs	r3, r3, #13
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4903      	ldr	r1, [pc, #12]	@ (800499c <HAL_RCC_GetPCLK2Freq+0x24>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	080067a8 	.word	0x080067a8

080049a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e041      	b.n	8004a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fb12 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 f95e 	bl	8004ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d001      	beq.n	8004a58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e046      	b.n	8004ae6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a23      	ldr	r2, [pc, #140]	@ (8004af4 <HAL_TIM_Base_Start+0xb4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a72:	d01d      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1f      	ldr	r2, [pc, #124]	@ (8004af8 <HAL_TIM_Base_Start+0xb8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1e      	ldr	r2, [pc, #120]	@ (8004afc <HAL_TIM_Base_Start+0xbc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <HAL_TIM_Base_Start+0xc0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <HAL_TIM_Base_Start+0xc4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a19      	ldr	r2, [pc, #100]	@ (8004b08 <HAL_TIM_Base_Start+0xc8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <HAL_TIM_Base_Start+0xcc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d111      	bne.n	8004ad4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d010      	beq.n	8004ae4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad2:	e007      	b.n	8004ae4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40010400 	.word	0x40010400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40001800 	.word	0x40001800

08004b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_ConfigClockSource+0x1c>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0b4      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x186>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b64:	d03e      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6a:	f200 8087 	bhi.w	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_TIM_ConfigClockSource+0x172>
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7a:	d87f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b70      	cmp	r3, #112	@ 0x70
 8004b7e:	d01a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004b80:	2b70      	cmp	r3, #112	@ 0x70
 8004b82:	d87b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b60      	cmp	r3, #96	@ 0x60
 8004b86:	d050      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x11a>
 8004b88:	2b60      	cmp	r3, #96	@ 0x60
 8004b8a:	d877      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b50      	cmp	r3, #80	@ 0x50
 8004b8e:	d03c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xfa>
 8004b90:	2b50      	cmp	r3, #80	@ 0x50
 8004b92:	d873      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b94:	2b40      	cmp	r3, #64	@ 0x40
 8004b96:	d058      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x13a>
 8004b98:	2b40      	cmp	r3, #64	@ 0x40
 8004b9a:	d86f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b30      	cmp	r3, #48	@ 0x30
 8004b9e:	d064      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba0:	2b30      	cmp	r3, #48	@ 0x30
 8004ba2:	d86b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d060      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d867      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05c      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d05a      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	e062      	b.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f000 f985 	bl	8004ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
      break;
 8004be2:	e04f      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f000 f96e 	bl	8004ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c06:	609a      	str	r2, [r3, #8]
      break;
 8004c08:	e03c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 f8e2 	bl	8004de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2150      	movs	r1, #80	@ 0x50
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f93b 	bl	8004e9e <TIM_ITRx_SetConfig>
      break;
 8004c28:	e02c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f000 f901 	bl	8004e3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2160      	movs	r1, #96	@ 0x60
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f92b 	bl	8004e9e <TIM_ITRx_SetConfig>
      break;
 8004c48:	e01c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 f8c2 	bl	8004de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2140      	movs	r1, #64	@ 0x40
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f91b 	bl	8004e9e <TIM_ITRx_SetConfig>
      break;
 8004c68:	e00c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 f912 	bl	8004e9e <TIM_ITRx_SetConfig>
      break;
 8004c7a:	e003      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e000      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a40      	ldr	r2, [pc, #256]	@ (8004db4 <TIM_Base_SetConfig+0x114>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <TIM_Base_SetConfig+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbe:	d00f      	beq.n	8004ce0 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8004db8 <TIM_Base_SetConfig+0x118>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00b      	beq.n	8004ce0 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a3c      	ldr	r2, [pc, #240]	@ (8004dbc <TIM_Base_SetConfig+0x11c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d007      	beq.n	8004ce0 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a3b      	ldr	r2, [pc, #236]	@ (8004dc0 <TIM_Base_SetConfig+0x120>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a3a      	ldr	r2, [pc, #232]	@ (8004dc4 <TIM_Base_SetConfig+0x124>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d108      	bne.n	8004cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8004db4 <TIM_Base_SetConfig+0x114>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d02b      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d00:	d027      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <TIM_Base_SetConfig+0x118>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d023      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004dbc <TIM_Base_SetConfig+0x11c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d01f      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc0 <TIM_Base_SetConfig+0x120>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01b      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a29      	ldr	r2, [pc, #164]	@ (8004dc4 <TIM_Base_SetConfig+0x124>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d017      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a28      	ldr	r2, [pc, #160]	@ (8004dc8 <TIM_Base_SetConfig+0x128>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a27      	ldr	r2, [pc, #156]	@ (8004dcc <TIM_Base_SetConfig+0x12c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00f      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a26      	ldr	r2, [pc, #152]	@ (8004dd0 <TIM_Base_SetConfig+0x130>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00b      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a25      	ldr	r2, [pc, #148]	@ (8004dd4 <TIM_Base_SetConfig+0x134>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d007      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a24      	ldr	r2, [pc, #144]	@ (8004dd8 <TIM_Base_SetConfig+0x138>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d003      	beq.n	8004d52 <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a23      	ldr	r2, [pc, #140]	@ (8004ddc <TIM_Base_SetConfig+0x13c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d108      	bne.n	8004d64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004db4 <TIM_Base_SetConfig+0x114>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <TIM_Base_SetConfig+0xf8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc4 <TIM_Base_SetConfig+0x124>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d103      	bne.n	8004da0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	615a      	str	r2, [r3, #20]
}
 8004da6:	bf00      	nop
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40010000 	.word	0x40010000
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40000c00 	.word	0x40000c00
 8004dc4:	40010400 	.word	0x40010400
 8004dc8:	40014000 	.word	0x40014000
 8004dcc:	40014400 	.word	0x40014400
 8004dd0:	40014800 	.word	0x40014800
 8004dd4:	40001800 	.word	0x40001800
 8004dd8:	40001c00 	.word	0x40001c00
 8004ddc:	40002000 	.word	0x40002000

08004de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f023 0201 	bic.w	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 030a 	bic.w	r3, r3, #10
 8004e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b087      	sub	sp, #28
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f023 0210 	bic.w	r2, r3, #16
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	031b      	lsls	r3, r3, #12
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f043 0307 	orr.w	r3, r3, #7
 8004ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	609a      	str	r2, [r3, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	021a      	lsls	r2, r3, #8
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	609a      	str	r2, [r3, #8]
}
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e05a      	b.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a21      	ldr	r2, [pc, #132]	@ (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d022      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f78:	d01d      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d018      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d013      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1a      	ldr	r2, [pc, #104]	@ (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00e      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a18      	ldr	r2, [pc, #96]	@ (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d009      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a17      	ldr	r2, [pc, #92]	@ (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d004      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a15      	ldr	r2, [pc, #84]	@ (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40000c00 	.word	0x40000c00
 8005000:	40010400 	.word	0x40010400
 8005004:	40014000 	.word	0x40014000
 8005008:	40001800 	.word	0x40001800

0800500c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e03f      	b.n	800509e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fb fffc 	bl	8001030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2224      	movs	r2, #36	@ 0x24
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800504e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fddf 	bl	8005c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b08a      	sub	sp, #40	@ 0x28
 80050aa:	af02      	add	r7, sp, #8
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	4613      	mov	r3, r2
 80050b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d17c      	bne.n	80051c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <HAL_UART_Transmit+0x2c>
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e075      	b.n	80051c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_UART_Transmit+0x3e>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e06e      	b.n	80051c2 <HAL_UART_Transmit+0x11c>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2221      	movs	r2, #33	@ 0x21
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050fa:	f7fd fa51 	bl	80025a0 <HAL_GetTick>
 80050fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	88fa      	ldrh	r2, [r7, #6]
 8005104:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	88fa      	ldrh	r2, [r7, #6]
 800510a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005114:	d108      	bne.n	8005128 <HAL_UART_Transmit+0x82>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	e003      	b.n	8005130 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8005138:	e02a      	b.n	8005190 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2200      	movs	r2, #0
 8005142:	2180      	movs	r1, #128	@ 0x80
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 fb1f 	bl	8005788 <UART_WaitOnFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e036      	b.n	80051c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10b      	bne.n	8005172 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005168:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	3302      	adds	r3, #2
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	e007      	b.n	8005182 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	781a      	ldrb	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	3301      	adds	r3, #1
 8005180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1cf      	bne.n	800513a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2200      	movs	r2, #0
 80051a2:	2140      	movs	r1, #64	@ 0x40
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 faef 	bl	8005788 <UART_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e006      	b.n	80051c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	e000      	b.n	80051c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051c0:	2302      	movs	r3, #2
  }
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d11d      	bne.n	8005220 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_UART_Receive_IT+0x26>
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e016      	b.n	8005222 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Receive_IT+0x38>
 80051fe:	2302      	movs	r3, #2
 8005200:	e00f      	b.n	8005222 <HAL_UART_Receive_IT+0x58>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	461a      	mov	r2, r3
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fb24 	bl	8005864 <UART_Start_Receive_IT>
 800521c:	4603      	mov	r3, r0
 800521e:	e000      	b.n	8005222 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005220:	2302      	movs	r3, #2
  }
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b0ba      	sub	sp, #232	@ 0xe8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005252:	2300      	movs	r3, #0
 8005254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800526a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_UART_IRQHandler+0x66>
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fc07 	bl	8005a9e <UART_Receive_IT>
      return;
 8005290:	e256      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80de 	beq.w	8005458 <HAL_UART_IRQHandler+0x22c>
 800529c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80d1 	beq.w	8005458 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00b      	beq.n	80052da <HAL_UART_IRQHandler+0xae>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	f043 0201 	orr.w	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <HAL_UART_IRQHandler+0xd2>
 80052e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	f043 0202 	orr.w	r2, r3, #2
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_UART_IRQHandler+0xf6>
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	f043 0204 	orr.w	r2, r3, #4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <HAL_UART_IRQHandler+0x126>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	f043 0208 	orr.w	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 81ed 	beq.w	8005736 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_UART_IRQHandler+0x14e>
 8005368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fb92 	bl	8005a9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005384:	2b40      	cmp	r3, #64	@ 0x40
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_UART_IRQHandler+0x17a>
 800539e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d04f      	beq.n	8005446 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fa9a 	bl	80058e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b6:	2b40      	cmp	r3, #64	@ 0x40
 80053b8:	d141      	bne.n	800543e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3314      	adds	r3, #20
 80053e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1d9      	bne.n	80053ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	2b00      	cmp	r3, #0
 800540c:	d013      	beq.n	8005436 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005412:	4a7d      	ldr	r2, [pc, #500]	@ (8005608 <HAL_UART_IRQHandler+0x3dc>)
 8005414:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd ffe1 	bl	80033e2 <HAL_DMA_Abort_IT>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d016      	beq.n	8005454 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	e00e      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f990 	bl	800575c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	e00a      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f98c 	bl	800575c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	e006      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f988 	bl	800575c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005452:	e170      	b.n	8005736 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	bf00      	nop
    return;
 8005456:	e16e      	b.n	8005736 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545c:	2b01      	cmp	r3, #1
 800545e:	f040 814a 	bne.w	80056f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8143 	beq.w	80056f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 813c 	beq.w	80056f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	f040 80b4 	bne.w	800560c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8140 	beq.w	800573a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054c2:	429a      	cmp	r2, r3
 80054c4:	f080 8139 	bcs.w	800573a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054da:	f000 8088 	beq.w	80055ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	330c      	adds	r3, #12
 80054e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800550a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005516:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1d9      	bne.n	80054de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800553a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3314      	adds	r3, #20
 800554a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800554e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005552:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005556:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e1      	bne.n	800552a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3314      	adds	r3, #20
 800556c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800557c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3314      	adds	r3, #20
 8005586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800558a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800558c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005590:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e3      	bne.n	8005566 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055be:	f023 0310 	bic.w	r3, r3, #16
 80055c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e3      	bne.n	80055ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fd fe8a 	bl	8003302 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8b6 	bl	8005770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005604:	e099      	b.n	800573a <HAL_UART_IRQHandler+0x50e>
 8005606:	bf00      	nop
 8005608:	080059a7 	.word	0x080059a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005614:	b29b      	uxth	r3, r3
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 808b 	beq.w	800573e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005628:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8086 	beq.w	800573e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005648:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005656:	647a      	str	r2, [r7, #68]	@ 0x44
 8005658:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800565c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e3      	bne.n	8005632 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	623b      	str	r3, [r7, #32]
   return(result);
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800568e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005690:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800569c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e3      	bne.n	800566a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	60fb      	str	r3, [r7, #12]
   return(result);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0310 	bic.w	r3, r3, #16
 80056c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056d4:	61fa      	str	r2, [r7, #28]
 80056d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	69b9      	ldr	r1, [r7, #24]
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	617b      	str	r3, [r7, #20]
   return(result);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e3      	bne.n	80056b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f83e 	bl	8005770 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056f4:	e023      	b.n	800573e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <HAL_UART_IRQHandler+0x4ea>
 8005702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f95d 	bl	80059ce <UART_Transmit_IT>
    return;
 8005714:	e014      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00e      	beq.n	8005740 <HAL_UART_IRQHandler+0x514>
 8005722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f99d 	bl	8005a6e <UART_EndTransmit_IT>
    return;
 8005734:	e004      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
    return;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
      return;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
      return;
 800573e:	bf00      	nop
  }
}
 8005740:	37e8      	adds	r7, #232	@ 0xe8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop

08005748 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b090      	sub	sp, #64	@ 0x40
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	4613      	mov	r3, r2
 8005796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005798:	e050      	b.n	800583c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d04c      	beq.n	800583c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80057a8:	f7fc fefa 	bl	80025a0 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d241      	bcs.n	800583c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80057ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80057da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80057e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e5      	bne.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3314      	adds	r3, #20
 80057f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	613b      	str	r3, [r7, #16]
   return(result);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 0301 	bic.w	r3, r3, #1
 8005802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3314      	adds	r3, #20
 800580a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800580c:	623a      	str	r2, [r7, #32]
 800580e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	61bb      	str	r3, [r7, #24]
   return(result);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e5      	bne.n	80057ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e00f      	b.n	800585c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4013      	ands	r3, r2
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	429a      	cmp	r2, r3
 8005858:	d09f      	beq.n	800579a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3740      	adds	r7, #64	@ 0x40
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	88fa      	ldrh	r2, [r7, #6]
 8005882:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2222      	movs	r2, #34	@ 0x22
 800588e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0220 	orr.w	r2, r2, #32
 80058d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b095      	sub	sp, #84	@ 0x54
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005908:	643a      	str	r2, [r7, #64]	@ 0x40
 800590a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800590e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e5      	bne.n	80058e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3314      	adds	r3, #20
 8005922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	61fb      	str	r3, [r7, #28]
   return(result);
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3314      	adds	r3, #20
 800593a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800593c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800593e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e5      	bne.n	800591c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005954:	2b01      	cmp	r3, #1
 8005956:	d119      	bne.n	800598c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	60bb      	str	r3, [r7, #8]
   return(result);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f023 0310 	bic.w	r3, r3, #16
 800596e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005978:	61ba      	str	r2, [r7, #24]
 800597a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6979      	ldr	r1, [r7, #20]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	613b      	str	r3, [r7, #16]
   return(result);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e5      	bne.n	8005958 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800599a:	bf00      	nop
 800599c:	3754      	adds	r7, #84	@ 0x54
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff fecb 	bl	800575c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b085      	sub	sp, #20
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b21      	cmp	r3, #33	@ 0x21
 80059e0:	d13e      	bne.n	8005a60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ea:	d114      	bne.n	8005a16 <UART_Transmit_IT+0x48>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d110      	bne.n	8005a16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	1c9a      	adds	r2, r3, #2
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	621a      	str	r2, [r3, #32]
 8005a14:	e008      	b.n	8005a28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	1c59      	adds	r1, r3, #1
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6211      	str	r1, [r2, #32]
 8005a20:	781a      	ldrb	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	4619      	mov	r1, r3
 8005a36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10f      	bne.n	8005a5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e000      	b.n	8005a62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a60:	2302      	movs	r3, #2
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff fe5a 	bl	8005748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b08c      	sub	sp, #48	@ 0x30
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b22      	cmp	r3, #34	@ 0x22
 8005ab0:	f040 80ab 	bne.w	8005c0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005abc:	d117      	bne.n	8005aee <UART_Receive_IT+0x50>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d113      	bne.n	8005aee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ace:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	1c9a      	adds	r2, r3, #2
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	629a      	str	r2, [r3, #40]	@ 0x28
 8005aec:	e026      	b.n	8005b3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b00:	d007      	beq.n	8005b12 <UART_Receive_IT+0x74>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <UART_Receive_IT+0x82>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e008      	b.n	8005b32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d15a      	bne.n	8005c06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0220 	bic.w	r2, r2, #32
 8005b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d135      	bne.n	8005bfc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f023 0310 	bic.w	r3, r3, #16
 8005bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb6:	623a      	str	r2, [r7, #32]
 8005bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	69f9      	ldr	r1, [r7, #28]
 8005bbc:	6a3a      	ldr	r2, [r7, #32]
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b10      	cmp	r3, #16
 8005bd6:	d10a      	bne.n	8005bee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff fdbb 	bl	8005770 <HAL_UARTEx_RxEventCallback>
 8005bfa:	e002      	b.n	8005c02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7fb fb91 	bl	8001324 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e002      	b.n	8005c0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e000      	b.n	8005c0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c0a:	2302      	movs	r3, #2
  }
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3730      	adds	r7, #48	@ 0x30
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c18:	b0c0      	sub	sp, #256	@ 0x100
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c30:	68d9      	ldr	r1, [r3, #12]
 8005c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	ea40 0301 	orr.w	r3, r0, r1
 8005c3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c6c:	f021 010c 	bic.w	r1, r1, #12
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c7a:	430b      	orrs	r3, r1
 8005c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8e:	6999      	ldr	r1, [r3, #24]
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	ea40 0301 	orr.w	r3, r0, r1
 8005c9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b8f      	ldr	r3, [pc, #572]	@ (8005ee0 <UART_SetConfig+0x2cc>)
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d005      	beq.n	8005cb4 <UART_SetConfig+0xa0>
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4b8d      	ldr	r3, [pc, #564]	@ (8005ee4 <UART_SetConfig+0x2d0>)
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d104      	bne.n	8005cbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cb4:	f7fe fe60 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 8005cb8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cbc:	e003      	b.n	8005cc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cbe:	f7fe fe47 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 8005cc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd0:	f040 810c 	bne.w	8005eec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ce2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	462b      	mov	r3, r5
 8005cea:	1891      	adds	r1, r2, r2
 8005cec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005cee:	415b      	adcs	r3, r3
 8005cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	eb12 0801 	adds.w	r8, r2, r1
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	eb43 0901 	adc.w	r9, r3, r1
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d16:	4690      	mov	r8, r2
 8005d18:	4699      	mov	r9, r3
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	eb18 0303 	adds.w	r3, r8, r3
 8005d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d24:	462b      	mov	r3, r5
 8005d26:	eb49 0303 	adc.w	r3, r9, r3
 8005d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d42:	460b      	mov	r3, r1
 8005d44:	18db      	adds	r3, r3, r3
 8005d46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d48:	4613      	mov	r3, r2
 8005d4a:	eb42 0303 	adc.w	r3, r2, r3
 8005d4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d58:	f7fa fa48 	bl	80001ec <__aeabi_uldivmod>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4b61      	ldr	r3, [pc, #388]	@ (8005ee8 <UART_SetConfig+0x2d4>)
 8005d62:	fba3 2302 	umull	r2, r3, r3, r2
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	011c      	lsls	r4, r3, #4
 8005d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	464b      	mov	r3, r9
 8005d80:	1891      	adds	r1, r2, r2
 8005d82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d84:	415b      	adcs	r3, r3
 8005d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	eb12 0a01 	adds.w	sl, r2, r1
 8005d92:	4649      	mov	r1, r9
 8005d94:	eb43 0b01 	adc.w	fp, r3, r1
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	f04f 0300 	mov.w	r3, #0
 8005da0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005da4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dac:	4692      	mov	sl, r2
 8005dae:	469b      	mov	fp, r3
 8005db0:	4643      	mov	r3, r8
 8005db2:	eb1a 0303 	adds.w	r3, sl, r3
 8005db6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dba:	464b      	mov	r3, r9
 8005dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8005dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005dd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	18db      	adds	r3, r3, r3
 8005ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dde:	4613      	mov	r3, r2
 8005de0:	eb42 0303 	adc.w	r3, r2, r3
 8005de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005de6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005dea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005dee:	f7fa f9fd 	bl	80001ec <__aeabi_uldivmod>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4611      	mov	r1, r2
 8005df8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee8 <UART_SetConfig+0x2d4>)
 8005dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	2264      	movs	r2, #100	@ 0x64
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	1acb      	subs	r3, r1, r3
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e0e:	4b36      	ldr	r3, [pc, #216]	@ (8005ee8 <UART_SetConfig+0x2d4>)
 8005e10:	fba3 2302 	umull	r2, r3, r3, r2
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e1c:	441c      	add	r4, r3
 8005e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	1891      	adds	r1, r2, r2
 8005e36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e38:	415b      	adcs	r3, r3
 8005e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e40:	4641      	mov	r1, r8
 8005e42:	1851      	adds	r1, r2, r1
 8005e44:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e46:	4649      	mov	r1, r9
 8005e48:	414b      	adcs	r3, r1
 8005e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e58:	4659      	mov	r1, fp
 8005e5a:	00cb      	lsls	r3, r1, #3
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e62:	4651      	mov	r1, sl
 8005e64:	00ca      	lsls	r2, r1, #3
 8005e66:	4610      	mov	r0, r2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	189b      	adds	r3, r3, r2
 8005e70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e74:	464b      	mov	r3, r9
 8005e76:	460a      	mov	r2, r1
 8005e78:	eb42 0303 	adc.w	r3, r2, r3
 8005e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e94:	460b      	mov	r3, r1
 8005e96:	18db      	adds	r3, r3, r3
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ea6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005eaa:	f7fa f99f 	bl	80001ec <__aeabi_uldivmod>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee8 <UART_SetConfig+0x2d4>)
 8005eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	2164      	movs	r1, #100	@ 0x64
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	3332      	adds	r3, #50	@ 0x32
 8005ec6:	4a08      	ldr	r2, [pc, #32]	@ (8005ee8 <UART_SetConfig+0x2d4>)
 8005ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	f003 0207 	and.w	r2, r3, #7
 8005ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4422      	add	r2, r4
 8005eda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005edc:	e106      	b.n	80060ec <UART_SetConfig+0x4d8>
 8005ede:	bf00      	nop
 8005ee0:	40011000 	.word	0x40011000
 8005ee4:	40011400 	.word	0x40011400
 8005ee8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ef6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005efa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005efe:	4642      	mov	r2, r8
 8005f00:	464b      	mov	r3, r9
 8005f02:	1891      	adds	r1, r2, r2
 8005f04:	6239      	str	r1, [r7, #32]
 8005f06:	415b      	adcs	r3, r3
 8005f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f0e:	4641      	mov	r1, r8
 8005f10:	1854      	adds	r4, r2, r1
 8005f12:	4649      	mov	r1, r9
 8005f14:	eb43 0501 	adc.w	r5, r3, r1
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	00eb      	lsls	r3, r5, #3
 8005f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f26:	00e2      	lsls	r2, r4, #3
 8005f28:	4614      	mov	r4, r2
 8005f2a:	461d      	mov	r5, r3
 8005f2c:	4643      	mov	r3, r8
 8005f2e:	18e3      	adds	r3, r4, r3
 8005f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f34:	464b      	mov	r3, r9
 8005f36:	eb45 0303 	adc.w	r3, r5, r3
 8005f3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	008b      	lsls	r3, r1, #2
 8005f5e:	4621      	mov	r1, r4
 8005f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f64:	4621      	mov	r1, r4
 8005f66:	008a      	lsls	r2, r1, #2
 8005f68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f6c:	f7fa f93e 	bl	80001ec <__aeabi_uldivmod>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4b60      	ldr	r3, [pc, #384]	@ (80060f8 <UART_SetConfig+0x4e4>)
 8005f76:	fba3 2302 	umull	r2, r3, r3, r2
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	011c      	lsls	r4, r3, #4
 8005f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f90:	4642      	mov	r2, r8
 8005f92:	464b      	mov	r3, r9
 8005f94:	1891      	adds	r1, r2, r2
 8005f96:	61b9      	str	r1, [r7, #24]
 8005f98:	415b      	adcs	r3, r3
 8005f9a:	61fb      	str	r3, [r7, #28]
 8005f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	1851      	adds	r1, r2, r1
 8005fa4:	6139      	str	r1, [r7, #16]
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	414b      	adcs	r3, r1
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fb8:	4659      	mov	r1, fp
 8005fba:	00cb      	lsls	r3, r1, #3
 8005fbc:	4651      	mov	r1, sl
 8005fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fc2:	4651      	mov	r1, sl
 8005fc4:	00ca      	lsls	r2, r1, #3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	4642      	mov	r2, r8
 8005fce:	189b      	adds	r3, r3, r2
 8005fd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fd4:	464b      	mov	r3, r9
 8005fd6:	460a      	mov	r2, r1
 8005fd8:	eb42 0303 	adc.w	r3, r2, r3
 8005fdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	f04f 0300 	mov.w	r3, #0
 8005ff4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	008b      	lsls	r3, r1, #2
 8005ffc:	4641      	mov	r1, r8
 8005ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006002:	4641      	mov	r1, r8
 8006004:	008a      	lsls	r2, r1, #2
 8006006:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800600a:	f7fa f8ef 	bl	80001ec <__aeabi_uldivmod>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4611      	mov	r1, r2
 8006014:	4b38      	ldr	r3, [pc, #224]	@ (80060f8 <UART_SetConfig+0x4e4>)
 8006016:	fba3 2301 	umull	r2, r3, r3, r1
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	2264      	movs	r2, #100	@ 0x64
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	1acb      	subs	r3, r1, r3
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	3332      	adds	r3, #50	@ 0x32
 8006028:	4a33      	ldr	r2, [pc, #204]	@ (80060f8 <UART_SetConfig+0x4e4>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006034:	441c      	add	r4, r3
 8006036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800603a:	2200      	movs	r2, #0
 800603c:	673b      	str	r3, [r7, #112]	@ 0x70
 800603e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006040:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006044:	4642      	mov	r2, r8
 8006046:	464b      	mov	r3, r9
 8006048:	1891      	adds	r1, r2, r2
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	415b      	adcs	r3, r3
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006054:	4641      	mov	r1, r8
 8006056:	1851      	adds	r1, r2, r1
 8006058:	6039      	str	r1, [r7, #0]
 800605a:	4649      	mov	r1, r9
 800605c:	414b      	adcs	r3, r1
 800605e:	607b      	str	r3, [r7, #4]
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800606c:	4659      	mov	r1, fp
 800606e:	00cb      	lsls	r3, r1, #3
 8006070:	4651      	mov	r1, sl
 8006072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006076:	4651      	mov	r1, sl
 8006078:	00ca      	lsls	r2, r1, #3
 800607a:	4610      	mov	r0, r2
 800607c:	4619      	mov	r1, r3
 800607e:	4603      	mov	r3, r0
 8006080:	4642      	mov	r2, r8
 8006082:	189b      	adds	r3, r3, r2
 8006084:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006086:	464b      	mov	r3, r9
 8006088:	460a      	mov	r2, r1
 800608a:	eb42 0303 	adc.w	r3, r2, r3
 800608e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	663b      	str	r3, [r7, #96]	@ 0x60
 800609a:	667a      	str	r2, [r7, #100]	@ 0x64
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	f04f 0300 	mov.w	r3, #0
 80060a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060a8:	4649      	mov	r1, r9
 80060aa:	008b      	lsls	r3, r1, #2
 80060ac:	4641      	mov	r1, r8
 80060ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b2:	4641      	mov	r1, r8
 80060b4:	008a      	lsls	r2, r1, #2
 80060b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060ba:	f7fa f897 	bl	80001ec <__aeabi_uldivmod>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <UART_SetConfig+0x4e4>)
 80060c4:	fba3 1302 	umull	r1, r3, r3, r2
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	2164      	movs	r1, #100	@ 0x64
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	3332      	adds	r3, #50	@ 0x32
 80060d6:	4a08      	ldr	r2, [pc, #32]	@ (80060f8 <UART_SetConfig+0x4e4>)
 80060d8:	fba2 2303 	umull	r2, r3, r2, r3
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	f003 020f 	and.w	r2, r3, #15
 80060e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4422      	add	r2, r4
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060f2:	46bd      	mov	sp, r7
 80060f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f8:	51eb851f 	.word	0x51eb851f

080060fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060fc:	b084      	sub	sp, #16
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	f107 001c 	add.w	r0, r7, #28
 800610a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	2b01      	cmp	r3, #1
 8006112:	d122      	bne.n	800615a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006118:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800613c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d105      	bne.n	800614e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 faa2 	bl	8006698 <USB_CoreReset>
 8006154:	4603      	mov	r3, r0
 8006156:	73fb      	strb	r3, [r7, #15]
 8006158:	e01a      	b.n	8006190 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fa96 	bl	8006698 <USB_CoreReset>
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	639a      	str	r2, [r3, #56]	@ 0x38
 8006182:	e005      	b.n	8006190 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006188:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	2b01      	cmp	r3, #1
 8006194:	d10b      	bne.n	80061ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f043 0206 	orr.w	r2, r3, #6
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061ba:	b004      	add	sp, #16
 80061bc:	4770      	bx	lr

080061be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f023 0201 	bic.w	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d115      	bne.n	800622e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800620e:	2001      	movs	r0, #1
 8006210:	f7fc f9d2 	bl	80025b8 <HAL_Delay>
      ms++;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3301      	adds	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa2e 	bl	800667c <USB_GetMode>
 8006220:	4603      	mov	r3, r0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d01e      	beq.n	8006264 <USB_SetCurrentMode+0x84>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b31      	cmp	r3, #49	@ 0x31
 800622a:	d9f0      	bls.n	800620e <USB_SetCurrentMode+0x2e>
 800622c:	e01a      	b.n	8006264 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d115      	bne.n	8006260 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006240:	2001      	movs	r0, #1
 8006242:	f7fc f9b9 	bl	80025b8 <HAL_Delay>
      ms++;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fa15 	bl	800667c <USB_GetMode>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d005      	beq.n	8006264 <USB_SetCurrentMode+0x84>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b31      	cmp	r3, #49	@ 0x31
 800625c:	d9f0      	bls.n	8006240 <USB_SetCurrentMode+0x60>
 800625e:	e001      	b.n	8006264 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e005      	b.n	8006270 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b32      	cmp	r3, #50	@ 0x32
 8006268:	d101      	bne.n	800626e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006278:	b084      	sub	sp, #16
 800627a:	b580      	push	{r7, lr}
 800627c:	b086      	sub	sp, #24
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006292:	2300      	movs	r3, #0
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	e009      	b.n	80062ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	3340      	adds	r3, #64	@ 0x40
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	2200      	movs	r2, #0
 80062a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	3301      	adds	r3, #1
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b0e      	cmp	r3, #14
 80062b0:	d9f2      	bls.n	8006298 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d11c      	bne.n	80062f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062c6:	f043 0302 	orr.w	r3, r3, #2
 80062ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062dc:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80062f0:	e00b      	b.n	800630a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006302:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006310:	461a      	mov	r2, r3
 8006312:	2300      	movs	r3, #0
 8006314:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631c:	4619      	mov	r1, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006324:	461a      	mov	r2, r3
 8006326:	680b      	ldr	r3, [r1, #0]
 8006328:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800632a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632c:	2b01      	cmp	r3, #1
 800632e:	d10c      	bne.n	800634a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d104      	bne.n	8006340 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006336:	2100      	movs	r1, #0
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f965 	bl	8006608 <USB_SetDevSpeed>
 800633e:	e008      	b.n	8006352 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006340:	2101      	movs	r1, #1
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f960 	bl	8006608 <USB_SetDevSpeed>
 8006348:	e003      	b.n	8006352 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800634a:	2103      	movs	r1, #3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f95b 	bl	8006608 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006352:	2110      	movs	r1, #16
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f8f3 	bl	8006540 <USB_FlushTxFifo>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f91f 	bl	80065a8 <USB_FlushRxFifo>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800637a:	461a      	mov	r2, r3
 800637c:	2300      	movs	r3, #0
 800637e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006386:	461a      	mov	r2, r3
 8006388:	2300      	movs	r3, #0
 800638a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006392:	461a      	mov	r2, r3
 8006394:	2300      	movs	r3, #0
 8006396:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006398:	2300      	movs	r3, #0
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	e043      	b.n	8006426 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063b4:	d118      	bne.n	80063e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c8:	461a      	mov	r2, r3
 80063ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	e013      	b.n	80063fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063de:	461a      	mov	r2, r3
 80063e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e008      	b.n	80063fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f4:	461a      	mov	r2, r3
 80063f6:	2300      	movs	r3, #0
 80063f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006406:	461a      	mov	r2, r3
 8006408:	2300      	movs	r3, #0
 800640a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006418:	461a      	mov	r2, r3
 800641a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800641e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	3301      	adds	r3, #1
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	429a      	cmp	r2, r3
 800642c:	d3b7      	bcc.n	800639e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	e043      	b.n	80064bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006446:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800644a:	d118      	bne.n	800647e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645e:	461a      	mov	r2, r3
 8006460:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	e013      	b.n	8006490 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006474:	461a      	mov	r2, r3
 8006476:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	e008      	b.n	8006490 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648a:	461a      	mov	r2, r3
 800648c:	2300      	movs	r3, #0
 800648e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649c:	461a      	mov	r2, r3
 800649e:	2300      	movs	r3, #0
 80064a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ae:	461a      	mov	r2, r3
 80064b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	3301      	adds	r3, #1
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d3b7      	bcc.n	8006434 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80064e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d105      	bne.n	80064f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f043 0210 	orr.w	r2, r3, #16
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	4b0f      	ldr	r3, [pc, #60]	@ (800653c <USB_DevInit+0x2c4>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f043 0208 	orr.w	r2, r3, #8
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d107      	bne.n	800652c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006524:	f043 0304 	orr.w	r3, r3, #4
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800652c:	7dfb      	ldrb	r3, [r7, #23]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006538:	b004      	add	sp, #16
 800653a:	4770      	bx	lr
 800653c:	803c3800 	.word	0x803c3800

08006540 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3301      	adds	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4a13      	ldr	r2, [pc, #76]	@ (80065a4 <USB_FlushTxFifo+0x64>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d901      	bls.n	8006560 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e01b      	b.n	8006598 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	daf2      	bge.n	800654e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	019b      	lsls	r3, r3, #6
 8006570:	f043 0220 	orr.w	r2, r3, #32
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3301      	adds	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4a08      	ldr	r2, [pc, #32]	@ (80065a4 <USB_FlushTxFifo+0x64>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d901      	bls.n	800658a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e006      	b.n	8006598 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b20      	cmp	r3, #32
 8006594:	d0f0      	beq.n	8006578 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	00030d40 	.word	0x00030d40

080065a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3301      	adds	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4a11      	ldr	r2, [pc, #68]	@ (8006604 <USB_FlushRxFifo+0x5c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d901      	bls.n	80065c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e018      	b.n	80065f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	daf2      	bge.n	80065b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2210      	movs	r2, #16
 80065d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3301      	adds	r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a08      	ldr	r2, [pc, #32]	@ (8006604 <USB_FlushRxFifo+0x5c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d901      	bls.n	80065ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e006      	b.n	80065f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0310 	and.w	r3, r3, #16
 80065f2:	2b10      	cmp	r3, #16
 80065f4:	d0f0      	beq.n	80065d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	00030d40 	.word	0x00030d40

08006608 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006628:	4313      	orrs	r3, r2
 800662a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006654:	f023 0303 	bic.w	r3, r3, #3
 8006658:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006668:	f043 0302 	orr.w	r3, r3, #2
 800666c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f003 0301 	and.w	r3, r3, #1
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3301      	adds	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4a13      	ldr	r2, [pc, #76]	@ (80066fc <USB_CoreReset+0x64>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d901      	bls.n	80066b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e01b      	b.n	80066ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	daf2      	bge.n	80066a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f043 0201 	orr.w	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3301      	adds	r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a09      	ldr	r2, [pc, #36]	@ (80066fc <USB_CoreReset+0x64>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d901      	bls.n	80066e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e006      	b.n	80066ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d0f0      	beq.n	80066ce <USB_CoreReset+0x36>

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	00030d40 	.word	0x00030d40

08006700 <memset>:
 8006700:	4402      	add	r2, r0
 8006702:	4603      	mov	r3, r0
 8006704:	4293      	cmp	r3, r2
 8006706:	d100      	bne.n	800670a <memset+0xa>
 8006708:	4770      	bx	lr
 800670a:	f803 1b01 	strb.w	r1, [r3], #1
 800670e:	e7f9      	b.n	8006704 <memset+0x4>

08006710 <__libc_init_array>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4d0d      	ldr	r5, [pc, #52]	@ (8006748 <__libc_init_array+0x38>)
 8006714:	4c0d      	ldr	r4, [pc, #52]	@ (800674c <__libc_init_array+0x3c>)
 8006716:	1b64      	subs	r4, r4, r5
 8006718:	10a4      	asrs	r4, r4, #2
 800671a:	2600      	movs	r6, #0
 800671c:	42a6      	cmp	r6, r4
 800671e:	d109      	bne.n	8006734 <__libc_init_array+0x24>
 8006720:	4d0b      	ldr	r5, [pc, #44]	@ (8006750 <__libc_init_array+0x40>)
 8006722:	4c0c      	ldr	r4, [pc, #48]	@ (8006754 <__libc_init_array+0x44>)
 8006724:	f000 f818 	bl	8006758 <_init>
 8006728:	1b64      	subs	r4, r4, r5
 800672a:	10a4      	asrs	r4, r4, #2
 800672c:	2600      	movs	r6, #0
 800672e:	42a6      	cmp	r6, r4
 8006730:	d105      	bne.n	800673e <__libc_init_array+0x2e>
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	f855 3b04 	ldr.w	r3, [r5], #4
 8006738:	4798      	blx	r3
 800673a:	3601      	adds	r6, #1
 800673c:	e7ee      	b.n	800671c <__libc_init_array+0xc>
 800673e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006742:	4798      	blx	r3
 8006744:	3601      	adds	r6, #1
 8006746:	e7f2      	b.n	800672e <__libc_init_array+0x1e>
 8006748:	08006824 	.word	0x08006824
 800674c:	08006824 	.word	0x08006824
 8006750:	08006824 	.word	0x08006824
 8006754:	08006828 	.word	0x08006828

08006758 <_init>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr

08006764 <_fini>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr
