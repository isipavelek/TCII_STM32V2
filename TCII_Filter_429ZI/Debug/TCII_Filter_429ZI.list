
TCII_Filter_429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080058a0  080058a0  000068a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b8  080058b8  0000702c  2**0
                  CONTENTS
  4 .ARM          00000008  080058b8  080058b8  000068b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c0  080058c0  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c0  080058c0  000068c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058c4  080058c4  000068c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  080058c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000702c  2**0
                  CONTENTS
 10 .bss          0000587c  2000002c  2000002c  0000702c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200058a8  200058a8  0000702c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ad1  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003257  00000000  00000000  0001eb2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  00021d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5f  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ef1  00000000  00000000  000240c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a271  00000000  00000000  0004bfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efe5e  00000000  00000000  00066229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00156087  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005360  00000000  00000000  001560cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0015b42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005888 	.word	0x08005888

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000030 	.word	0x20000030
 80001e8:	08005888 	.word	0x08005888

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_ADC_ConvCpltCallback>:


#define CARGANDO_A false


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	static uint8_t estadoADC = 0;
	static uint16_t index = 0;
	uint32_t val=ADC_Read();
 80004e4:	f000 f878 	bl	80005d8 <ADC_Read>
 80004e8:	60f8      	str	r0, [r7, #12]
	if (estadoADC==CARGANDO_A){
 80004ea:	4b2d      	ldr	r3, [pc, #180]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0xc4>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d119      	bne.n	8000526 <HAL_ADC_ConvCpltCallback+0x4a>
		InputA[index] =(float32_t) val;
 80004f2:	4b2c      	ldr	r3, [pc, #176]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	ee07 2a90 	vmov	s15, r2
 80004fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000500:	4a29      	ldr	r2, [pc, #164]	@ (80005a8 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	edc3 7a00 	vstr	s15, [r3]
		DAC_Write((uint32_t)OutputA[index]);
 800050a:	4b26      	ldr	r3, [pc, #152]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	4a27      	ldr	r2, [pc, #156]	@ (80005ac <HAL_ADC_ConvCpltCallback+0xd0>)
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	edd3 7a00 	vldr	s15, [r3]
 8000518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800051c:	ee17 0a90 	vmov	r0, s15
 8000520:	f000 f86e 	bl	8000600 <DAC_Write>
 8000524:	e018      	b.n	8000558 <HAL_ADC_ConvCpltCallback+0x7c>
	}
	else {
		InputB[index] =(float32_t) val ;
 8000526:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	ee07 2a90 	vmov	s15, r2
 8000530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000534:	4a1e      	ldr	r2, [pc, #120]	@ (80005b0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	4413      	add	r3, r2
 800053a:	edc3 7a00 	vstr	s15, [r3]
		DAC_Write((uint32_t)OutputB[index]);
 800053e:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	4a1c      	ldr	r2, [pc, #112]	@ (80005b4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	edd3 7a00 	vldr	s15, [r3]
 800054c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000550:	ee17 0a90 	vmov	r0, s15
 8000554:	f000 f854 	bl	8000600 <DAC_Write>
	}

	index++;
 8000558:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	b29a      	uxth	r2, r3
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000562:	801a      	strh	r2, [r3, #0]
	if (index == SAMPLES_PER_BLOCK) {
 8000564:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800056c:	d114      	bne.n	8000598 <HAL_ADC_ConvCpltCallback+0xbc>
		index = 0;
 800056e:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000570:	2200      	movs	r2, #0
 8000572:	801a      	strh	r2, [r3, #0]
		if(estadoADC==CARGANDO_A)estado=PROCESAR_A;
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d103      	bne.n	8000584 <HAL_ADC_ConvCpltCallback+0xa8>
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <HAL_ADC_ConvCpltCallback+0xdc>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	e002      	b.n	800058a <HAL_ADC_ConvCpltCallback+0xae>
		else estado=PROCESAR_B;
 8000584:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000586:	2202      	movs	r2, #2
 8000588:	701a      	strb	r2, [r3, #0]
		estadoADC ^= 1;
 800058a:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0xc4>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	f083 0301 	eor.w	r3, r3, #1
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b02      	ldr	r3, [pc, #8]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000596:	701a      	strb	r2, [r3, #0]

	}



}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000049 	.word	0x20000049
 80005a4:	2000004a 	.word	0x2000004a
 80005a8:	200018a4 	.word	0x200018a4
 80005ac:	200038a4 	.word	0x200038a4
 80005b0:	200028a4 	.word	0x200028a4
 80005b4:	200048a4 	.word	0x200048a4
 80005b8:	20000048 	.word	0x20000048

080005bc <ADC_Init>:

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "adc_port.h"

void ADC_Init(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <ADC_Init+0x14>)
 80005c2:	f001 ff5b 	bl	800247c <HAL_ADC_Start_IT>

	HAL_TIM_Base_Start(&htim2);
 80005c6:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <ADC_Init+0x18>)
 80005c8:	f004 f888 	bl	80046dc <HAL_TIM_Base_Start>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200001c4 	.word	0x200001c4
 80005d4:	200002d0 	.word	0x200002d0

080005d8 <ADC_Read>:
uint32_t ADC_Read(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	return (HAL_ADC_GetValue(&hadc1));
 80005dc:	4802      	ldr	r0, [pc, #8]	@ (80005e8 <ADC_Read+0x10>)
 80005de:	f002 f93b 	bl	8002858 <HAL_ADC_GetValue>
 80005e2:	4603      	mov	r3, r0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200001c4 	.word	0x200001c4

080005ec <DAC_Init>:

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "dac_port.h"

void DAC_Init(void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

	HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 80005f0:	2100      	movs	r1, #0
 80005f2:	4802      	ldr	r0, [pc, #8]	@ (80005fc <DAC_Init+0x10>)
 80005f4:	f002 fcb9 	bl	8002f6a <HAL_DAC_Start>

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000020c 	.word	0x2000020c

08000600 <DAC_Write>:

void DAC_Write(uint32_t value){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R, value);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	4803      	ldr	r0, [pc, #12]	@ (800061c <DAC_Write+0x1c>)
 8000610:	f002 fcfd 	bl	800300e <HAL_DAC_SetValue>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000020c 	.word	0x2000020c

08000620 <Hard_Init>:
/**
 * brief Inicialización de HW
 *
 */

void Hard_Init(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	HAL_Init();
 8000624:	f001 fe50 	bl	80022c8 <HAL_Init>
	SystemClock_Config();
 8000628:	f000 f812 	bl	8000650 <SystemClock_Config>
	MX_GPIO_Init();
 800062c:	f000 f9f4 	bl	8000a18 <MX_GPIO_Init>
	MX_ETH_Init();
 8000630:	f000 f900 	bl	8000834 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000634:	f000 f998 	bl	8000968 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000638:	f000 f9c0 	bl	80009bc <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 800063c:	f000 f87e 	bl	800073c <MX_ADC1_Init>
	MX_DAC_Init();
 8000640:	f000 f8ce 	bl	80007e0 <MX_DAC_Init>
	MX_TIM2_Init();
 8000644:	f000 f944 	bl	80008d0 <MX_TIM2_Init>
	MX_NVIC_Init();
 8000648:	f000 f86c 	bl	8000724 <MX_NVIC_Init>

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 f8e6 	bl	8005830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = FBUS/1000000;
 80006c4:	23a8      	movs	r3, #168	@ 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fb19 	bl	8003d0c <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 fa5c 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fd7a 	bl	80041fc <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 fa45 	bl	8000b9c <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
void MX_NVIC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	2012      	movs	r0, #18
 800072e:	f002 fbc4 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000732:	2012      	movs	r0, #18
 8000734:	f002 fbdd 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0


  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]


  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800074e:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 8000750:	4a22      	ldr	r2, [pc, #136]	@ (80007dc <MX_ADC1_Init+0xa0>)
 8000752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 8000768:	2201      	movs	r2, #1
 800076a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076c:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 8000776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 800077e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000782:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 800078c:	2201      	movs	r2, #1
 800078e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 800079a:	2201      	movs	r2, #1
 800079c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 80007a0:	f001 fe28 	bl	80023f4 <HAL_ADC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80007aa:	f000 f9f7 	bl	8000b9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 80007c0:	f002 f86c 	bl	800289c <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ca:	f000 f9e7 	bl	8000b9c <Error_Handler>
  }


}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001c4 	.word	0x200001c4
 80007dc:	40012000 	.word	0x40012000

080007e0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0



  DAC_ChannelConfTypeDef sConfig = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]


  hdac.Instance = DAC;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_DAC_Init+0x4c>)
 80007f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000830 <MX_DAC_Init+0x50>)
 80007f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	@ (800082c <MX_DAC_Init+0x4c>)
 80007f6:	f002 fb96 	bl	8002f26 <HAL_DAC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000800:	f000 f9cc 	bl	8000b9c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <MX_DAC_Init+0x4c>)
 8000814:	f002 fc20 	bl	8003058 <HAL_DAC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800081e:	f000 f9bd 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000020c 	.word	0x2000020c
 8000830:	40007400 	.word	0x40007400

08000834 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
void MX_ETH_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  heth.Instance = ETH;
 8000838:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <MX_ETH_Init+0x84>)
 800083a:	4a20      	ldr	r2, [pc, #128]	@ (80008bc <MX_ETH_Init+0x88>)
 800083c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800083e:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <MX_ETH_Init+0x8c>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000844:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <MX_ETH_Init+0x8c>)
 8000846:	2280      	movs	r2, #128	@ 0x80
 8000848:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800084a:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <MX_ETH_Init+0x8c>)
 800084c:	22e1      	movs	r2, #225	@ 0xe1
 800084e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_ETH_Init+0x8c>)
 8000852:	2200      	movs	r2, #0
 8000854:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_ETH_Init+0x8c>)
 8000858:	2200      	movs	r2, #0
 800085a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_ETH_Init+0x8c>)
 800085e:	2200      	movs	r2, #0
 8000860:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_ETH_Init+0x84>)
 8000864:	4a16      	ldr	r2, [pc, #88]	@ (80008c0 <MX_ETH_Init+0x8c>)
 8000866:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_ETH_Init+0x84>)
 800086a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800086e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_ETH_Init+0x84>)
 8000872:	4a14      	ldr	r2, [pc, #80]	@ (80008c4 <MX_ETH_Init+0x90>)
 8000874:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <MX_ETH_Init+0x84>)
 8000878:	4a13      	ldr	r2, [pc, #76]	@ (80008c8 <MX_ETH_Init+0x94>)
 800087a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_ETH_Init+0x84>)
 800087e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000882:	615a      	str	r2, [r3, #20]


  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000884:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <MX_ETH_Init+0x84>)
 8000886:	f002 fc37 	bl	80030f8 <HAL_ETH_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000890:	f000 f984 	bl	8000b9c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000894:	2238      	movs	r2, #56	@ 0x38
 8000896:	2100      	movs	r1, #0
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <MX_ETH_Init+0x98>)
 800089a:	f004 ffc9 	bl	8005830 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_ETH_Init+0x98>)
 80008a0:	2221      	movs	r2, #33	@ 0x21
 80008a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_ETH_Init+0x98>)
 80008a6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80008aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <MX_ETH_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000220 	.word	0x20000220
 80008bc:	40028000 	.word	0x40028000
 80008c0:	20000868 	.word	0x20000868
 80008c4:	20000124 	.word	0x20000124
 80008c8:	20000084 	.word	0x20000084
 80008cc:	2000004c 	.word	0x2000004c

080008d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_TIM2_Init+0x94>)
 80008ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_TIM2_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_TIM2_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = SAMPLE_RATE/(FACTOR_BUS);//SAMPLE_RATE/2;//FBUS/SAMPLE_RATE;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_TIM2_Init+0x94>)
 8000902:	f240 727d 	movw	r2, #1917	@ 0x77d
 8000906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_TIM2_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_TIM2_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000914:	4813      	ldr	r0, [pc, #76]	@ (8000964 <MX_TIM2_Init+0x94>)
 8000916:	f003 fe91 	bl	800463c <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000920:	f000 f93c 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_TIM2_Init+0x94>)
 8000932:	f003 ff3b 	bl	80047ac <HAL_TIM_ConfigClockSource>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800093c:	f000 f92e 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000940:	2320      	movs	r3, #32
 8000942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_TIM2_Init+0x94>)
 800094e:	f004 f92f 	bl	8004bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f920 	bl	8000b9c <Error_Handler>
  }


}
 800095c:	bf00      	nop
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200002d0 	.word	0x200002d0

08000968 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_USART3_UART_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <MX_USART3_UART_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <MX_USART3_UART_Init+0x4c>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_USART3_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_USART3_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <MX_USART3_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_USART3_UART_Init+0x4c>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <MX_USART3_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_USART3_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_USART3_UART_Init+0x4c>)
 80009a0:	f004 f982 	bl	8004ca8 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009aa:	f000 f8f7 	bl	8000b9c <Error_Handler>
  }


}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000318 	.word	0x20000318
 80009b8:	40004800 	.word	0x40004800

080009bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0


  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	2202      	movs	r2, #2
 80009de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	f003 f867 	bl	8003ad2 <HAL_PCD_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f000 f8c7 	bl	8000b9c <Error_Handler>
  }

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000035c 	.word	0x2000035c

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	@ 0x30
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	4b56      	ldr	r3, [pc, #344]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a55      	ldr	r2, [pc, #340]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b53      	ldr	r3, [pc, #332]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a4e      	ldr	r2, [pc, #312]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b48      	ldr	r3, [pc, #288]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a47      	ldr	r2, [pc, #284]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b45      	ldr	r3, [pc, #276]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b41      	ldr	r3, [pc, #260]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a40      	ldr	r2, [pc, #256]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b3e      	ldr	r3, [pc, #248]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a39      	ldr	r2, [pc, #228]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b37      	ldr	r3, [pc, #220]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b33      	ldr	r3, [pc, #204]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a32      	ldr	r2, [pc, #200]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b30      	ldr	r3, [pc, #192]	@ (8000b8c <MX_GPIO_Init+0x174>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000adc:	482c      	ldr	r0, [pc, #176]	@ (8000b90 <MX_GPIO_Init+0x178>)
 8000ade:	f002 ffdf 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEASURE_Pin_GPIO_Port,MEASURE_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ae8:	482a      	ldr	r0, [pc, #168]	@ (8000b94 <MX_GPIO_Init+0x17c>)
 8000aea:	f002 ffd9 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2140      	movs	r1, #64	@ 0x40
 8000af2:	4829      	ldr	r0, [pc, #164]	@ (8000b98 <MX_GPIO_Init+0x180>)
 8000af4:	f002 ffd4 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MEASURE_Pin */
  GPIO_InitStruct.Pin = MEASURE_Pin;
 8000af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MEASURE_Pin_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4820      	ldr	r0, [pc, #128]	@ (8000b94 <MX_GPIO_Init+0x17c>)
 8000b12:	f002 fe19 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4819      	ldr	r0, [pc, #100]	@ (8000b94 <MX_GPIO_Init+0x17c>)
 8000b2e:	f002 fe0b 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b32:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <MX_GPIO_Init+0x178>)
 8000b4c:	f002 fdfc 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b50:	2340      	movs	r3, #64	@ 0x40
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <MX_GPIO_Init+0x180>)
 8000b68:	f002 fdee 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b6c:	2380      	movs	r3, #128	@ 0x80
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	@ (8000b98 <MX_GPIO_Init+0x180>)
 8000b80:	f002 fde2 	bl	8003748 <HAL_GPIO_Init>

}
 8000b84:	bf00      	nop
 8000b86:	3730      	adds	r7, #48	@ 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40021800 	.word	0x40021800

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop

  __disable_irq();
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <Error_Handler+0x8>

08000ba8 <main>:
float32_t InputB[SAMPLES_PER_BLOCK]={0};
float32_t OutputA[SAMPLES_PER_BLOCK]={0};
float32_t OutputB[SAMPLES_PER_BLOCK]={0};


int main(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af02      	add	r7, sp, #8
	//uint32_t index;
//	float32_t max;
	Hard_Init();
 8000bae:	f7ff fd37 	bl	8000620 <Hard_Init>
	ADC_Init();
 8000bb2:	f7ff fd03 	bl	80005bc <ADC_Init>
	DAC_Init();
 8000bb6:	f7ff fd19 	bl	80005ec <DAC_Init>
	//arm_float_to_q31(float_iir_taps, iir_taps, IIR_TAP_NUM);

	//Inicializa los filtros
	//arm_fir_init_q31(&SFIR,FIR_TAP_NUM,fir_taps,fir_state,SAMPLES_PER_BLOCK);

	arm_fir_init_f32(&SFIR,FIR_TAP_NUM,float_fir_taps,fir_state,SAMPLES_PER_BLOCK);
 8000bba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <main+0xe4>)
 8000bc2:	4a33      	ldr	r2, [pc, #204]	@ (8000c90 <main+0xe8>)
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	4833      	ldr	r0, [pc, #204]	@ (8000c94 <main+0xec>)
 8000bc8:	f001 fb5f 	bl	800228a <arm_fir_init_f32>
	//arm_biquad_cascade_df1_init_f32(&SIIR,IIR_TAP_NUM/5,float_iir_taps,iir_state);


	while(true){
		if(estado==NO_PROCESAR){
 8000bcc:	4b32      	ldr	r3, [pc, #200]	@ (8000c98 <main+0xf0>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1fb      	bne.n	8000bcc <main+0x24>
			switch (filter){
 8000bd4:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <main+0xf4>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d02a      	beq.n	8000c32 <main+0x8a>
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	dc50      	bgt.n	8000c82 <main+0xda>
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <main+0x42>
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d038      	beq.n	8000c5a <main+0xb2>
 8000be8:	e04b      	b.n	8000c82 <main+0xda>
				case TALKTHROUGH:
						for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
 8000bea:	2300      	movs	r3, #0
 8000bec:	80fb      	strh	r3, [r7, #6]
 8000bee:	e01b      	b.n	8000c28 <main+0x80>
							if(estado==PROCESAR_A)OutputA[i]=InputA[i];
 8000bf0:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <main+0xf0>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d10a      	bne.n	8000c0e <main+0x66>
 8000bf8:	88fa      	ldrh	r2, [r7, #6]
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	4928      	ldr	r1, [pc, #160]	@ (8000ca0 <main+0xf8>)
 8000bfe:	0092      	lsls	r2, r2, #2
 8000c00:	440a      	add	r2, r1
 8000c02:	6812      	ldr	r2, [r2, #0]
 8000c04:	4927      	ldr	r1, [pc, #156]	@ (8000ca4 <main+0xfc>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	e009      	b.n	8000c22 <main+0x7a>
							else OutputB[i]=InputB[i];
 8000c0e:	88fa      	ldrh	r2, [r7, #6]
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	4925      	ldr	r1, [pc, #148]	@ (8000ca8 <main+0x100>)
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	440a      	add	r2, r1
 8000c18:	6812      	ldr	r2, [r2, #0]
 8000c1a:	4924      	ldr	r1, [pc, #144]	@ (8000cac <main+0x104>)
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	601a      	str	r2, [r3, #0]
						for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	3301      	adds	r3, #1
 8000c26:	80fb      	strh	r3, [r7, #6]
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c2e:	d3df      	bcc.n	8000bf0 <main+0x48>
						}
						break;
 8000c30:	e027      	b.n	8000c82 <main+0xda>

				case IIR:
						if(estado==PROCESAR_A){
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <main+0xf0>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d107      	bne.n	8000c4a <main+0xa2>
							filter_bicuad_cascade(&SIIR, InputA, OutputA, SAMPLES_PER_BLOCK);
 8000c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <main+0xfc>)
 8000c40:	4917      	ldr	r1, [pc, #92]	@ (8000ca0 <main+0xf8>)
 8000c42:	481b      	ldr	r0, [pc, #108]	@ (8000cb0 <main+0x108>)
 8000c44:	f000 fae3 	bl	800120e <arm_biquad_cascade_df1_f32>
						}else {
							filter_bicuad_cascade(&SIIR, InputB, OutputB, SAMPLES_PER_BLOCK);
						}
						break;
 8000c48:	e01b      	b.n	8000c82 <main+0xda>
							filter_bicuad_cascade(&SIIR, InputB, OutputB, SAMPLES_PER_BLOCK);
 8000c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4e:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <main+0x104>)
 8000c50:	4915      	ldr	r1, [pc, #84]	@ (8000ca8 <main+0x100>)
 8000c52:	4817      	ldr	r0, [pc, #92]	@ (8000cb0 <main+0x108>)
 8000c54:	f000 fadb 	bl	800120e <arm_biquad_cascade_df1_f32>
						break;
 8000c58:	e013      	b.n	8000c82 <main+0xda>

				case FIR:
						if(estado==PROCESAR_A){
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <main+0xf0>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d107      	bne.n	8000c72 <main+0xca>
							arm_fir_f32(&SFIR,InputA, OutputA, SAMPLES_PER_BLOCK);
 8000c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca4 <main+0xfc>)
 8000c68:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <main+0xf8>)
 8000c6a:	480a      	ldr	r0, [pc, #40]	@ (8000c94 <main+0xec>)
 8000c6c:	f000 fc4a 	bl	8001504 <arm_fir_f32>
						}else {
							arm_fir_f32(&SFIR,InputB, OutputB , SAMPLES_PER_BLOCK);
}
						break;
 8000c70:	e006      	b.n	8000c80 <main+0xd8>
							arm_fir_f32(&SFIR,InputB, OutputB , SAMPLES_PER_BLOCK);
 8000c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c76:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <main+0x104>)
 8000c78:	490b      	ldr	r1, [pc, #44]	@ (8000ca8 <main+0x100>)
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <main+0xec>)
 8000c7c:	f000 fc42 	bl	8001504 <arm_fir_f32>
						break;
 8000c80:	bf00      	nop
			}
			estado=NO_PROCESAR;
 8000c82:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <main+0xf0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
		if(estado==NO_PROCESAR){
 8000c88:	e7a0      	b.n	8000bcc <main+0x24>
 8000c8a:	bf00      	nop
 8000c8c:	20000888 	.word	0x20000888
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000870 	.word	0x20000870
 8000c98:	20000048 	.word	0x20000048
 8000c9c:	2000086e 	.word	0x2000086e
 8000ca0:	200018a4 	.word	0x200018a4
 8000ca4:	200038a4 	.word	0x200038a4
 8000ca8:	200028a4 	.word	0x200028a4
 8000cac:	200048a4 	.word	0x200048a4
 8000cb0:	2000087c 	.word	0x2000087c

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d00 <HAL_MspInit+0x4c>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a08      	ldr	r2, [pc, #32]	@ (8000d00 <HAL_MspInit+0x4c>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_ADC_MspInit+0x7c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d127      	bne.n	8000d76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	4a15      	ldr	r2, [pc, #84]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <HAL_ADC_MspInit+0x80>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d62:	2303      	movs	r3, #3
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <HAL_ADC_MspInit+0x84>)
 8000d72:	f002 fce9 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	@ 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40012000 	.word	0x40012000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <HAL_DAC_MspInit+0x7c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d127      	bne.n	8000dfe <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_DAC_MspInit+0x80>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a15      	ldr	r2, [pc, #84]	@ (8000e0c <HAL_DAC_MspInit+0x80>)
 8000db8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <HAL_DAC_MspInit+0x80>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <HAL_DAC_MspInit+0x80>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e0c <HAL_DAC_MspInit+0x80>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <HAL_DAC_MspInit+0x80>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000de6:	2310      	movs	r3, #16
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <HAL_DAC_MspInit+0x84>)
 8000dfa:	f002 fca5 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40007400 	.word	0x40007400
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08e      	sub	sp, #56	@ 0x38
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a55      	ldr	r2, [pc, #340]	@ (8000f88 <HAL_ETH_MspInit+0x174>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	f040 80a4 	bne.w	8000f80 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	4b53      	ldr	r3, [pc, #332]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	4a52      	ldr	r2, [pc, #328]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e48:	4b50      	ldr	r3, [pc, #320]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e50:	623b      	str	r3, [r7, #32]
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	4b4c      	ldr	r3, [pc, #304]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e64:	4b49      	ldr	r3, [pc, #292]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	4b45      	ldr	r3, [pc, #276]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	4a44      	ldr	r2, [pc, #272]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e80:	4b42      	ldr	r3, [pc, #264]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	4b3e      	ldr	r3, [pc, #248]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e94:	4a3d      	ldr	r2, [pc, #244]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	4b37      	ldr	r3, [pc, #220]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	4a36      	ldr	r2, [pc, #216]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb8:	4b34      	ldr	r3, [pc, #208]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4b30      	ldr	r3, [pc, #192]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	4a28      	ldr	r2, [pc, #160]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef0:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <HAL_ETH_MspInit+0x178>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000efc:	2332      	movs	r3, #50	@ 0x32
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0c:	230b      	movs	r3, #11
 8000f0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	481e      	ldr	r0, [pc, #120]	@ (8000f90 <HAL_ETH_MspInit+0x17c>)
 8000f18:	f002 fc16 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f1c:	2386      	movs	r3, #134	@ 0x86
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f2c:	230b      	movs	r3, #11
 8000f2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4817      	ldr	r0, [pc, #92]	@ (8000f94 <HAL_ETH_MspInit+0x180>)
 8000f38:	f002 fc06 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4e:	230b      	movs	r3, #11
 8000f50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	480f      	ldr	r0, [pc, #60]	@ (8000f98 <HAL_ETH_MspInit+0x184>)
 8000f5a:	f002 fbf5 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f5e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f70:	230b      	movs	r3, #11
 8000f72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4808      	ldr	r0, [pc, #32]	@ (8000f9c <HAL_ETH_MspInit+0x188>)
 8000f7c:	f002 fbe4 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3738      	adds	r7, #56	@ 0x38
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40028000 	.word	0x40028000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40021800 	.word	0x40021800

08000fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fb0:	d10d      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <HAL_TIM_Base_MspInit+0x3c>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <HAL_TIM_Base_MspInit+0x3c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_TIM_Base_MspInit+0x3c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <HAL_UART_MspInit+0x84>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12c      	bne.n	800105c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <HAL_UART_MspInit+0x88>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	4a17      	ldr	r2, [pc, #92]	@ (8001068 <HAL_UART_MspInit+0x88>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001010:	6413      	str	r3, [r2, #64]	@ 0x40
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <HAL_UART_MspInit+0x88>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <HAL_UART_MspInit+0x88>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a10      	ldr	r2, [pc, #64]	@ (8001068 <HAL_UART_MspInit+0x88>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <HAL_UART_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800103a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800104c:	2307      	movs	r3, #7
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <HAL_UART_MspInit+0x8c>)
 8001058:	f002 fb76 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	@ 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40004800 	.word	0x40004800
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00

08001070 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001090:	d13f      	bne.n	8001112 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <HAL_PCD_MspInit+0xac>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a20      	ldr	r2, [pc, #128]	@ (800111c <HAL_PCD_MspInit+0xac>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <HAL_PCD_MspInit+0xac>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ae:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010c0:	230a      	movs	r3, #10
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4815      	ldr	r0, [pc, #84]	@ (8001120 <HAL_PCD_MspInit+0xb0>)
 80010cc:	f002 fb3c 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	480e      	ldr	r0, [pc, #56]	@ (8001120 <HAL_PCD_MspInit+0xb0>)
 80010e6:	f002 fb2f 	bl	8003748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_PCD_MspInit+0xac>)
 80010ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_PCD_MspInit+0xac>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f4:	6353      	str	r3, [r2, #52]	@ 0x34
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <HAL_PCD_MspInit+0xac>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	4a07      	ldr	r2, [pc, #28]	@ (800111c <HAL_PCD_MspInit+0xac>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001104:	6453      	str	r3, [r2, #68]	@ 0x44
 8001106:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_PCD_MspInit+0xac>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	@ 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <NMI_Handler+0x4>

0800112c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <MemManage_Handler+0x4>

0800113c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <UsageFault_Handler+0x4>

0800114c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117a:	f001 f8f7 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <ADC_IRQHandler+0x10>)
 800118a:	f001 fa55 	bl	8002638 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200001c4 	.word	0x200001c4

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011c2:	490e      	ldr	r1, [pc, #56]	@ (80011fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d8:	4c0b      	ldr	r4, [pc, #44]	@ (8001208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e6:	f7ff ffd7 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f004 fb29 	bl	8005840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fcdb 	bl	8000ba8 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001200:	080058c8 	.word	0x080058c8
  ldr r2, =_sbss
 8001204:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001208:	200058a8 	.word	0x200058a8

0800120c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <CAN1_RX0_IRQHandler>

0800120e <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 800120e:	b480      	push	{r7}
 8001210:	b097      	sub	sp, #92	@ 0x5c
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]
  float32_t *pIn = pSrc;                         /*  source pointer            */
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	657b      	str	r3, [r7, #84]	@ 0x54
  float32_t *pOut = pDst;                        /*  destination pointer       */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	653b      	str	r3, [r7, #80]	@ 0x50
  float32_t *pState = S->pState;                 /*  pState pointer            */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float32_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	64bb      	str	r3, [r7, #72]	@ 0x48
  float32_t acc;                                 /*  Simulates the accumulator */
  float32_t b0, b1, b2, a1, a2;                  /*  Filter coefficients       */
  float32_t Xn1, Xn2, Yn1, Yn2;                  /*  Filter pState variables   */
  float32_t Xn;                                  /*  temporary input           */
  uint32_t sample, stage = S->numStages;         /*  loop counters             */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 8001236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001238:	1d1a      	adds	r2, r3, #4
 800123a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    b1 = *pCoeffs++;
 8001240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001242:	1d1a      	adds	r2, r3, #4
 8001244:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
    b2 = *pCoeffs++;
 800124a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800124c:	1d1a      	adds	r2, r3, #4
 800124e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
    a1 = *pCoeffs++;
 8001254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001256:	1d1a      	adds	r2, r3, #4
 8001258:	64ba      	str	r2, [r7, #72]	@ 0x48
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	623b      	str	r3, [r7, #32]
    a2 = *pCoeffs++;
 800125e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001260:	1d1a      	adds	r2, r3, #4
 8001262:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	61fb      	str	r3, [r7, #28]

    /* Reading the pState values */
    Xn1 = pState[0];
 8001268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	647b      	str	r3, [r7, #68]	@ 0x44
    Xn2 = pState[1];
 800126e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40
    Yn1 = pState[2];
 8001274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Yn2 = pState[3];
 800127a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	63bb      	str	r3, [r7, #56]	@ 0x38
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     */

    sample = blockSize >> 2u;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	637b      	str	r3, [r7, #52]	@ 0x34

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while(sample > 0u)
 8001286:	e0ce      	b.n	8001426 <arm_biquad_cascade_df1_f32+0x218>
    {
      /* Read the first input */
      Xn = *pIn++;
 8001288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800128a:	1d1a      	adds	r2, r3, #4
 800128c:	657a      	str	r2, [r7, #84]	@ 0x54
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn2 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8001292:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001296:	edd7 7a06 	vldr	s15, [r7, #24]
 800129a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800129e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80012a2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80012a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80012b2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80012b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012be:	edd7 6a08 	vldr	s13, [r7, #32]
 80012c2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80012c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80012d2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80012d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012de:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn2;
 80012e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012e4:	1d1a      	adds	r2, r3, #4
 80012e6:	653a      	str	r2, [r7, #80]	@ 0x50
 80012e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012ea:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the second input */
      Xn2 = *pIn++;
 80012ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012ee:	1d1a      	adds	r2, r3, #4
 80012f0:	657a      	str	r2, [r7, #84]	@ 0x54
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	643b      	str	r3, [r7, #64]	@ 0x40

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn1 = (b0 * Xn2) + (b1 * Xn) + (b2 * Xn1) + (a1 * Yn2) + (a2 * Yn1);
 80012f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80012fa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80012fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001302:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001306:	edd7 7a06 	vldr	s15, [r7, #24]
 800130a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001312:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001316:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800131a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001322:	edd7 6a08 	vldr	s13, [r7, #32]
 8001326:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800132a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001332:	edd7 6a07 	vldr	s13, [r7, #28]
 8001336:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800133a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001342:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn1;
 8001346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001348:	1d1a      	adds	r2, r3, #4
 800134a:	653a      	str	r2, [r7, #80]	@ 0x50
 800134c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800134e:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the third input */
      Xn1 = *pIn++;
 8001350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001352:	1d1a      	adds	r2, r3, #4
 8001354:	657a      	str	r2, [r7, #84]	@ 0x54
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	647b      	str	r3, [r7, #68]	@ 0x44

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn2 = (b0 * Xn1) + (b1 * Xn2) + (b2 * Xn) + (a1 * Yn1) + (a2 * Yn2);
 800135a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800135e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001366:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800136a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800136e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001372:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001376:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800137a:	edd7 7a06 	vldr	s15, [r7, #24]
 800137e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001382:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001386:	edd7 6a08 	vldr	s13, [r7, #32]
 800138a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800138e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001396:	edd7 6a07 	vldr	s13, [r7, #28]
 800139a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800139e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn2;
 80013aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013ac:	1d1a      	adds	r2, r3, #4
 80013ae:	653a      	str	r2, [r7, #80]	@ 0x50
 80013b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013b2:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the forth input */
      Xn = *pIn++;
 80013b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013b6:	1d1a      	adds	r2, r3, #4
 80013b8:	657a      	str	r2, [r7, #84]	@ 0x54
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn1 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn2) + (a2 * Yn1);
 80013be:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ca:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80013ce:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013da:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80013de:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80013e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80013ee:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80013fe:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn1;
 800140e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001410:	1d1a      	adds	r2, r3, #4
 8001412:	653a      	str	r2, [r7, #80]	@ 0x50
 8001414:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001416:	601a      	str	r2, [r3, #0]
      /* The states should be updated as:  */
      /* Xn2 = Xn1    */
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */
      Xn2 = Xn1;
 8001418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800141a:	643b      	str	r3, [r7, #64]	@ 0x40
      Xn1 = Xn;
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	647b      	str	r3, [r7, #68]	@ 0x44

      /* decrement the loop counter */
      sample--;
 8001420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001422:	3b01      	subs	r3, #1
 8001424:	637b      	str	r3, [r7, #52]	@ 0x34
    while(sample > 0u)
 8001426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001428:	2b00      	cmp	r3, #0
 800142a:	f47f af2d 	bne.w	8001288 <arm_biquad_cascade_df1_f32+0x7a>

    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    sample = blockSize & 0x3u;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	637b      	str	r3, [r7, #52]	@ 0x34

    while(sample > 0u)
 8001436:	e03c      	b.n	80014b2 <arm_biquad_cascade_df1_f32+0x2a4>
    {
      /* Read the input */
      Xn = *pIn++;
 8001438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800143a:	1d1a      	adds	r2, r3, #4
 800143c:	657a      	str	r2, [r7, #84]	@ 0x54
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8001442:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001446:	edd7 7a06 	vldr	s15, [r7, #24]
 800144a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800144e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001452:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001462:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800146e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001472:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001482:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148e:	edc7 7a05 	vstr	s15, [r7, #20]

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = acc;
 8001492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001494:	1d1a      	adds	r2, r3, #4
 8001496:	653a      	str	r2, [r7, #80]	@ 0x50
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]
      /* The states should be updated as:    */
      /* Xn2 = Xn1    */
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */
      Xn2 = Xn1;
 800149c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800149e:	643b      	str	r3, [r7, #64]	@ 0x40
      Xn1 = Xn;
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	647b      	str	r3, [r7, #68]	@ 0x44
      Yn2 = Yn1;
 80014a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      Yn1 = acc;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* decrement the loop counter */
      sample--;
 80014ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ae:	3b01      	subs	r3, #1
 80014b0:	637b      	str	r3, [r7, #52]	@ 0x34
    while(sample > 0u)
 80014b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1bf      	bne.n	8001438 <arm_biquad_cascade_df1_f32+0x22a>

    }

    /*  Store the updated state variables back into the pState array */
    *pState++ = Xn1;
 80014b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014ba:	1d1a      	adds	r2, r3, #4
 80014bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80014be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80014c0:	601a      	str	r2, [r3, #0]
    *pState++ = Xn2;
 80014c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014c4:	1d1a      	adds	r2, r3, #4
 80014c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80014c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014ca:	601a      	str	r2, [r3, #0]
    *pState++ = Yn1;
 80014cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014ce:	1d1a      	adds	r2, r3, #4
 80014d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80014d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014d4:	601a      	str	r2, [r3, #0]
    *pState++ = Yn2;
 80014d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014d8:	1d1a      	adds	r2, r3, #4
 80014da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80014dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80014de:	601a      	str	r2, [r3, #0]

    /*  The first stage goes from the input buffer to the output buffer. */
    /*  Subsequent numStages  occur in-place in the output buffer */
    pIn = pDst;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Reset the output pointer */
    pOut = pDst;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	653b      	str	r3, [r7, #80]	@ 0x50

    /* decrement the loop counter */
    stage--;
 80014e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ea:	3b01      	subs	r3, #1
 80014ec:	633b      	str	r3, [r7, #48]	@ 0x30

  } while(stage > 0u);
 80014ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f47f aea0 	bne.w	8001236 <arm_biquad_cascade_df1_f32+0x28>

  } while(stage > 0u);

#endif /*   #ifndef ARM_MATH_CM0_FAMILY         */

}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	375c      	adds	r7, #92	@ 0x5c
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 8001504:	b480      	push	{r7}
 8001506:	b0a7      	sub	sp, #156	@ 0x9c
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	63bb      	str	r3, [r7, #56]	@ 0x38
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */
   float32_t p0,p1,p2,p3,p4,p5,p6,p7;             /* Temporary product values */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800152c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001530:	3b01      	subs	r3, #1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]  
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]  
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]  
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]  
    */
   blkCnt = blockSize >> 3;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	643b      	str	r3, [r7, #64]	@ 0x40

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.  
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 8001540:	f000 bdf8 	b.w	8002134 <arm_fir_f32+0xc30>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	1d13      	adds	r3, r2, #4
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800154e:	1d19      	adds	r1, r3, #4
 8001550:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	1d13      	adds	r3, r2, #4
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001562:	1d19      	adds	r1, r3, #4
 8001564:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	1d13      	adds	r3, r2, #4
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001576:	1d19      	adds	r1, r3, #4
 8001578:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	1d13      	adds	r3, r2, #4
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800158a:	1d19      	adds	r1, r3, #4
 800158c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      acc1 = 0.0f;
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      acc2 = 0.0f;
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      acc3 = 0.0f;
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	67bb      	str	r3, [r7, #120]	@ 0x78
      acc4 = 0.0f;
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	677b      	str	r3, [r7, #116]	@ 0x74
      acc5 = 0.0f;
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	673b      	str	r3, [r7, #112]	@ 0x70
      acc6 = 0.0f;
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
      acc7 = 0.0f;		
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	66bb      	str	r3, [r7, #104]	@ 0x68

      /* Initialize state pointer */
      px = pState;
 80015c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80015cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Initialize coeff pointer */
      pb = (pCoeffs);		
 80015d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   
      /* This is separated from the others to avoid 
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	1d13      	adds	r3, r2, #4
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015e0:	1d19      	adds	r1, r3, #4
 80015e2:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	1d13      	adds	r3, r2, #4
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015f4:	1d19      	adds	r1, r3, #4
 80015f6:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	1d13      	adds	r3, r2, #4
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001608:	1d19      	adds	r1, r3, #4
 800160a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	1d13      	adds	r3, r2, #4
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800161c:	1d19      	adds	r1, r3, #4
 800161e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 8001626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800162a:	1d1a      	adds	r2, r3, #4
 800162c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	667b      	str	r3, [r7, #100]	@ 0x64
      x1 = *px++;
 8001634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001638:	1d1a      	adds	r2, r3, #4
 800163a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	663b      	str	r3, [r7, #96]	@ 0x60
      x2 = *px++;
 8001642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001646:	1d1a      	adds	r2, r3, #4
 8001648:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	65fb      	str	r3, [r7, #92]	@ 0x5c
      x3 = *px++;
 8001650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001654:	1d1a      	adds	r2, r3, #4
 8001656:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	65bb      	str	r3, [r7, #88]	@ 0x58
      x4 = *px++;
 800165e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001662:	1d1a      	adds	r2, r3, #4
 8001664:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	657b      	str	r3, [r7, #84]	@ 0x54
      x5 = *px++;
 800166c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001670:	1d1a      	adds	r2, r3, #4
 8001672:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	653b      	str	r3, [r7, #80]	@ 0x50
      x6 = *px++;
 800167a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800167e:	1d1a      	adds	r2, r3, #4
 8001680:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3u;
 8001688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	647b      	str	r3, [r7, #68]	@ 0x44
      
      /* Loop over the number of taps.  Unroll by a factor of 8.  
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
 800168e:	f000 bc73 	b.w	8001f78 <arm_fir_f32+0xa74>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8001692:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001696:	1d1a      	adds	r2, r3, #4
 8001698:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 80016a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016a4:	1d1a      	adds	r2, r3, #4
 80016a6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	633b      	str	r3, [r7, #48]	@ 0x30

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         p0 = x0 * c0;
 80016ae:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80016b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80016b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         p1 = x1 * c0;
 80016be:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80016c2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80016c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ca:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         p2 = x2 * c0;
 80016ce:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80016d2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80016d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         p3 = x3 * c0;
 80016de:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80016e2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	edc7 7a08 	vstr	s15, [r7, #32]

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         p4 = x4 * c0;
 80016ee:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80016f2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80016f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fa:	edc7 7a07 	vstr	s15, [r7, #28]

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         p5 = x5 * c0;
 80016fe:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001702:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170a:	edc7 7a06 	vstr	s15, [r7, #24]

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         p6 = x6 * c0;
 800170e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001712:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171a:	edc7 7a05 	vstr	s15, [r7, #20]

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         p7 = x7 * c0;
 800171e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001722:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	edc7 7a04 	vstr	s15, [r7, #16]
         
         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 800172e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001732:	1d1a      	adds	r2, r3, #4
 8001734:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 800173c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001740:	1d1a      	adds	r2, r3, #4
 8001742:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	667b      	str	r3, [r7, #100]	@ 0x64
         
         acc0 += p0;
 800174a:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 800174e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 800175a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800175e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 800176a:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800176e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001776:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 800177a:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800177e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001786:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 800178a:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800178e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001796:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 800179a:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800179e:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 80017aa:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80017ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80017b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b6:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 80017ba:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80017be:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68


         /* Perform the multiply-accumulate */
         p0 = x1 * c0;
 80017ca:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80017ce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x2 * c0;   
 80017da:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80017de:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x3 * c0;   
 80017ea:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80017ee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x4 * c0;   
 80017fa:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80017fe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001806:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x5 * c0;   
 800180a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800180e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x6 * c0;   
 800181a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800181e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001826:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x7 * c0;   
 800182a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800182e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001836:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x0 * c0;   
 800183a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800183e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	edc7 7a04 	vstr	s15, [r7, #16]
         
         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 800184a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800184e:	1d1a      	adds	r2, r3, #4
 8001850:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 8001858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800185c:	1d1a      	adds	r2, r3, #4
 800185e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	663b      	str	r3, [r7, #96]	@ 0x60
         
         acc0 += p0;
 8001866:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 800186a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800186e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001872:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001876:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800187a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001882:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001886:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800188a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800188e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001892:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001896:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800189a:	edd7 7a08 	vldr	s15, [r7, #32]
 800189e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a2:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 80018a6:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80018aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80018ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 80018b6:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80018ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80018be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c2:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 80018c6:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80018ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80018ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 80018d6:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80018da:	edd7 7a04 	vldr	s15, [r7, #16]
 80018de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x2 * c0;
 80018e6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80018ea:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x3 * c0;   
 80018f6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80018fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001902:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x4 * c0;   
 8001906:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800190a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001912:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x5 * c0;   
 8001916:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800191a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800191e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001922:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x6 * c0;   
 8001926:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800192a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800192e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001932:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x7 * c0;   
 8001936:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800193a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800193e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001942:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x0 * c0;   
 8001946:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800194a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001952:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x1 * c0;   
 8001956:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800195a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800195e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001962:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001966:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800196a:	1d1a      	adds	r2, r3, #4
 800196c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 8001974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001978:	1d1a      	adds	r2, r3, #4
 800197a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	65fb      	str	r3, [r7, #92]	@ 0x5c
         
         acc0 += p0;
 8001982:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001986:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800198a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001992:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001996:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800199a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 80019a2:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80019a6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 80019b2:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80019b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80019ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019be:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 80019c2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80019c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80019ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ce:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 80019d2:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80019d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019de:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 80019e2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80019e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ee:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 80019f2:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80019f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fe:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x3 * c0;
 8001a02:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001a06:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x4 * c0;   
 8001a12:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001a16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x5 * c0;   
 8001a22:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001a26:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x6 * c0;   
 8001a32:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a36:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x7 * c0;   
 8001a42:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001a46:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x0 * c0;   
 8001a52:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001a56:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5e:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x1 * c0;   
 8001a62:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001a66:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x2 * c0;   
 8001a72:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001a76:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7e:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a86:	1d1a      	adds	r2, r3, #4
 8001a88:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 8001a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a94:	1d1a      	adds	r2, r3, #4
 8001a96:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
         
         acc0 += p0;
 8001a9e:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001aa2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aaa:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001aae:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001ab2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001abe:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001ac2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001ace:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001ad2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ada:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001ade:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001ae2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aea:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001aee:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001af2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afa:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001afe:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001b02:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001b0e:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001b12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x4 * c0;
 8001b1e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001b22:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x5 * c0;   
 8001b2e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b32:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x6 * c0;   
 8001b3e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b42:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x7 * c0;   
 8001b4e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001b52:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5a:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x0 * c0;   
 8001b5e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001b62:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6a:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x1 * c0;   
 8001b6e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001b72:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7a:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x2 * c0;   
 8001b7e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001b82:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8a:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x3 * c0;   
 8001b8e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001b92:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9a:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ba2:	1d1a      	adds	r2, r3, #4
 8001ba4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 8001bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb0:	1d1a      	adds	r2, r3, #4
 8001bb2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	657b      	str	r3, [r7, #84]	@ 0x54
         
         acc0 += p0;
 8001bba:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001bbe:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc6:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001bca:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001bce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001bda:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001bde:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be6:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001bea:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001bee:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001bfa:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001bfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c06:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001c0a:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001c0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001c1a:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001c1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c26:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001c2a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001c2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c36:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x5 * c0;
 8001c3a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c3e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c46:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x6 * c0;   
 8001c4a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001c4e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c56:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x7 * c0;   
 8001c5a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c5e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c66:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x0 * c0;   
 8001c6a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001c6e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x1 * c0;   
 8001c7a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001c7e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c86:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x2 * c0;   
 8001c8a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001c8e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c96:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x3 * c0;   
 8001c9a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001c9e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca6:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x4 * c0;   
 8001caa:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001cae:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb6:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001cbe:	1d1a      	adds	r2, r3, #4
 8001cc0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8001cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ccc:	1d1a      	adds	r2, r3, #4
 8001cce:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	653b      	str	r3, [r7, #80]	@ 0x50
         
         acc0 += p0;
 8001cd6:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001cda:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001ce6:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001cea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001cf6:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001cfa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001d06:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001d0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d12:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001d16:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001d1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d22:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001d26:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001d36:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001d3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d42:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001d46:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001d4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d52:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x6 * c0;
 8001d56:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001d5a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d62:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x7 * c0;   
 8001d66:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001d6a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d72:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x0 * c0;   
 8001d76:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001d7a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d82:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x1 * c0;   
 8001d86:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001d8a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d92:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x2 * c0;   
 8001d96:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001d9a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x3 * c0;   
 8001da6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001daa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x4 * c0;   
 8001db6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001dba:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc2:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x5 * c0;   
 8001dc6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001dca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd2:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dda:	1d1a      	adds	r2, r3, #4
 8001ddc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8001de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001de8:	1d1a      	adds	r2, r3, #4
 8001dea:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
         
         acc0 += p0;
 8001df2:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001df6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfe:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001e02:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001e06:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001e12:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001e16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001e22:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001e26:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001e32:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001e36:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001e42:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001e46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001e52:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001e62:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001e66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x7 * c0;
 8001e72:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001e76:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x0 * c0;   
 8001e82:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001e86:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x1 * c0;   
 8001e92:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001e96:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x2 * c0;   
 8001ea2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001ea6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x3 * c0;   
 8001eb2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001eb6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebe:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x4 * c0;   
 8001ec2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001ec6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ece:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x5 * c0;   
 8001ed2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001ed6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ede:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x6 * c0;   
 8001ee2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ee6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eee:	edc7 7a04 	vstr	s15, [r7, #16]

         tapCnt--;
 8001ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	647b      	str	r3, [r7, #68]	@ 0x44
         
         acc0 += p0;
 8001ef8:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001efc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001f08:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001f0c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f14:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001f18:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001f1c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f24:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001f28:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001f2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f34:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001f38:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f44:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001f48:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f54:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001f58:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f64:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001f68:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001f6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f74:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
      while(tapCnt > 0u)
 8001f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f47f ab89 	bne.w	8001692 <arm_fir_f32+0x18e>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 8001f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	647b      	str	r3, [r7, #68]	@ 0x44

      while(tapCnt > 0u)
 8001f88:	e09e      	b.n	80020c8 <arm_fir_f32+0xbc4>
      {
         /* Read coefficients */
         c0 = *(pb++);
 8001f8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f8e:	1d1a      	adds	r2, r3, #4
 8001f90:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Fetch 1 state variable */
         x7 = *(px++);
 8001f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f9c:	1d1a      	adds	r2, r3, #4
 8001f9e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	633b      	str	r3, [r7, #48]	@ 0x30

         /* Perform the multiply-accumulates */      
         p0 = x0 * c0;
 8001fa6:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001faa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x1 * c0;   
 8001fb6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001fba:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x2 * c0;   
 8001fc6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001fca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x3 * c0;   
 8001fd6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001fda:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe2:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x4 * c0;   
 8001fe6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001fea:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff2:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x5 * c0;   
 8001ff6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001ffa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002002:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x6 * c0;   
 8002006:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800200a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800200e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002012:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x7 * c0;   
 8002016:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800201a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800201e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002022:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Reuse the present sample states for next sample */
         x0 = x1;
 8002026:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002028:	667b      	str	r3, [r7, #100]	@ 0x64
         x1 = x2;
 800202a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800202c:	663b      	str	r3, [r7, #96]	@ 0x60
         x2 = x3;
 800202e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002030:	65fb      	str	r3, [r7, #92]	@ 0x5c
         x3 = x4;
 8002032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002034:	65bb      	str	r3, [r7, #88]	@ 0x58
         x4 = x5;
 8002036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002038:	657b      	str	r3, [r7, #84]	@ 0x54
         x5 = x6;
 800203a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800203c:	653b      	str	r3, [r7, #80]	@ 0x50
         x6 = x7;
 800203e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002040:	64fb      	str	r3, [r7, #76]	@ 0x4c
         
         acc0 += p0;
 8002042:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002046:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800204a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8002052:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002056:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800205a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8002062:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002066:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800206a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8002072:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002076:	edd7 7a08 	vldr	s15, [r7, #32]
 800207a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8002082:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002086:	edd7 7a07 	vldr	s15, [r7, #28]
 800208a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8002092:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002096:	edd7 7a06 	vldr	s15, [r7, #24]
 800209a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 80020a2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80020a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80020aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ae:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 80020b2:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80020b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020be:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Decrement the loop counter */
         tapCnt--;
 80020c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c4:	3b01      	subs	r3, #1
 80020c6:	647b      	str	r3, [r7, #68]	@ 0x44
      while(tapCnt > 0u)
 80020c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f47f af5d 	bne.w	8001f8a <arm_fir_f32+0xa86>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 80020d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020d4:	3320      	adds	r3, #32
 80020d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	1d1a      	adds	r2, r3, #4
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80020e4:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	1d1a      	adds	r2, r3, #4
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80020f0:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	1d1a      	adds	r2, r3, #4
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80020fa:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	1d1a      	adds	r2, r3, #4
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002104:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	1d1a      	adds	r2, r3, #4
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800210e:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	1d1a      	adds	r2, r3, #4
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002118:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1d1a      	adds	r2, r3, #4
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002122:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1d1a      	adds	r2, r3, #4
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800212c:	601a      	str	r2, [r3, #0]

      blkCnt--;
 800212e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002130:	3b01      	subs	r3, #1
 8002132:	643b      	str	r3, [r7, #64]	@ 0x40
   while(blkCnt > 0u)
 8002134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	f47f aa04 	bne.w	8001544 <arm_fir_f32+0x40>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.  
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	643b      	str	r3, [r7, #64]	@ 0x40

   while(blkCnt > 0u)
 8002144:	e040      	b.n	80021c8 <arm_fir_f32+0xcc4>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	1d13      	adds	r3, r2, #4
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002150:	1d19      	adds	r1, r3, #4
 8002152:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      /* Initialize state pointer */
      px = pState;
 8002162:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 800216a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800216c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      i = numTaps;
 8002170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002172:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 8002174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002178:	1d1a      	adds	r2, r3, #4
 800217a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800217e:	ed93 7a00 	vldr	s14, [r3]
 8002182:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002186:	1d1a      	adds	r2, r3, #4
 8002188:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002194:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219c:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         i--;
 80021a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021a2:	3b01      	subs	r3, #1
 80021a4:	64bb      	str	r3, [r7, #72]	@ 0x48

      } while(i > 0u);
 80021a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e3      	bne.n	8002174 <arm_fir_f32+0xc70>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1d1a      	adds	r2, r3, #4
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80021b6:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 80021b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021bc:	3304      	adds	r3, #4
 80021be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      blkCnt--;
 80021c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021c4:	3b01      	subs	r3, #1
 80021c6:	643b      	str	r3, [r7, #64]	@ 0x40
   while(blkCnt > 0u)
 80021c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1bb      	bne.n	8002146 <arm_fir_f32+0xc42>
   /* Processing is complete.  
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.  
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

   tapCnt = (numTaps - 1u) >> 2u;
 80021d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d8:	3b01      	subs	r3, #1
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	647b      	str	r3, [r7, #68]	@ 0x44

   /* copy data */
   while(tapCnt > 0u)
 80021de:	e032      	b.n	8002246 <arm_fir_f32+0xd42>
   {
      *pStateCurnt++ = *pState++;
 80021e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80021e4:	1d13      	adds	r3, r2, #4
 80021e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021ee:	1d19      	adds	r1, r3, #4
 80021f0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 80021f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80021fc:	1d13      	adds	r3, r2, #4
 80021fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002202:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002206:	1d19      	adds	r1, r3, #4
 8002208:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8002210:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002214:	1d13      	adds	r3, r2, #4
 8002216:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800221a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800221e:	1d19      	adds	r1, r3, #4
 8002220:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8002228:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800222c:	1d13      	adds	r3, r2, #4
 800222e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002232:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002236:	1d19      	adds	r1, r3, #4
 8002238:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8002240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002242:	3b01      	subs	r3, #1
 8002244:	647b      	str	r3, [r7, #68]	@ 0x44
   while(tapCnt > 0u)
 8002246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1c9      	bne.n	80021e0 <arm_fir_f32+0xcdc>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 800224c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224e:	3b01      	subs	r3, #1
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	647b      	str	r3, [r7, #68]	@ 0x44

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 8002256:	e00e      	b.n	8002276 <arm_fir_f32+0xd72>
   {
      *pStateCurnt++ = *pState++;
 8002258:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800225c:	1d13      	adds	r3, r2, #4
 800225e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002262:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002266:	1d19      	adds	r1, r3, #4
 8002268:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8002270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002272:	3b01      	subs	r3, #1
 8002274:	647b      	str	r3, [r7, #68]	@ 0x44
   while(tapCnt > 0u)
 8002276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ed      	bne.n	8002258 <arm_fir_f32+0xd54>
   }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	379c      	adds	r7, #156	@ 0x9c
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	460b      	mov	r3, r1
 8002298:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	897a      	ldrh	r2, [r7, #10]
 800229e:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 80022a6:	897a      	ldrh	r2, [r7, #10]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	4413      	add	r3, r2
 80022ac:	3b01      	subs	r3, #1
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2100      	movs	r1, #0
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f003 fabb 	bl	8005830 <memset>

  /* Assign state pointer */
  S->pState = pState;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	605a      	str	r2, [r3, #4]

}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002308 <HAL_Init+0x40>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <HAL_Init+0x40>)
 80022de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a07      	ldr	r2, [pc, #28]	@ (8002308 <HAL_Init+0x40>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 fdd7 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f000 f808 	bl	800230c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022fc:	f7fe fcda 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00

0800230c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002314:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <HAL_InitTick+0x54>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <HAL_InitTick+0x58>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fdef 	bl	8002f0e <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e00e      	b.n	8002358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d80a      	bhi.n	8002356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002340:	2200      	movs	r2, #0
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f000 fdb7 	bl	8002eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800234c:	4a06      	ldr	r2, [pc, #24]	@ (8002368 <HAL_InitTick+0x5c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000020 	.word	0x20000020
 8002364:	20000028 	.word	0x20000028
 8002368:	20000024 	.word	0x20000024

0800236c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_IncTick+0x20>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_IncTick+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a04      	ldr	r2, [pc, #16]	@ (8002390 <HAL_IncTick+0x24>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000028 	.word	0x20000028
 8002390:	200058a4 	.word	0x200058a4

08002394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <HAL_GetTick+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	200058a4 	.word	0x200058a4

080023ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff ffee 	bl	8002394 <HAL_GetTick>
 80023b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d005      	beq.n	80023d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <HAL_Delay+0x44>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4413      	add	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d2:	bf00      	nop
 80023d4:	f7ff ffde 	bl	8002394 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8f7      	bhi.n	80023d4 <HAL_Delay+0x28>
  {
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000028 	.word	0x20000028

080023f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e033      	b.n	8002472 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fc76 	bl	8000d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800243a:	f023 0302 	bic.w	r3, r3, #2
 800243e:	f043 0202 	orr.w	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fb5a 	bl	8002b00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	641a      	str	r2, [r3, #64]	@ 0x40
 8002462:	e001      	b.n	8002468 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Start_IT+0x1a>
 8002492:	2302      	movs	r3, #2
 8002494:	e0bd      	b.n	8002612 <HAL_ADC_Start_IT+0x196>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d018      	beq.n	80024de <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024bc:	4b58      	ldr	r3, [pc, #352]	@ (8002620 <HAL_ADC_Start_IT+0x1a4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a58      	ldr	r2, [pc, #352]	@ (8002624 <HAL_ADC_Start_IT+0x1a8>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9a      	lsrs	r2, r3, #18
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	f040 8085 	bne.w	80025f8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002518:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800252c:	d106      	bne.n	800253c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	f023 0206 	bic.w	r2, r3, #6
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
 800253a:	e002      	b.n	8002542 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800254a:	4b37      	ldr	r3, [pc, #220]	@ (8002628 <HAL_ADC_Start_IT+0x1ac>)
 800254c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002556:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002566:	f043 0320 	orr.w	r3, r3, #32
 800256a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b00      	cmp	r3, #0
 8002576:	d12a      	bne.n	80025ce <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a2b      	ldr	r2, [pc, #172]	@ (800262c <HAL_ADC_Start_IT+0x1b0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d015      	beq.n	80025ae <HAL_ADC_Start_IT+0x132>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a2a      	ldr	r2, [pc, #168]	@ (8002630 <HAL_ADC_Start_IT+0x1b4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d105      	bne.n	8002598 <HAL_ADC_Start_IT+0x11c>
 800258c:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <HAL_ADC_Start_IT+0x1ac>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a25      	ldr	r2, [pc, #148]	@ (8002634 <HAL_ADC_Start_IT+0x1b8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d136      	bne.n	8002610 <HAL_ADC_Start_IT+0x194>
 80025a2:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <HAL_ADC_Start_IT+0x1ac>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d130      	bne.n	8002610 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d129      	bne.n	8002610 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	e020      	b.n	8002610 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a16      	ldr	r2, [pc, #88]	@ (800262c <HAL_ADC_Start_IT+0x1b0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d11b      	bne.n	8002610 <HAL_ADC_Start_IT+0x194>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d114      	bne.n	8002610 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	e00b      	b.n	8002610 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	f043 0210 	orr.w	r2, r3, #16
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000020 	.word	0x20000020
 8002624:	431bde83 	.word	0x431bde83
 8002628:	40012300 	.word	0x40012300
 800262c:	40012000 	.word	0x40012000
 8002630:	40012100 	.word	0x40012100
 8002634:	40012200 	.word	0x40012200

08002638 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d049      	beq.n	8002702 <HAL_ADC_IRQHandler+0xca>
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d046      	beq.n	8002702 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d12b      	bne.n	80026f2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d127      	bne.n	80026f2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d119      	bne.n	80026f2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0220 	bic.w	r2, r2, #32
 80026cc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d105      	bne.n	80026f2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fd fef2 	bl	80004dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0212 	mvn.w	r2, #18
 8002700:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002710:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d057      	beq.n	80027c8 <HAL_ADC_IRQHandler+0x190>
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d054      	beq.n	80027c8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d139      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800274e:	2b00      	cmp	r3, #0
 8002750:	d006      	beq.n	8002760 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800275c:	2b00      	cmp	r3, #0
 800275e:	d12b      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800276a:	2b00      	cmp	r3, #0
 800276c:	d124      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11d      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002780:	2b00      	cmp	r3, #0
 8002782:	d119      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002792:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fa9d 	bl	8002cf8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f06f 020c 	mvn.w	r2, #12
 80027c6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d017      	beq.n	800280e <HAL_ADC_IRQHandler+0x1d6>
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d014      	beq.n	800280e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d10d      	bne.n	800280e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f837 	bl	8002872 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0201 	mvn.w	r2, #1
 800280c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800281c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d015      	beq.n	8002850 <HAL_ADC_IRQHandler+0x218>
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d012      	beq.n	8002850 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	f043 0202 	orr.w	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0220 	mvn.w	r2, #32
 800283e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f820 	bl	8002886 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0220 	mvn.w	r2, #32
 800284e:	601a      	str	r2, [r3, #0]
  }
}
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x1c>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e113      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x244>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b09      	cmp	r3, #9
 80028c6:	d925      	bls.n	8002914 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68d9      	ldr	r1, [r3, #12]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	4613      	mov	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4413      	add	r3, r2
 80028dc:	3b1e      	subs	r3, #30
 80028de:	2207      	movs	r2, #7
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43da      	mvns	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	400a      	ands	r2, r1
 80028ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68d9      	ldr	r1, [r3, #12]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	4618      	mov	r0, r3
 8002900:	4603      	mov	r3, r0
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4403      	add	r3, r0
 8002906:	3b1e      	subs	r3, #30
 8002908:	409a      	lsls	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	e022      	b.n	800295a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6919      	ldr	r1, [r3, #16]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	2207      	movs	r2, #7
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6919      	ldr	r1, [r3, #16]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	4618      	mov	r0, r3
 800294a:	4603      	mov	r3, r0
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4403      	add	r3, r0
 8002950:	409a      	lsls	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d824      	bhi.n	80029ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b05      	subs	r3, #5
 8002974:	221f      	movs	r2, #31
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	400a      	ands	r2, r1
 8002982:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	4618      	mov	r0, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	3b05      	subs	r3, #5
 800299e:	fa00 f203 	lsl.w	r2, r0, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80029aa:	e04c      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	d824      	bhi.n	80029fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	3b23      	subs	r3, #35	@ 0x23
 80029c6:	221f      	movs	r2, #31
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43da      	mvns	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	400a      	ands	r2, r1
 80029d4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	3b23      	subs	r3, #35	@ 0x23
 80029f0:	fa00 f203 	lsl.w	r2, r0, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80029fc:	e023      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3b41      	subs	r3, #65	@ 0x41
 8002a10:	221f      	movs	r2, #31
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	3b41      	subs	r3, #65	@ 0x41
 8002a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a46:	4b29      	ldr	r3, [pc, #164]	@ (8002aec <HAL_ADC_ConfigChannel+0x250>)
 8002a48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a28      	ldr	r2, [pc, #160]	@ (8002af0 <HAL_ADC_ConfigChannel+0x254>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10f      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x1d8>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b12      	cmp	r3, #18
 8002a5a:	d10b      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1d      	ldr	r2, [pc, #116]	@ (8002af0 <HAL_ADC_ConfigChannel+0x254>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d12b      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x23a>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1c      	ldr	r2, [pc, #112]	@ (8002af4 <HAL_ADC_ConfigChannel+0x258>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d003      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x1f4>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b11      	cmp	r3, #17
 8002a8e:	d122      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a11      	ldr	r2, [pc, #68]	@ (8002af4 <HAL_ADC_ConfigChannel+0x258>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d111      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab2:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <HAL_ADC_ConfigChannel+0x25c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a11      	ldr	r2, [pc, #68]	@ (8002afc <HAL_ADC_ConfigChannel+0x260>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	0c9a      	lsrs	r2, r3, #18
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ac8:	e002      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f9      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40012300 	.word	0x40012300
 8002af0:	40012000 	.word	0x40012000
 8002af4:	10000012 	.word	0x10000012
 8002af8:	20000020 	.word	0x20000020
 8002afc:	431bde83 	.word	0x431bde83

08002b00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b08:	4b79      	ldr	r3, [pc, #484]	@ (8002cf0 <ADC_Init+0x1f0>)
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	021a      	lsls	r2, r3, #8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6899      	ldr	r1, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	4a58      	ldr	r2, [pc, #352]	@ (8002cf4 <ADC_Init+0x1f4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ba6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6899      	ldr	r1, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	e00f      	b.n	8002bfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0202 	bic.w	r2, r2, #2
 8002c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6899      	ldr	r1, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7e1b      	ldrb	r3, [r3, #24]
 8002c18:	005a      	lsls	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01b      	beq.n	8002c64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	3b01      	subs	r3, #1
 8002c58:	035a      	lsls	r2, r3, #13
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	e007      	b.n	8002c74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	051a      	lsls	r2, r3, #20
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cb6:	025a      	lsls	r2, r3, #9
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6899      	ldr	r1, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	029a      	lsls	r2, r3, #10
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	40012300 	.word	0x40012300
 8002cf4:	0f000001 	.word	0x0f000001

08002cf8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <NVIC_SetPriorityGrouping+0x44>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <NVIC_SetPriorityGrouping+0x44>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	60d3      	str	r3, [r2, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d58:	4b04      	ldr	r3, [pc, #16]	@ (8002d6c <NVIC_GetPriorityGrouping+0x18>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 0307 	and.w	r3, r3, #7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4907      	ldr	r1, [pc, #28]	@ (8002da0 <NVIC_EnableIRQ+0x30>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2001      	movs	r0, #1
 8002d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da0b      	bge.n	8002dd0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	490c      	ldr	r1, [pc, #48]	@ (8002df0 <NVIC_SetPriority+0x4c>)
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	3b04      	subs	r3, #4
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dce:	e009      	b.n	8002de4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	4907      	ldr	r1, [pc, #28]	@ (8002df4 <NVIC_SetPriority+0x50>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	440b      	add	r3, r1
 8002de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00
 8002df4:	e000e100 	.word	0xe000e100

08002df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	@ 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf28      	it	cs
 8002e16:	2304      	movcs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d902      	bls.n	8002e28 <NVIC_EncodePriority+0x30>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3b03      	subs	r3, #3
 8002e26:	e000      	b.n	8002e2a <NVIC_EncodePriority+0x32>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	4313      	orrs	r3, r2
         );
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	@ 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e70:	d301      	bcc.n	8002e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <SysTick_Config+0x40>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7e:	210f      	movs	r1, #15
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7ff ff8e 	bl	8002da4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <SysTick_Config+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <SysTick_Config+0x40>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff2d 	bl	8002d0c <NVIC_SetPriorityGrouping>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ecc:	f7ff ff42 	bl	8002d54 <NVIC_GetPriorityGrouping>
 8002ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff8e 	bl	8002df8 <NVIC_EncodePriority>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff5d 	bl	8002da4 <NVIC_SetPriority>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff35 	bl	8002d70 <NVIC_EnableIRQ>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ffa2 	bl	8002e60 <SysTick_Config>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e014      	b.n	8002f62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	791b      	ldrb	r3, [r3, #4]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7fd ff1f 	bl	8000d8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	795b      	ldrb	r3, [r3, #5]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_DAC_Start+0x16>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e040      	b.n	8003002 <HAL_DAC_Start+0x98>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2201      	movs	r2, #1
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002fb4:	2b3c      	cmp	r3, #60	@ 0x3c
 8002fb6:	d11d      	bne.n	8002ff4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	e014      	b.n	8002ff4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	213c      	movs	r1, #60	@ 0x3c
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0202 	orr.w	r2, r2, #2
 8002ff2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	3308      	adds	r3, #8
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e004      	b.n	8003042 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	3314      	adds	r3, #20
 8003040:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	461a      	mov	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	795b      	ldrb	r3, [r3, #5]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_DAC_ConfigChannel+0x18>
 800306c:	2302      	movs	r3, #2
 800306e:	e03c      	b.n	80030ea <HAL_DAC_ConfigChannel+0x92>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2202      	movs	r2, #2
 800307a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4013      	ands	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	22c0      	movs	r2, #192	@ 0xc0
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	400a      	ands	r2, r1
 80030da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e06c      	b.n	80031e4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2223      	movs	r2, #35	@ 0x23
 8003118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fd fe79 	bl	8000e14 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	4b31      	ldr	r3, [pc, #196]	@ (80031ec <HAL_ETH_Init+0xf4>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	4a30      	ldr	r2, [pc, #192]	@ (80031ec <HAL_ETH_Init+0xf4>)
 800312c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003130:	6453      	str	r3, [r2, #68]	@ 0x44
 8003132:	4b2e      	ldr	r3, [pc, #184]	@ (80031ec <HAL_ETH_Init+0xf4>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800313e:	4b2c      	ldr	r3, [pc, #176]	@ (80031f0 <HAL_ETH_Init+0xf8>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a2b      	ldr	r2, [pc, #172]	@ (80031f0 <HAL_ETH_Init+0xf8>)
 8003144:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003148:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800314a:	4b29      	ldr	r3, [pc, #164]	@ (80031f0 <HAL_ETH_Init+0xf8>)
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	4927      	ldr	r1, [pc, #156]	@ (80031f0 <HAL_ETH_Init+0xf8>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003158:	4b25      	ldr	r3, [pc, #148]	@ (80031f0 <HAL_ETH_Init+0xf8>)
 800315a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003172:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003174:	f7ff f90e 	bl	8002394 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800317a:	e011      	b.n	80031a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800317c:	f7ff f90a 	bl	8002394 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800318a:	d909      	bls.n	80031a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2204      	movs	r2, #4
 8003190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	22e0      	movs	r2, #224	@ 0xe0
 8003198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e021      	b.n	80031e4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1e4      	bne.n	800317c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f958 	bl	8003468 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f9ff 	bl	80035bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fa55 	bl	800366e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	461a      	mov	r2, r3
 80031ca:	2100      	movs	r1, #0
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f9bd 	bl	800354c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2210      	movs	r2, #16
 80031de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40013800 	.word	0x40013800

080031f4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4b51      	ldr	r3, [pc, #324]	@ (8003350 <ETH_SetMACConfig+0x15c>)
 800320a:	4013      	ands	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	7c1b      	ldrb	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <ETH_SetMACConfig+0x28>
 8003216:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800321a:	e000      	b.n	800321e <ETH_SetMACConfig+0x2a>
 800321c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	7c5b      	ldrb	r3, [r3, #17]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <ETH_SetMACConfig+0x38>
 8003226:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800322a:	e000      	b.n	800322e <ETH_SetMACConfig+0x3a>
 800322c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800322e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003234:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	7fdb      	ldrb	r3, [r3, #31]
 800323a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800323c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003242:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	7f92      	ldrb	r2, [r2, #30]
 8003248:	2a00      	cmp	r2, #0
 800324a:	d102      	bne.n	8003252 <ETH_SetMACConfig+0x5e>
 800324c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003250:	e000      	b.n	8003254 <ETH_SetMACConfig+0x60>
 8003252:	2200      	movs	r2, #0
                        macconf->Speed |
 8003254:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	7f1b      	ldrb	r3, [r3, #28]
 800325a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800325c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003262:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	791b      	ldrb	r3, [r3, #4]
 8003268:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800326a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003272:	2a00      	cmp	r2, #0
 8003274:	d102      	bne.n	800327c <ETH_SetMACConfig+0x88>
 8003276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800327a:	e000      	b.n	800327e <ETH_SetMACConfig+0x8a>
 800327c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800327e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	7bdb      	ldrb	r3, [r3, #15]
 8003284:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003286:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800328c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003294:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003296:	4313      	orrs	r3, r2
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032ae:	2001      	movs	r0, #1
 80032b0:	f7ff f87c 	bl	80023ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80032ca:	4013      	ands	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80032da:	2a00      	cmp	r2, #0
 80032dc:	d101      	bne.n	80032e2 <ETH_SetMACConfig+0xee>
 80032de:	2280      	movs	r2, #128	@ 0x80
 80032e0:	e000      	b.n	80032e4 <ETH_SetMACConfig+0xf0>
 80032e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80032f2:	2a01      	cmp	r2, #1
 80032f4:	d101      	bne.n	80032fa <ETH_SetMACConfig+0x106>
 80032f6:	2208      	movs	r2, #8
 80032f8:	e000      	b.n	80032fc <ETH_SetMACConfig+0x108>
 80032fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80032fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003304:	2a01      	cmp	r2, #1
 8003306:	d101      	bne.n	800330c <ETH_SetMACConfig+0x118>
 8003308:	2204      	movs	r2, #4
 800330a:	e000      	b.n	800330e <ETH_SetMACConfig+0x11a>
 800330c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800330e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003316:	2a01      	cmp	r2, #1
 8003318:	d101      	bne.n	800331e <ETH_SetMACConfig+0x12a>
 800331a:	2202      	movs	r2, #2
 800331c:	e000      	b.n	8003320 <ETH_SetMACConfig+0x12c>
 800331e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003320:	4313      	orrs	r3, r2
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003338:	2001      	movs	r0, #1
 800333a:	f7ff f837 	bl	80023ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	619a      	str	r2, [r3, #24]
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	ff20810f 	.word	0xff20810f

08003354 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4b3d      	ldr	r3, [pc, #244]	@ (8003464 <ETH_SetDMAConfig+0x110>)
 800336e:	4013      	ands	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	7b1b      	ldrb	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <ETH_SetDMAConfig+0x2c>
 800337a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800337e:	e000      	b.n	8003382 <ETH_SetDMAConfig+0x2e>
 8003380:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	7b5b      	ldrb	r3, [r3, #13]
 8003386:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003388:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	7f52      	ldrb	r2, [r2, #29]
 800338e:	2a00      	cmp	r2, #0
 8003390:	d102      	bne.n	8003398 <ETH_SetDMAConfig+0x44>
 8003392:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003396:	e000      	b.n	800339a <ETH_SetDMAConfig+0x46>
 8003398:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800339a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	7b9b      	ldrb	r3, [r3, #14]
 80033a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	7f1b      	ldrb	r3, [r3, #28]
 80033ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80033b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	7f9b      	ldrb	r3, [r3, #30]
 80033b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033c8:	4313      	orrs	r3, r2
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033d8:	461a      	mov	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033ea:	2001      	movs	r0, #1
 80033ec:	f7fe ffde 	bl	80023ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033f8:	461a      	mov	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	791b      	ldrb	r3, [r3, #4]
 8003402:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003408:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800340e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003414:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800341c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800341e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003426:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800342c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003436:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800343a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003448:	2001      	movs	r0, #1
 800344a:	f7fe ffaf 	bl	80023ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6013      	str	r3, [r2, #0]
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	f8de3f23 	.word	0xf8de3f23

08003468 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b0a6      	sub	sp, #152	@ 0x98
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003476:	2301      	movs	r3, #1
 8003478:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800347c:	2300      	movs	r3, #0
 800347e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003480:	2300      	movs	r3, #0
 8003482:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800348c:	2300      	movs	r3, #0
 800348e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800349e:	2300      	movs	r3, #0
 80034a0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80034a4:	2300      	movs	r3, #0
 80034a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80034ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80034d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80034dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fe86 	bl	80031f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80034e8:	2301      	movs	r3, #1
 80034ea:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80034ec:	2301      	movs	r3, #1
 80034ee:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800350a:	2300      	movs	r3, #0
 800350c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003514:	2301      	movs	r3, #1
 8003516:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003518:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800351c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800351e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003522:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003528:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003530:	2300      	movs	r3, #0
 8003532:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003538:	f107 0308 	add.w	r3, r7, #8
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ff08 	bl	8003354 <ETH_SetDMAConfig>
}
 8003544:	bf00      	nop
 8003546:	3798      	adds	r7, #152	@ 0x98
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3305      	adds	r3, #5
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	3204      	adds	r2, #4
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <ETH_MACAddressConfig+0x68>)
 800356e:	4413      	add	r3, r2
 8003570:	461a      	mov	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3303      	adds	r3, #3
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	061a      	lsls	r2, r3, #24
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3302      	adds	r3, #2
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3301      	adds	r3, #1
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	4313      	orrs	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	7812      	ldrb	r2, [r2, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <ETH_MACAddressConfig+0x6c>)
 800359e:	4413      	add	r3, r2
 80035a0:	461a      	mov	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	6013      	str	r3, [r2, #0]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40028040 	.word	0x40028040
 80035b8:	40028044 	.word	0x40028044

080035bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e03e      	b.n	8003648 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68d9      	ldr	r1, [r3, #12]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	440b      	add	r3, r1
 80035da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2200      	movs	r2, #0
 80035e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2200      	movs	r2, #0
 80035ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2200      	movs	r2, #0
 80035f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	3206      	adds	r2, #6
 80035fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d80c      	bhi.n	800362c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68d9      	ldr	r1, [r3, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	440b      	add	r3, r1
 8003624:	461a      	mov	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	e004      	b.n	8003636 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3301      	adds	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d9bd      	bls.n	80035ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003660:	611a      	str	r2, [r3, #16]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	e046      	b.n	800370a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6919      	ldr	r1, [r3, #16]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	440b      	add	r3, r1
 800368c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2200      	movs	r2, #0
 8003698:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2200      	movs	r2, #0
 80036aa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2200      	movs	r2, #0
 80036b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80036b8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80036c0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	3212      	adds	r2, #18
 80036d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d80c      	bhi.n	80036fa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6919      	ldr	r1, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	440b      	add	r3, r1
 80036f2:	461a      	mov	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	60da      	str	r2, [r3, #12]
 80036f8:	e004      	b.n	8003704 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	461a      	mov	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3301      	adds	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d9b5      	bls.n	800367c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800373a:	60da      	str	r2, [r3, #12]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	@ 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e177      	b.n	8003a54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003764:	2201      	movs	r2, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	429a      	cmp	r2, r3
 800377e:	f040 8166 	bne.w	8003a4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d005      	beq.n	800379a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003796:	2b02      	cmp	r3, #2
 8003798:	d130      	bne.n	80037fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d0:	2201      	movs	r2, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 0201 	and.w	r2, r3, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b03      	cmp	r3, #3
 8003806:	d017      	beq.n	8003838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d123      	bne.n	800388c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	08da      	lsrs	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3208      	adds	r2, #8
 800384c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	220f      	movs	r2, #15
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	08da      	lsrs	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3208      	adds	r2, #8
 8003886:	69b9      	ldr	r1, [r7, #24]
 8003888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	2203      	movs	r2, #3
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0203 	and.w	r2, r3, #3
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80c0 	beq.w	8003a4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	4b66      	ldr	r3, [pc, #408]	@ (8003a6c <HAL_GPIO_Init+0x324>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	4a65      	ldr	r2, [pc, #404]	@ (8003a6c <HAL_GPIO_Init+0x324>)
 80038d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80038de:	4b63      	ldr	r3, [pc, #396]	@ (8003a6c <HAL_GPIO_Init+0x324>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ea:	4a61      	ldr	r2, [pc, #388]	@ (8003a70 <HAL_GPIO_Init+0x328>)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	3302      	adds	r3, #2
 80038f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	220f      	movs	r2, #15
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a58      	ldr	r2, [pc, #352]	@ (8003a74 <HAL_GPIO_Init+0x32c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d037      	beq.n	8003986 <HAL_GPIO_Init+0x23e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a57      	ldr	r2, [pc, #348]	@ (8003a78 <HAL_GPIO_Init+0x330>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d031      	beq.n	8003982 <HAL_GPIO_Init+0x23a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a56      	ldr	r2, [pc, #344]	@ (8003a7c <HAL_GPIO_Init+0x334>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02b      	beq.n	800397e <HAL_GPIO_Init+0x236>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a55      	ldr	r2, [pc, #340]	@ (8003a80 <HAL_GPIO_Init+0x338>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d025      	beq.n	800397a <HAL_GPIO_Init+0x232>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a54      	ldr	r2, [pc, #336]	@ (8003a84 <HAL_GPIO_Init+0x33c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01f      	beq.n	8003976 <HAL_GPIO_Init+0x22e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a53      	ldr	r2, [pc, #332]	@ (8003a88 <HAL_GPIO_Init+0x340>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d019      	beq.n	8003972 <HAL_GPIO_Init+0x22a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a52      	ldr	r2, [pc, #328]	@ (8003a8c <HAL_GPIO_Init+0x344>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_GPIO_Init+0x226>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a51      	ldr	r2, [pc, #324]	@ (8003a90 <HAL_GPIO_Init+0x348>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00d      	beq.n	800396a <HAL_GPIO_Init+0x222>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a50      	ldr	r2, [pc, #320]	@ (8003a94 <HAL_GPIO_Init+0x34c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <HAL_GPIO_Init+0x21e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a4f      	ldr	r2, [pc, #316]	@ (8003a98 <HAL_GPIO_Init+0x350>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <HAL_GPIO_Init+0x21a>
 800395e:	2309      	movs	r3, #9
 8003960:	e012      	b.n	8003988 <HAL_GPIO_Init+0x240>
 8003962:	230a      	movs	r3, #10
 8003964:	e010      	b.n	8003988 <HAL_GPIO_Init+0x240>
 8003966:	2308      	movs	r3, #8
 8003968:	e00e      	b.n	8003988 <HAL_GPIO_Init+0x240>
 800396a:	2307      	movs	r3, #7
 800396c:	e00c      	b.n	8003988 <HAL_GPIO_Init+0x240>
 800396e:	2306      	movs	r3, #6
 8003970:	e00a      	b.n	8003988 <HAL_GPIO_Init+0x240>
 8003972:	2305      	movs	r3, #5
 8003974:	e008      	b.n	8003988 <HAL_GPIO_Init+0x240>
 8003976:	2304      	movs	r3, #4
 8003978:	e006      	b.n	8003988 <HAL_GPIO_Init+0x240>
 800397a:	2303      	movs	r3, #3
 800397c:	e004      	b.n	8003988 <HAL_GPIO_Init+0x240>
 800397e:	2302      	movs	r3, #2
 8003980:	e002      	b.n	8003988 <HAL_GPIO_Init+0x240>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_GPIO_Init+0x240>
 8003986:	2300      	movs	r3, #0
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	f002 0203 	and.w	r2, r2, #3
 800398e:	0092      	lsls	r2, r2, #2
 8003990:	4093      	lsls	r3, r2
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003998:	4935      	ldr	r1, [pc, #212]	@ (8003a70 <HAL_GPIO_Init+0x328>)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	3302      	adds	r3, #2
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039a6:	4b3d      	ldr	r3, [pc, #244]	@ (8003a9c <HAL_GPIO_Init+0x354>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ca:	4a34      	ldr	r2, [pc, #208]	@ (8003a9c <HAL_GPIO_Init+0x354>)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039d0:	4b32      	ldr	r3, [pc, #200]	@ (8003a9c <HAL_GPIO_Init+0x354>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039f4:	4a29      	ldr	r2, [pc, #164]	@ (8003a9c <HAL_GPIO_Init+0x354>)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039fa:	4b28      	ldr	r3, [pc, #160]	@ (8003a9c <HAL_GPIO_Init+0x354>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a9c <HAL_GPIO_Init+0x354>)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a24:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <HAL_GPIO_Init+0x354>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a48:	4a14      	ldr	r2, [pc, #80]	@ (8003a9c <HAL_GPIO_Init+0x354>)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3301      	adds	r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b0f      	cmp	r3, #15
 8003a58:	f67f ae84 	bls.w	8003764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	3724      	adds	r7, #36	@ 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40013800 	.word	0x40013800
 8003a74:	40020000 	.word	0x40020000
 8003a78:	40020400 	.word	0x40020400
 8003a7c:	40020800 	.word	0x40020800
 8003a80:	40020c00 	.word	0x40020c00
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40021400 	.word	0x40021400
 8003a8c:	40021800 	.word	0x40021800
 8003a90:	40021c00 	.word	0x40021c00
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40022400 	.word	0x40022400
 8003a9c:	40013c00 	.word	0x40013c00

08003aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	807b      	strh	r3, [r7, #2]
 8003aac:	4613      	mov	r3, r2
 8003aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab0:	787b      	ldrb	r3, [r7, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003abc:	e003      	b.n	8003ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	041a      	lsls	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	619a      	str	r2, [r3, #24]
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad4:	b08f      	sub	sp, #60	@ 0x3c
 8003ad6:	af0a      	add	r7, sp, #40	@ 0x28
 8003ad8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e10f      	b.n	8003d04 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fab6 	bl	8001070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2203      	movs	r2, #3
 8003b08:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 fbe3 	bl	80052ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	687e      	ldr	r6, [r7, #4]
 8003b30:	466d      	mov	r5, sp
 8003b32:	f106 0410 	add.w	r4, r6, #16
 8003b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b42:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b46:	1d33      	adds	r3, r6, #4
 8003b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b4a:	6838      	ldr	r0, [r7, #0]
 8003b4c:	f001 fb6e 	bl	800522c <USB_CoreInit>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0d0      	b.n	8003d04 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fbd1 	bl	8005310 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e04a      	b.n	8003c0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	333d      	adds	r3, #61	@ 0x3d
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	333c      	adds	r3, #60	@ 0x3c
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	b298      	uxth	r0, r3
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	3344      	adds	r3, #68	@ 0x44
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3340      	adds	r3, #64	@ 0x40
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3348      	adds	r3, #72	@ 0x48
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	334c      	adds	r3, #76	@ 0x4c
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	3354      	adds	r3, #84	@ 0x54
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	3301      	adds	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	7bfa      	ldrb	r2, [r7, #15]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d3af      	bcc.n	8003b74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	e044      	b.n	8003ca4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c46:	7bfa      	ldrb	r2, [r7, #15]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c5c:	7bfa      	ldrb	r2, [r7, #15]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c72:	7bfa      	ldrb	r2, [r7, #15]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3b5      	bcc.n	8003c1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	687e      	ldr	r6, [r7, #4]
 8003cb6:	466d      	mov	r5, sp
 8003cb8:	f106 0410 	add.w	r4, r6, #16
 8003cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ccc:	1d33      	adds	r3, r6, #4
 8003cce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cd0:	6838      	ldr	r0, [r7, #0]
 8003cd2:	f001 fb69 	bl	80053a8 <USB_DevInit>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e00d      	b.n	8003d04 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fd34 	bl	800576a <USB_DevDisconnect>

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e267      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d075      	beq.n	8003e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d2a:	4b88      	ldr	r3, [pc, #544]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d00c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d36:	4b85      	ldr	r3, [pc, #532]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d112      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4b82      	ldr	r3, [pc, #520]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4e:	d10b      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	4b7e      	ldr	r3, [pc, #504]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d05b      	beq.n	8003e14 <HAL_RCC_OscConfig+0x108>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d157      	bne.n	8003e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e242      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d70:	d106      	bne.n	8003d80 <HAL_RCC_OscConfig+0x74>
 8003d72:	4b76      	ldr	r3, [pc, #472]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a75      	ldr	r2, [pc, #468]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xb0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x98>
 8003d8a:	4b70      	ldr	r3, [pc, #448]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a6f      	ldr	r2, [pc, #444]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b6d      	ldr	r3, [pc, #436]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6c      	ldr	r2, [pc, #432]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xb0>
 8003da4:	4b69      	ldr	r3, [pc, #420]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a68      	ldr	r2, [pc, #416]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b66      	ldr	r3, [pc, #408]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a65      	ldr	r2, [pc, #404]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fae6 	bl	8002394 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fae2 	bl	8002394 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	@ 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e207      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b5b      	ldr	r3, [pc, #364]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xc0>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fe fad2 	bl	8002394 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fe face 	bl	8002394 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	@ 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1f3      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	4b51      	ldr	r3, [pc, #324]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0xe8>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e22:	4b4a      	ldr	r3, [pc, #296]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2e:	4b47      	ldr	r3, [pc, #284]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b44      	ldr	r3, [pc, #272]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b41      	ldr	r3, [pc, #260]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x152>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1c7      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4937      	ldr	r1, [pc, #220]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b34      	ldr	r3, [pc, #208]	@ (8003f50 <HAL_RCC_OscConfig+0x244>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fe fa87 	bl	8002394 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fe fa83 	bl	8002394 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1a8      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b28      	ldr	r3, [pc, #160]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4925      	ldr	r1, [pc, #148]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b24      	ldr	r3, [pc, #144]	@ (8003f50 <HAL_RCC_OscConfig+0x244>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fa66 	bl	8002394 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fe fa62 	bl	8002394 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e187      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d036      	beq.n	8003f64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b15      	ldr	r3, [pc, #84]	@ (8003f54 <HAL_RCC_OscConfig+0x248>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fe fa46 	bl	8002394 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fe fa42 	bl	8002394 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e167      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f4c <HAL_RCC_OscConfig+0x240>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x200>
 8003f2a:	e01b      	b.n	8003f64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <HAL_RCC_OscConfig+0x248>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f32:	f7fe fa2f 	bl	8002394 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	e00e      	b.n	8003f58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3a:	f7fe fa2b 	bl	8002394 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d907      	bls.n	8003f58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e150      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	42470000 	.word	0x42470000
 8003f54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	4b88      	ldr	r3, [pc, #544]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ea      	bne.n	8003f3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8097 	beq.w	80040a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f76:	4b81      	ldr	r3, [pc, #516]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	4b7d      	ldr	r3, [pc, #500]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	4a7c      	ldr	r2, [pc, #496]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f92:	4b7a      	ldr	r3, [pc, #488]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	4b77      	ldr	r3, [pc, #476]	@ (8004180 <HAL_RCC_OscConfig+0x474>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d118      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fae:	4b74      	ldr	r3, [pc, #464]	@ (8004180 <HAL_RCC_OscConfig+0x474>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a73      	ldr	r2, [pc, #460]	@ (8004180 <HAL_RCC_OscConfig+0x474>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fba:	f7fe f9eb 	bl	8002394 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc2:	f7fe f9e7 	bl	8002394 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e10c      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8004180 <HAL_RCC_OscConfig+0x474>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x2ea>
 8003fe8:	4b64      	ldr	r3, [pc, #400]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fec:	4a63      	ldr	r2, [pc, #396]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff4:	e01c      	b.n	8004030 <HAL_RCC_OscConfig+0x324>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x30c>
 8003ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	4a5e      	ldr	r2, [pc, #376]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8004004:	f043 0304 	orr.w	r3, r3, #4
 8004008:	6713      	str	r3, [r2, #112]	@ 0x70
 800400a:	4b5c      	ldr	r3, [pc, #368]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	4a5b      	ldr	r2, [pc, #364]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6713      	str	r3, [r2, #112]	@ 0x70
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0x324>
 8004018:	4b58      	ldr	r3, [pc, #352]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401c:	4a57      	ldr	r2, [pc, #348]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	@ 0x70
 8004024:	4b55      	ldr	r3, [pc, #340]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004028:	4a54      	ldr	r2, [pc, #336]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 800402a:	f023 0304 	bic.w	r3, r3, #4
 800402e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d015      	beq.n	8004064 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fe f9ac 	bl	8002394 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fe f9a8 	bl	8002394 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e0cb      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004056:	4b49      	ldr	r3, [pc, #292]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ee      	beq.n	8004040 <HAL_RCC_OscConfig+0x334>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004064:	f7fe f996 	bl	8002394 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fe f992 	bl	8002394 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e0b5      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004082:	4b3e      	ldr	r3, [pc, #248]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ee      	bne.n	800406c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b39      	ldr	r3, [pc, #228]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	4a38      	ldr	r2, [pc, #224]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800409e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80a1 	beq.w	80041ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040aa:	4b34      	ldr	r3, [pc, #208]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d05c      	beq.n	8004170 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d141      	bne.n	8004142 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040be:	4b31      	ldr	r3, [pc, #196]	@ (8004184 <HAL_RCC_OscConfig+0x478>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fe f966 	bl	8002394 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fe f962 	bl	8002394 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e087      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040de:	4b27      	ldr	r3, [pc, #156]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	019b      	lsls	r3, r3, #6
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	3b01      	subs	r3, #1
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	491b      	ldr	r1, [pc, #108]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004114:	4b1b      	ldr	r3, [pc, #108]	@ (8004184 <HAL_RCC_OscConfig+0x478>)
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411a:	f7fe f93b 	bl	8002394 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004122:	f7fe f937 	bl	8002394 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e05c      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004134:	4b11      	ldr	r3, [pc, #68]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_RCC_OscConfig+0x416>
 8004140:	e054      	b.n	80041ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004142:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <HAL_RCC_OscConfig+0x478>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fe f924 	bl	8002394 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004150:	f7fe f920 	bl	8002394 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e045      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004162:	4b06      	ldr	r3, [pc, #24]	@ (800417c <HAL_RCC_OscConfig+0x470>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x444>
 800416e:	e03d      	b.n	80041ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d107      	bne.n	8004188 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e038      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
 800417c:	40023800 	.word	0x40023800
 8004180:	40007000 	.word	0x40007000
 8004184:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004188:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <HAL_RCC_OscConfig+0x4ec>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d028      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d121      	bne.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d11a      	bne.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041b8:	4013      	ands	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d111      	bne.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	3b01      	subs	r3, #1
 80041d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40023800 	.word	0x40023800

080041fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0cc      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004210:	4b68      	ldr	r3, [pc, #416]	@ (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d90c      	bls.n	8004238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b65      	ldr	r3, [pc, #404]	@ (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b63      	ldr	r3, [pc, #396]	@ (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0b8      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d020      	beq.n	8004286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004250:	4b59      	ldr	r3, [pc, #356]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a58      	ldr	r2, [pc, #352]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800425a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004268:	4b53      	ldr	r3, [pc, #332]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a52      	ldr	r2, [pc, #328]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b50      	ldr	r3, [pc, #320]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	494d      	ldr	r1, [pc, #308]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d044      	beq.n	800431c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	4b47      	ldr	r3, [pc, #284]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d119      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e07f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ba:	4b3f      	ldr	r3, [pc, #252]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ca:	4b3b      	ldr	r3, [pc, #236]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e067      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042da:	4b37      	ldr	r3, [pc, #220]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f023 0203 	bic.w	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4934      	ldr	r1, [pc, #208]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ec:	f7fe f852 	bl	8002394 <HAL_GetTick>
 80042f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	e00a      	b.n	800430a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f4:	f7fe f84e 	bl	8002394 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e04f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	4b2b      	ldr	r3, [pc, #172]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 020c 	and.w	r2, r3, #12
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	429a      	cmp	r2, r3
 800431a:	d1eb      	bne.n	80042f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800431c:	4b25      	ldr	r3, [pc, #148]	@ (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d20c      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4b22      	ldr	r3, [pc, #136]	@ (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b20      	ldr	r3, [pc, #128]	@ (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e032      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004350:	4b19      	ldr	r3, [pc, #100]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4916      	ldr	r1, [pc, #88]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436e:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	490e      	ldr	r1, [pc, #56]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004382:	f000 f821 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8004386:	4602      	mov	r2, r0
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	490a      	ldr	r1, [pc, #40]	@ (80043bc <HAL_RCC_ClockConfig+0x1c0>)
 8004394:	5ccb      	ldrb	r3, [r1, r3]
 8004396:	fa22 f303 	lsr.w	r3, r2, r3
 800439a:	4a09      	ldr	r2, [pc, #36]	@ (80043c0 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439e:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <HAL_RCC_ClockConfig+0x1c8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd ffb2 	bl	800230c <HAL_InitTick>

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40023c00 	.word	0x40023c00
 80043b8:	40023800 	.word	0x40023800
 80043bc:	080058a0 	.word	0x080058a0
 80043c0:	20000020 	.word	0x20000020
 80043c4:	20000024 	.word	0x20000024

080043c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043cc:	b094      	sub	sp, #80	@ 0x50
 80043ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d4:	2300      	movs	r3, #0
 80043d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d8:	2300      	movs	r3, #0
 80043da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043e0:	4b79      	ldr	r3, [pc, #484]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d00d      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x40>
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	f200 80e1 	bhi.w	80045b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x34>
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0x3a>
 80043fa:	e0db      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b73      	ldr	r3, [pc, #460]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x204>)
 80043fe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004400:	e0db      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004402:	4b73      	ldr	r3, [pc, #460]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004404:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004406:	e0d8      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004408:	4b6f      	ldr	r3, [pc, #444]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004410:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004412:	4b6d      	ldr	r3, [pc, #436]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d063      	beq.n	80044e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441e:	4b6a      	ldr	r3, [pc, #424]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	099b      	lsrs	r3, r3, #6
 8004424:	2200      	movs	r2, #0
 8004426:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004428:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800442a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004430:	633b      	str	r3, [r7, #48]	@ 0x30
 8004432:	2300      	movs	r3, #0
 8004434:	637b      	str	r3, [r7, #52]	@ 0x34
 8004436:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800443a:	4622      	mov	r2, r4
 800443c:	462b      	mov	r3, r5
 800443e:	f04f 0000 	mov.w	r0, #0
 8004442:	f04f 0100 	mov.w	r1, #0
 8004446:	0159      	lsls	r1, r3, #5
 8004448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800444c:	0150      	lsls	r0, r2, #5
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4621      	mov	r1, r4
 8004454:	1a51      	subs	r1, r2, r1
 8004456:	6139      	str	r1, [r7, #16]
 8004458:	4629      	mov	r1, r5
 800445a:	eb63 0301 	sbc.w	r3, r3, r1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800446c:	4659      	mov	r1, fp
 800446e:	018b      	lsls	r3, r1, #6
 8004470:	4651      	mov	r1, sl
 8004472:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004476:	4651      	mov	r1, sl
 8004478:	018a      	lsls	r2, r1, #6
 800447a:	4651      	mov	r1, sl
 800447c:	ebb2 0801 	subs.w	r8, r2, r1
 8004480:	4659      	mov	r1, fp
 8004482:	eb63 0901 	sbc.w	r9, r3, r1
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800449a:	4690      	mov	r8, r2
 800449c:	4699      	mov	r9, r3
 800449e:	4623      	mov	r3, r4
 80044a0:	eb18 0303 	adds.w	r3, r8, r3
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	462b      	mov	r3, r5
 80044a8:	eb49 0303 	adc.w	r3, r9, r3
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044ba:	4629      	mov	r1, r5
 80044bc:	024b      	lsls	r3, r1, #9
 80044be:	4621      	mov	r1, r4
 80044c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044c4:	4621      	mov	r1, r4
 80044c6:	024a      	lsls	r2, r1, #9
 80044c8:	4610      	mov	r0, r2
 80044ca:	4619      	mov	r1, r3
 80044cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ce:	2200      	movs	r2, #0
 80044d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044d8:	f7fb fe88 	bl	80001ec <__aeabi_uldivmod>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4613      	mov	r3, r2
 80044e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044e4:	e058      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e6:	4b38      	ldr	r3, [pc, #224]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	099b      	lsrs	r3, r3, #6
 80044ec:	2200      	movs	r2, #0
 80044ee:	4618      	mov	r0, r3
 80044f0:	4611      	mov	r1, r2
 80044f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044f6:	623b      	str	r3, [r7, #32]
 80044f8:	2300      	movs	r3, #0
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004500:	4642      	mov	r2, r8
 8004502:	464b      	mov	r3, r9
 8004504:	f04f 0000 	mov.w	r0, #0
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	0159      	lsls	r1, r3, #5
 800450e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004512:	0150      	lsls	r0, r2, #5
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4641      	mov	r1, r8
 800451a:	ebb2 0a01 	subs.w	sl, r2, r1
 800451e:	4649      	mov	r1, r9
 8004520:	eb63 0b01 	sbc.w	fp, r3, r1
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004530:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004534:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004538:	ebb2 040a 	subs.w	r4, r2, sl
 800453c:	eb63 050b 	sbc.w	r5, r3, fp
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	00eb      	lsls	r3, r5, #3
 800454a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800454e:	00e2      	lsls	r2, r4, #3
 8004550:	4614      	mov	r4, r2
 8004552:	461d      	mov	r5, r3
 8004554:	4643      	mov	r3, r8
 8004556:	18e3      	adds	r3, r4, r3
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	464b      	mov	r3, r9
 800455c:	eb45 0303 	adc.w	r3, r5, r3
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800456e:	4629      	mov	r1, r5
 8004570:	028b      	lsls	r3, r1, #10
 8004572:	4621      	mov	r1, r4
 8004574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004578:	4621      	mov	r1, r4
 800457a:	028a      	lsls	r2, r1, #10
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004582:	2200      	movs	r2, #0
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	61fa      	str	r2, [r7, #28]
 8004588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800458c:	f7fb fe2e 	bl	80001ec <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004598:	4b0b      	ldr	r3, [pc, #44]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	3301      	adds	r3, #1
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80045a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045b2:	e002      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b4:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x204>)
 80045b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3750      	adds	r7, #80	@ 0x50
 80045c0:	46bd      	mov	sp, r7
 80045c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800
 80045cc:	00f42400 	.word	0x00f42400
 80045d0:	007a1200 	.word	0x007a1200

080045d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d8:	4b03      	ldr	r3, [pc, #12]	@ (80045e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045da:	681b      	ldr	r3, [r3, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000020 	.word	0x20000020

080045ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045f0:	f7ff fff0 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	4b05      	ldr	r3, [pc, #20]	@ (800460c <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	0a9b      	lsrs	r3, r3, #10
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	4903      	ldr	r1, [pc, #12]	@ (8004610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004602:	5ccb      	ldrb	r3, [r1, r3]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40023800 	.word	0x40023800
 8004610:	080058b0 	.word	0x080058b0

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004618:	f7ff ffdc 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0b5b      	lsrs	r3, r3, #13
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4903      	ldr	r1, [pc, #12]	@ (8004638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800
 8004638:	080058b0 	.word	0x080058b0

0800463c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e041      	b.n	80046d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fc fc9c 	bl	8000fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f000 f95e 	bl	800493c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d001      	beq.n	80046f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e046      	b.n	8004782 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a23      	ldr	r2, [pc, #140]	@ (8004790 <HAL_TIM_Base_Start+0xb4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d022      	beq.n	800474c <HAL_TIM_Base_Start+0x70>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470e:	d01d      	beq.n	800474c <HAL_TIM_Base_Start+0x70>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1f      	ldr	r2, [pc, #124]	@ (8004794 <HAL_TIM_Base_Start+0xb8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d018      	beq.n	800474c <HAL_TIM_Base_Start+0x70>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <HAL_TIM_Base_Start+0xbc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d013      	beq.n	800474c <HAL_TIM_Base_Start+0x70>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1c      	ldr	r2, [pc, #112]	@ (800479c <HAL_TIM_Base_Start+0xc0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00e      	beq.n	800474c <HAL_TIM_Base_Start+0x70>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1b      	ldr	r2, [pc, #108]	@ (80047a0 <HAL_TIM_Base_Start+0xc4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d009      	beq.n	800474c <HAL_TIM_Base_Start+0x70>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a19      	ldr	r2, [pc, #100]	@ (80047a4 <HAL_TIM_Base_Start+0xc8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <HAL_TIM_Base_Start+0x70>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a18      	ldr	r2, [pc, #96]	@ (80047a8 <HAL_TIM_Base_Start+0xcc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d111      	bne.n	8004770 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b06      	cmp	r3, #6
 800475c:	d010      	beq.n	8004780 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	e007      	b.n	8004780 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40010400 	.word	0x40010400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40001800 	.word	0x40001800

080047ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_TIM_ConfigClockSource+0x1c>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e0b4      	b.n	8004932 <HAL_TIM_ConfigClockSource+0x186>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004800:	d03e      	beq.n	8004880 <HAL_TIM_ConfigClockSource+0xd4>
 8004802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004806:	f200 8087 	bhi.w	8004918 <HAL_TIM_ConfigClockSource+0x16c>
 800480a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800480e:	f000 8086 	beq.w	800491e <HAL_TIM_ConfigClockSource+0x172>
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004816:	d87f      	bhi.n	8004918 <HAL_TIM_ConfigClockSource+0x16c>
 8004818:	2b70      	cmp	r3, #112	@ 0x70
 800481a:	d01a      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0xa6>
 800481c:	2b70      	cmp	r3, #112	@ 0x70
 800481e:	d87b      	bhi.n	8004918 <HAL_TIM_ConfigClockSource+0x16c>
 8004820:	2b60      	cmp	r3, #96	@ 0x60
 8004822:	d050      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004824:	2b60      	cmp	r3, #96	@ 0x60
 8004826:	d877      	bhi.n	8004918 <HAL_TIM_ConfigClockSource+0x16c>
 8004828:	2b50      	cmp	r3, #80	@ 0x50
 800482a:	d03c      	beq.n	80048a6 <HAL_TIM_ConfigClockSource+0xfa>
 800482c:	2b50      	cmp	r3, #80	@ 0x50
 800482e:	d873      	bhi.n	8004918 <HAL_TIM_ConfigClockSource+0x16c>
 8004830:	2b40      	cmp	r3, #64	@ 0x40
 8004832:	d058      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004834:	2b40      	cmp	r3, #64	@ 0x40
 8004836:	d86f      	bhi.n	8004918 <HAL_TIM_ConfigClockSource+0x16c>
 8004838:	2b30      	cmp	r3, #48	@ 0x30
 800483a:	d064      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0x15a>
 800483c:	2b30      	cmp	r3, #48	@ 0x30
 800483e:	d86b      	bhi.n	8004918 <HAL_TIM_ConfigClockSource+0x16c>
 8004840:	2b20      	cmp	r3, #32
 8004842:	d060      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0x15a>
 8004844:	2b20      	cmp	r3, #32
 8004846:	d867      	bhi.n	8004918 <HAL_TIM_ConfigClockSource+0x16c>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d05c      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0x15a>
 800484c:	2b10      	cmp	r3, #16
 800484e:	d05a      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0x15a>
 8004850:	e062      	b.n	8004918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6899      	ldr	r1, [r3, #8]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f000 f985 	bl	8004b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	609a      	str	r2, [r3, #8]
      break;
 800487e:	e04f      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	6899      	ldr	r1, [r3, #8]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f000 f96e 	bl	8004b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048a2:	609a      	str	r2, [r3, #8]
      break;
 80048a4:	e03c      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6859      	ldr	r1, [r3, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f000 f8e2 	bl	8004a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2150      	movs	r1, #80	@ 0x50
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f93b 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 80048c4:	e02c      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6859      	ldr	r1, [r3, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f000 f901 	bl	8004ada <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2160      	movs	r1, #96	@ 0x60
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f92b 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 80048e4:	e01c      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6859      	ldr	r1, [r3, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f000 f8c2 	bl	8004a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2140      	movs	r1, #64	@ 0x40
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 f91b 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 8004904:	e00c      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f000 f912 	bl	8004b3a <TIM_ITRx_SetConfig>
      break;
 8004916:	e003      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
      break;
 800491c:	e000      	b.n	8004920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800491e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a40      	ldr	r2, [pc, #256]	@ (8004a50 <TIM_Base_SetConfig+0x114>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495a:	d00f      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3d      	ldr	r2, [pc, #244]	@ (8004a54 <TIM_Base_SetConfig+0x118>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00b      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3c      	ldr	r2, [pc, #240]	@ (8004a58 <TIM_Base_SetConfig+0x11c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a5c <TIM_Base_SetConfig+0x120>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a3a      	ldr	r2, [pc, #232]	@ (8004a60 <TIM_Base_SetConfig+0x124>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d108      	bne.n	800498e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2f      	ldr	r2, [pc, #188]	@ (8004a50 <TIM_Base_SetConfig+0x114>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d02b      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499c:	d027      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a54 <TIM_Base_SetConfig+0x118>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d023      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a58 <TIM_Base_SetConfig+0x11c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01f      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a5c <TIM_Base_SetConfig+0x120>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d01b      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a29      	ldr	r2, [pc, #164]	@ (8004a60 <TIM_Base_SetConfig+0x124>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d017      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a28      	ldr	r2, [pc, #160]	@ (8004a64 <TIM_Base_SetConfig+0x128>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a27      	ldr	r2, [pc, #156]	@ (8004a68 <TIM_Base_SetConfig+0x12c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00f      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a26      	ldr	r2, [pc, #152]	@ (8004a6c <TIM_Base_SetConfig+0x130>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00b      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a25      	ldr	r2, [pc, #148]	@ (8004a70 <TIM_Base_SetConfig+0x134>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d007      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a24      	ldr	r2, [pc, #144]	@ (8004a74 <TIM_Base_SetConfig+0x138>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d003      	beq.n	80049ee <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a23      	ldr	r2, [pc, #140]	@ (8004a78 <TIM_Base_SetConfig+0x13c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d108      	bne.n	8004a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a0a      	ldr	r2, [pc, #40]	@ (8004a50 <TIM_Base_SetConfig+0x114>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_Base_SetConfig+0xf8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a60 <TIM_Base_SetConfig+0x124>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d103      	bne.n	8004a3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	615a      	str	r2, [r3, #20]
}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40010000 	.word	0x40010000
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40000800 	.word	0x40000800
 8004a5c:	40000c00 	.word	0x40000c00
 8004a60:	40010400 	.word	0x40010400
 8004a64:	40014000 	.word	0x40014000
 8004a68:	40014400 	.word	0x40014400
 8004a6c:	40014800 	.word	0x40014800
 8004a70:	40001800 	.word	0x40001800
 8004a74:	40001c00 	.word	0x40001c00
 8004a78:	40002000 	.word	0x40002000

08004a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f023 030a 	bic.w	r3, r3, #10
 8004ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b087      	sub	sp, #28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f023 0210 	bic.w	r2, r3, #16
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	031b      	lsls	r3, r3, #12
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	621a      	str	r2, [r3, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f043 0307 	orr.w	r3, r3, #7
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	609a      	str	r2, [r3, #8]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e05a      	b.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a21      	ldr	r2, [pc, #132]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c14:	d01d      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1b      	ldr	r2, [pc, #108]	@ (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a15      	ldr	r2, [pc, #84]	@ (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d10c      	bne.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40010400 	.word	0x40010400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40001800 	.word	0x40001800

08004ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e03f      	b.n	8004d3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc f986 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2224      	movs	r2, #36	@ 0x24
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f829 	bl	8004d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d48:	b0c0      	sub	sp, #256	@ 0x100
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	68d9      	ldr	r1, [r3, #12]
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	ea40 0301 	orr.w	r3, r0, r1
 8004d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d9c:	f021 010c 	bic.w	r1, r1, #12
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004daa:	430b      	orrs	r3, r1
 8004dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbe:	6999      	ldr	r1, [r3, #24]
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	ea40 0301 	orr.w	r3, r0, r1
 8004dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8005010 <UART_SetConfig+0x2cc>)
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d005      	beq.n	8004de4 <UART_SetConfig+0xa0>
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b8d      	ldr	r3, [pc, #564]	@ (8005014 <UART_SetConfig+0x2d0>)
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d104      	bne.n	8004dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004de4:	f7ff fc16 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8004de8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004dec:	e003      	b.n	8004df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dee:	f7ff fbfd 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8004df2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e00:	f040 810c 	bne.w	800501c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e16:	4622      	mov	r2, r4
 8004e18:	462b      	mov	r3, r5
 8004e1a:	1891      	adds	r1, r2, r2
 8004e1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e1e:	415b      	adcs	r3, r3
 8004e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e26:	4621      	mov	r1, r4
 8004e28:	eb12 0801 	adds.w	r8, r2, r1
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	eb43 0901 	adc.w	r9, r3, r1
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e46:	4690      	mov	r8, r2
 8004e48:	4699      	mov	r9, r3
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	eb18 0303 	adds.w	r3, r8, r3
 8004e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e54:	462b      	mov	r3, r5
 8004e56:	eb49 0303 	adc.w	r3, r9, r3
 8004e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e72:	460b      	mov	r3, r1
 8004e74:	18db      	adds	r3, r3, r3
 8004e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e78:	4613      	mov	r3, r2
 8004e7a:	eb42 0303 	adc.w	r3, r2, r3
 8004e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e88:	f7fb f9b0 	bl	80001ec <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4b61      	ldr	r3, [pc, #388]	@ (8005018 <UART_SetConfig+0x2d4>)
 8004e92:	fba3 2302 	umull	r2, r3, r3, r2
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	011c      	lsls	r4, r3, #4
 8004e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004eac:	4642      	mov	r2, r8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	1891      	adds	r1, r2, r2
 8004eb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004eb4:	415b      	adcs	r3, r3
 8004eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004edc:	4692      	mov	sl, r2
 8004ede:	469b      	mov	fp, r3
 8004ee0:	4643      	mov	r3, r8
 8004ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eea:	464b      	mov	r3, r9
 8004eec:	eb4b 0303 	adc.w	r3, fp, r3
 8004ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	18db      	adds	r3, r3, r3
 8004f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f0e:	4613      	mov	r3, r2
 8004f10:	eb42 0303 	adc.w	r3, r2, r3
 8004f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f1e:	f7fb f965 	bl	80001ec <__aeabi_uldivmod>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4611      	mov	r1, r2
 8004f28:	4b3b      	ldr	r3, [pc, #236]	@ (8005018 <UART_SetConfig+0x2d4>)
 8004f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	2264      	movs	r2, #100	@ 0x64
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	1acb      	subs	r3, r1, r3
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f3e:	4b36      	ldr	r3, [pc, #216]	@ (8005018 <UART_SetConfig+0x2d4>)
 8004f40:	fba3 2302 	umull	r2, r3, r3, r2
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f4c:	441c      	add	r4, r3
 8004f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f60:	4642      	mov	r2, r8
 8004f62:	464b      	mov	r3, r9
 8004f64:	1891      	adds	r1, r2, r2
 8004f66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f68:	415b      	adcs	r3, r3
 8004f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f70:	4641      	mov	r1, r8
 8004f72:	1851      	adds	r1, r2, r1
 8004f74:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f76:	4649      	mov	r1, r9
 8004f78:	414b      	adcs	r3, r1
 8004f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f88:	4659      	mov	r1, fp
 8004f8a:	00cb      	lsls	r3, r1, #3
 8004f8c:	4651      	mov	r1, sl
 8004f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f92:	4651      	mov	r1, sl
 8004f94:	00ca      	lsls	r2, r1, #3
 8004f96:	4610      	mov	r0, r2
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	460a      	mov	r2, r1
 8004fa8:	eb42 0303 	adc.w	r3, r2, r3
 8004fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	18db      	adds	r3, r3, r3
 8004fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fca:	4613      	mov	r3, r2
 8004fcc:	eb42 0303 	adc.w	r3, r2, r3
 8004fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fda:	f7fb f907 	bl	80001ec <__aeabi_uldivmod>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <UART_SetConfig+0x2d4>)
 8004fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	2164      	movs	r1, #100	@ 0x64
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	3332      	adds	r3, #50	@ 0x32
 8004ff6:	4a08      	ldr	r2, [pc, #32]	@ (8005018 <UART_SetConfig+0x2d4>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	f003 0207 	and.w	r2, r3, #7
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4422      	add	r2, r4
 800500a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800500c:	e106      	b.n	800521c <UART_SetConfig+0x4d8>
 800500e:	bf00      	nop
 8005010:	40011000 	.word	0x40011000
 8005014:	40011400 	.word	0x40011400
 8005018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800501c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005020:	2200      	movs	r2, #0
 8005022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005026:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800502a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800502e:	4642      	mov	r2, r8
 8005030:	464b      	mov	r3, r9
 8005032:	1891      	adds	r1, r2, r2
 8005034:	6239      	str	r1, [r7, #32]
 8005036:	415b      	adcs	r3, r3
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
 800503a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800503e:	4641      	mov	r1, r8
 8005040:	1854      	adds	r4, r2, r1
 8005042:	4649      	mov	r1, r9
 8005044:	eb43 0501 	adc.w	r5, r3, r1
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	00eb      	lsls	r3, r5, #3
 8005052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005056:	00e2      	lsls	r2, r4, #3
 8005058:	4614      	mov	r4, r2
 800505a:	461d      	mov	r5, r3
 800505c:	4643      	mov	r3, r8
 800505e:	18e3      	adds	r3, r4, r3
 8005060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005064:	464b      	mov	r3, r9
 8005066:	eb45 0303 	adc.w	r3, r5, r3
 800506a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800507a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800508a:	4629      	mov	r1, r5
 800508c:	008b      	lsls	r3, r1, #2
 800508e:	4621      	mov	r1, r4
 8005090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005094:	4621      	mov	r1, r4
 8005096:	008a      	lsls	r2, r1, #2
 8005098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800509c:	f7fb f8a6 	bl	80001ec <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4b60      	ldr	r3, [pc, #384]	@ (8005228 <UART_SetConfig+0x4e4>)
 80050a6:	fba3 2302 	umull	r2, r3, r3, r2
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	011c      	lsls	r4, r3, #4
 80050ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	1891      	adds	r1, r2, r2
 80050c6:	61b9      	str	r1, [r7, #24]
 80050c8:	415b      	adcs	r3, r3
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050d0:	4641      	mov	r1, r8
 80050d2:	1851      	adds	r1, r2, r1
 80050d4:	6139      	str	r1, [r7, #16]
 80050d6:	4649      	mov	r1, r9
 80050d8:	414b      	adcs	r3, r1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050e8:	4659      	mov	r1, fp
 80050ea:	00cb      	lsls	r3, r1, #3
 80050ec:	4651      	mov	r1, sl
 80050ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f2:	4651      	mov	r1, sl
 80050f4:	00ca      	lsls	r2, r1, #3
 80050f6:	4610      	mov	r0, r2
 80050f8:	4619      	mov	r1, r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	4642      	mov	r2, r8
 80050fe:	189b      	adds	r3, r3, r2
 8005100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005104:	464b      	mov	r3, r9
 8005106:	460a      	mov	r2, r1
 8005108:	eb42 0303 	adc.w	r3, r2, r3
 800510c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	67bb      	str	r3, [r7, #120]	@ 0x78
 800511a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005128:	4649      	mov	r1, r9
 800512a:	008b      	lsls	r3, r1, #2
 800512c:	4641      	mov	r1, r8
 800512e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005132:	4641      	mov	r1, r8
 8005134:	008a      	lsls	r2, r1, #2
 8005136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800513a:	f7fb f857 	bl	80001ec <__aeabi_uldivmod>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4611      	mov	r1, r2
 8005144:	4b38      	ldr	r3, [pc, #224]	@ (8005228 <UART_SetConfig+0x4e4>)
 8005146:	fba3 2301 	umull	r2, r3, r3, r1
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	2264      	movs	r2, #100	@ 0x64
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	1acb      	subs	r3, r1, r3
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	3332      	adds	r3, #50	@ 0x32
 8005158:	4a33      	ldr	r2, [pc, #204]	@ (8005228 <UART_SetConfig+0x4e4>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005164:	441c      	add	r4, r3
 8005166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516a:	2200      	movs	r2, #0
 800516c:	673b      	str	r3, [r7, #112]	@ 0x70
 800516e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005174:	4642      	mov	r2, r8
 8005176:	464b      	mov	r3, r9
 8005178:	1891      	adds	r1, r2, r2
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	415b      	adcs	r3, r3
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005184:	4641      	mov	r1, r8
 8005186:	1851      	adds	r1, r2, r1
 8005188:	6039      	str	r1, [r7, #0]
 800518a:	4649      	mov	r1, r9
 800518c:	414b      	adcs	r3, r1
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800519c:	4659      	mov	r1, fp
 800519e:	00cb      	lsls	r3, r1, #3
 80051a0:	4651      	mov	r1, sl
 80051a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a6:	4651      	mov	r1, sl
 80051a8:	00ca      	lsls	r2, r1, #3
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	4642      	mov	r2, r8
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051b6:	464b      	mov	r3, r9
 80051b8:	460a      	mov	r2, r1
 80051ba:	eb42 0303 	adc.w	r3, r2, r3
 80051be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80051ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051d8:	4649      	mov	r1, r9
 80051da:	008b      	lsls	r3, r1, #2
 80051dc:	4641      	mov	r1, r8
 80051de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051e2:	4641      	mov	r1, r8
 80051e4:	008a      	lsls	r2, r1, #2
 80051e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051ea:	f7fa ffff 	bl	80001ec <__aeabi_uldivmod>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <UART_SetConfig+0x4e4>)
 80051f4:	fba3 1302 	umull	r1, r3, r3, r2
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	2164      	movs	r1, #100	@ 0x64
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	3332      	adds	r3, #50	@ 0x32
 8005206:	4a08      	ldr	r2, [pc, #32]	@ (8005228 <UART_SetConfig+0x4e4>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	f003 020f 	and.w	r2, r3, #15
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4422      	add	r2, r4
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005222:	46bd      	mov	sp, r7
 8005224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005228:	51eb851f 	.word	0x51eb851f

0800522c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800522c:	b084      	sub	sp, #16
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	f107 001c 	add.w	r0, r7, #28
 800523a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	2b01      	cmp	r3, #1
 8005242:	d122      	bne.n	800528a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800526c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800526e:	2b01      	cmp	r3, #1
 8005270:	d105      	bne.n	800527e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 faa2 	bl	80057c8 <USB_CoreReset>
 8005284:	4603      	mov	r3, r0
 8005286:	73fb      	strb	r3, [r7, #15]
 8005288:	e01a      	b.n	80052c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa96 	bl	80057c8 <USB_CoreReset>
 800529c:	4603      	mov	r3, r0
 800529e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80052b2:	e005      	b.n	80052c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10b      	bne.n	80052de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f043 0206 	orr.w	r2, r3, #6
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f043 0220 	orr.w	r2, r3, #32
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ea:	b004      	add	sp, #16
 80052ec:	4770      	bx	lr

080052ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f023 0201 	bic.w	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d115      	bne.n	800535e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800533e:	2001      	movs	r0, #1
 8005340:	f7fd f834 	bl	80023ac <HAL_Delay>
      ms++;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa2e 	bl	80057ac <USB_GetMode>
 8005350:	4603      	mov	r3, r0
 8005352:	2b01      	cmp	r3, #1
 8005354:	d01e      	beq.n	8005394 <USB_SetCurrentMode+0x84>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b31      	cmp	r3, #49	@ 0x31
 800535a:	d9f0      	bls.n	800533e <USB_SetCurrentMode+0x2e>
 800535c:	e01a      	b.n	8005394 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d115      	bne.n	8005390 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005370:	2001      	movs	r0, #1
 8005372:	f7fd f81b 	bl	80023ac <HAL_Delay>
      ms++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3301      	adds	r3, #1
 800537a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa15 	bl	80057ac <USB_GetMode>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <USB_SetCurrentMode+0x84>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b31      	cmp	r3, #49	@ 0x31
 800538c:	d9f0      	bls.n	8005370 <USB_SetCurrentMode+0x60>
 800538e:	e001      	b.n	8005394 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e005      	b.n	80053a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b32      	cmp	r3, #50	@ 0x32
 8005398:	d101      	bne.n	800539e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053a8:	b084      	sub	sp, #16
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b086      	sub	sp, #24
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053c2:	2300      	movs	r3, #0
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	e009      	b.n	80053dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3340      	adds	r3, #64	@ 0x40
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	2200      	movs	r2, #0
 80053d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3301      	adds	r3, #1
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b0e      	cmp	r3, #14
 80053e0:	d9f2      	bls.n	80053c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11c      	bne.n	8005422 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053f6:	f043 0302 	orr.w	r3, r3, #2
 80053fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005420:	e00b      	b.n	800543a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005432:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005440:	461a      	mov	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800544c:	4619      	mov	r1, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005454:	461a      	mov	r2, r3
 8005456:	680b      	ldr	r3, [r1, #0]
 8005458:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800545a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10c      	bne.n	800547a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005466:	2100      	movs	r1, #0
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f965 	bl	8005738 <USB_SetDevSpeed>
 800546e:	e008      	b.n	8005482 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005470:	2101      	movs	r1, #1
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f960 	bl	8005738 <USB_SetDevSpeed>
 8005478:	e003      	b.n	8005482 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800547a:	2103      	movs	r1, #3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f95b 	bl	8005738 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005482:	2110      	movs	r1, #16
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f8f3 	bl	8005670 <USB_FlushTxFifo>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f91f 	bl	80056d8 <USB_FlushRxFifo>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054aa:	461a      	mov	r2, r3
 80054ac:	2300      	movs	r3, #0
 80054ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b6:	461a      	mov	r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c2:	461a      	mov	r2, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c8:	2300      	movs	r3, #0
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e043      	b.n	8005556 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054e4:	d118      	bne.n	8005518 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f8:	461a      	mov	r2, r3
 80054fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e013      	b.n	800552a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800550e:	461a      	mov	r2, r3
 8005510:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e008      	b.n	800552a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005524:	461a      	mov	r2, r3
 8005526:	2300      	movs	r3, #0
 8005528:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005536:	461a      	mov	r2, r3
 8005538:	2300      	movs	r3, #0
 800553a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005548:	461a      	mov	r2, r3
 800554a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800554e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	3301      	adds	r3, #1
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	429a      	cmp	r2, r3
 800555c:	d3b7      	bcc.n	80054ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800555e:	2300      	movs	r3, #0
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	e043      	b.n	80055ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800557a:	d118      	bne.n	80055ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558e:	461a      	mov	r2, r3
 8005590:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	e013      	b.n	80055c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a4:	461a      	mov	r2, r3
 80055a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e008      	b.n	80055c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ba:	461a      	mov	r2, r3
 80055bc:	2300      	movs	r3, #0
 80055be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055cc:	461a      	mov	r2, r3
 80055ce:	2300      	movs	r3, #0
 80055d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055de:	461a      	mov	r2, r3
 80055e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3301      	adds	r3, #1
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d3b7      	bcc.n	8005564 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005602:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005606:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005614:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f043 0210 	orr.w	r2, r3, #16
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699a      	ldr	r2, [r3, #24]
 800562c:	4b0f      	ldr	r3, [pc, #60]	@ (800566c <USB_DevInit+0x2c4>)
 800562e:	4313      	orrs	r3, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f043 0208 	orr.w	r2, r3, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d107      	bne.n	800565c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005654:	f043 0304 	orr.w	r3, r3, #4
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800565c:	7dfb      	ldrb	r3, [r7, #23]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005668:	b004      	add	sp, #16
 800566a:	4770      	bx	lr
 800566c:	803c3800 	.word	0x803c3800

08005670 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a13      	ldr	r2, [pc, #76]	@ (80056d4 <USB_FlushTxFifo+0x64>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e01b      	b.n	80056c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	daf2      	bge.n	800567e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	019b      	lsls	r3, r3, #6
 80056a0:	f043 0220 	orr.w	r2, r3, #32
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4a08      	ldr	r2, [pc, #32]	@ (80056d4 <USB_FlushTxFifo+0x64>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e006      	b.n	80056c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d0f0      	beq.n	80056a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	00030d40 	.word	0x00030d40

080056d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3301      	adds	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a11      	ldr	r2, [pc, #68]	@ (8005734 <USB_FlushRxFifo+0x5c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e018      	b.n	8005728 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	daf2      	bge.n	80056e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2210      	movs	r2, #16
 8005706:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a08      	ldr	r2, [pc, #32]	@ (8005734 <USB_FlushRxFifo+0x5c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e006      	b.n	8005728 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b10      	cmp	r3, #16
 8005724:	d0f0      	beq.n	8005708 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	00030d40 	.word	0x00030d40

08005738 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	68f9      	ldr	r1, [r7, #12]
 8005754:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005758:	4313      	orrs	r3, r2
 800575a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005784:	f023 0303 	bic.w	r3, r3, #3
 8005788:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005798:	f043 0302 	orr.w	r3, r3, #2
 800579c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f003 0301 	and.w	r3, r3, #1
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a13      	ldr	r2, [pc, #76]	@ (800582c <USB_CoreReset+0x64>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d901      	bls.n	80057e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e01b      	b.n	800581e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	daf2      	bge.n	80057d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f043 0201 	orr.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3301      	adds	r3, #1
 8005802:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a09      	ldr	r2, [pc, #36]	@ (800582c <USB_CoreReset+0x64>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d901      	bls.n	8005810 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e006      	b.n	800581e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	d0f0      	beq.n	80057fe <USB_CoreReset+0x36>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	00030d40 	.word	0x00030d40

08005830 <memset>:
 8005830:	4402      	add	r2, r0
 8005832:	4603      	mov	r3, r0
 8005834:	4293      	cmp	r3, r2
 8005836:	d100      	bne.n	800583a <memset+0xa>
 8005838:	4770      	bx	lr
 800583a:	f803 1b01 	strb.w	r1, [r3], #1
 800583e:	e7f9      	b.n	8005834 <memset+0x4>

08005840 <__libc_init_array>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	4d0d      	ldr	r5, [pc, #52]	@ (8005878 <__libc_init_array+0x38>)
 8005844:	4c0d      	ldr	r4, [pc, #52]	@ (800587c <__libc_init_array+0x3c>)
 8005846:	1b64      	subs	r4, r4, r5
 8005848:	10a4      	asrs	r4, r4, #2
 800584a:	2600      	movs	r6, #0
 800584c:	42a6      	cmp	r6, r4
 800584e:	d109      	bne.n	8005864 <__libc_init_array+0x24>
 8005850:	4d0b      	ldr	r5, [pc, #44]	@ (8005880 <__libc_init_array+0x40>)
 8005852:	4c0c      	ldr	r4, [pc, #48]	@ (8005884 <__libc_init_array+0x44>)
 8005854:	f000 f818 	bl	8005888 <_init>
 8005858:	1b64      	subs	r4, r4, r5
 800585a:	10a4      	asrs	r4, r4, #2
 800585c:	2600      	movs	r6, #0
 800585e:	42a6      	cmp	r6, r4
 8005860:	d105      	bne.n	800586e <__libc_init_array+0x2e>
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	f855 3b04 	ldr.w	r3, [r5], #4
 8005868:	4798      	blx	r3
 800586a:	3601      	adds	r6, #1
 800586c:	e7ee      	b.n	800584c <__libc_init_array+0xc>
 800586e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005872:	4798      	blx	r3
 8005874:	3601      	adds	r6, #1
 8005876:	e7f2      	b.n	800585e <__libc_init_array+0x1e>
 8005878:	080058c0 	.word	0x080058c0
 800587c:	080058c0 	.word	0x080058c0
 8005880:	080058c0 	.word	0x080058c0
 8005884:	080058c4 	.word	0x080058c4

08005888 <_init>:
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	bf00      	nop
 800588c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588e:	bc08      	pop	{r3}
 8005890:	469e      	mov	lr, r3
 8005892:	4770      	bx	lr

08005894 <_fini>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	bf00      	nop
 8005898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589a:	bc08      	pop	{r3}
 800589c:	469e      	mov	lr, r3
 800589e:	4770      	bx	lr
