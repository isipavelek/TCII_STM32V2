
TCII_Filter_429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006424  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080065d0  080065d0  000075d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065fc  080065fc  00008030  2**0
                  CONTENTS
  4 .ARM          00000008  080065fc  080065fc  000075fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006604  08006604  00008030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006604  08006604  00007604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006608  08006608  00007608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  0800660c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008030  2**0
                  CONTENTS
 10 .bss          00005880  20000030  20000030  00008030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200058b0  200058b0  00008030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018bc3  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003565  00000000  00000000  00020c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  00024188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdb  00000000  00000000  00025608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002812a  00000000  00000000  000265e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b378  00000000  00000000  0004e70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0149  00000000  00000000  00069a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159bce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055f0  00000000  00000000  00159c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0015f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000030 	.word	0x20000030
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080065b8 	.word	0x080065b8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000034 	.word	0x20000034
 80001e8:	080065b8 	.word	0x080065b8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_ADC_ConvCpltCallback>:


#define CARGANDO_A false


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	static uint8_t estadoADC = 0;
	static uint16_t index = 0;
	uint32_t val=ADC_Read();
 80004e4:	f000 f878 	bl	80005d8 <ADC_Read>
 80004e8:	60f8      	str	r0, [r7, #12]
	if (estadoADC==CARGANDO_A){
 80004ea:	4b2d      	ldr	r3, [pc, #180]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0xc4>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d119      	bne.n	8000526 <HAL_ADC_ConvCpltCallback+0x4a>
		InputA[index] =(float32_t)val;
 80004f2:	4b2c      	ldr	r3, [pc, #176]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	ee07 2a90 	vmov	s15, r2
 80004fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000500:	4a29      	ldr	r2, [pc, #164]	@ (80005a8 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	edc3 7a00 	vstr	s15, [r3]
		DAC_Write((uint32_t)OutputA[index]);
 800050a:	4b26      	ldr	r3, [pc, #152]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	4a27      	ldr	r2, [pc, #156]	@ (80005ac <HAL_ADC_ConvCpltCallback+0xd0>)
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4413      	add	r3, r2
 8000514:	edd3 7a00 	vldr	s15, [r3]
 8000518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800051c:	ee17 0a90 	vmov	r0, s15
 8000520:	f000 f86e 	bl	8000600 <DAC_Write>
 8000524:	e018      	b.n	8000558 <HAL_ADC_ConvCpltCallback+0x7c>
	}
	else {
		InputB[index] =(float32_t) val ;
 8000526:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	ee07 2a90 	vmov	s15, r2
 8000530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000534:	4a1e      	ldr	r2, [pc, #120]	@ (80005b0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	4413      	add	r3, r2
 800053a:	edc3 7a00 	vstr	s15, [r3]
		DAC_Write((uint32_t)OutputB[index]);
 800053e:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	4a1c      	ldr	r2, [pc, #112]	@ (80005b4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	edd3 7a00 	vldr	s15, [r3]
 800054c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000550:	ee17 0a90 	vmov	r0, s15
 8000554:	f000 f854 	bl	8000600 <DAC_Write>
	}

	index++;
 8000558:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	b29a      	uxth	r2, r3
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000562:	801a      	strh	r2, [r3, #0]
	if (index == SAMPLES_PER_BLOCK) {
 8000564:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800056c:	d114      	bne.n	8000598 <HAL_ADC_ConvCpltCallback+0xbc>
		index = 0;
 800056e:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000570:	2200      	movs	r2, #0
 8000572:	801a      	strh	r2, [r3, #0]
		if(estadoADC==CARGANDO_A)estado=PROCESAR_A;
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d103      	bne.n	8000584 <HAL_ADC_ConvCpltCallback+0xa8>
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <HAL_ADC_ConvCpltCallback+0xdc>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	e002      	b.n	800058a <HAL_ADC_ConvCpltCallback+0xae>
		else estado=PROCESAR_B;
 8000584:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000586:	2202      	movs	r2, #2
 8000588:	701a      	strb	r2, [r3, #0]
		estadoADC ^= 1;
 800058a:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0xc4>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	f083 0301 	eor.w	r3, r3, #1
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b02      	ldr	r3, [pc, #8]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000596:	701a      	strb	r2, [r3, #0]

	}



}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000004d 	.word	0x2000004d
 80005a4:	2000004e 	.word	0x2000004e
 80005a8:	200018a8 	.word	0x200018a8
 80005ac:	200038a8 	.word	0x200038a8
 80005b0:	200028a8 	.word	0x200028a8
 80005b4:	200048a8 	.word	0x200048a8
 80005b8:	2000004c 	.word	0x2000004c

080005bc <ADC_Init>:

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "adc_port.h"

void ADC_Init(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <ADC_Init+0x14>)
 80005c2:	f001 ffab 	bl	800251c <HAL_ADC_Start_IT>

	HAL_TIM_Base_Start(&htim2);
 80005c6:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <ADC_Init+0x18>)
 80005c8:	f004 f96a 	bl	80048a0 <HAL_TIM_Base_Start>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200001c8 	.word	0x200001c8
 80005d4:	200002d4 	.word	0x200002d4

080005d8 <ADC_Read>:
uint32_t ADC_Read(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	return (HAL_ADC_GetValue(&hadc1));
 80005dc:	4802      	ldr	r0, [pc, #8]	@ (80005e8 <ADC_Read+0x10>)
 80005de:	f002 f98b 	bl	80028f8 <HAL_ADC_GetValue>
 80005e2:	4603      	mov	r3, r0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200001c8 	.word	0x200001c8

080005ec <DAC_Init>:

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "dac_port.h"

void DAC_Init(void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

	HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 80005f0:	2100      	movs	r1, #0
 80005f2:	4802      	ldr	r0, [pc, #8]	@ (80005fc <DAC_Init+0x10>)
 80005f4:	f002 fd09 	bl	800300a <HAL_DAC_Start>

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000210 	.word	0x20000210

08000600 <DAC_Write>:

void DAC_Write(uint32_t value){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R, value);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	4803      	ldr	r0, [pc, #12]	@ (800061c <DAC_Write+0x1c>)
 8000610:	f002 fd4d 	bl	80030ae <HAL_DAC_SetValue>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000210 	.word	0x20000210

08000620 <Hard_Init>:
/**
 * brief Inicialización de HW
 *
 */

void Hard_Init(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	HAL_Init();
 8000624:	f001 fea0 	bl	8002368 <HAL_Init>
	SystemClock_Config();
 8000628:	f000 f812 	bl	8000650 <SystemClock_Config>
	MX_GPIO_Init();
 800062c:	f000 f9fc 	bl	8000a28 <MX_GPIO_Init>
	MX_ETH_Init();
 8000630:	f000 f908 	bl	8000844 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000634:	f000 f9a0 	bl	8000978 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000638:	f000 f9c8 	bl	80009cc <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 800063c:	f000 f886 	bl	800074c <MX_ADC1_Init>
	MX_DAC_Init();
 8000640:	f000 f8d6 	bl	80007f0 <MX_DAC_Init>
	MX_TIM2_Init();
 8000644:	f000 f94c 	bl	80008e0 <MX_TIM2_Init>
	MX_NVIC_Init();
 8000648:	f000 f86c 	bl	8000724 <MX_NVIC_Init>

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 ff7e 	bl	8006560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = FBUS/1000000;
 80006c4:	23a8      	movs	r3, #168	@ 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fbfb 	bl	8003ed0 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 fa64 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fe5c 	bl	80043c0 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 fa4d 	bl	8000bac <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
void MX_NVIC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	2012      	movs	r0, #18
 800072e:	f002 fc14 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000732:	2012      	movs	r0, #18
 8000734:	f002 fc2d 	bl	8002f92 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2101      	movs	r1, #1
 800073c:	2027      	movs	r0, #39	@ 0x27
 800073e:	f002 fc0c 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000742:	2027      	movs	r0, #39	@ 0x27
 8000744:	f002 fc25 	bl	8002f92 <HAL_NVIC_EnableIRQ>



}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0


  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]


  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 8000760:	4a22      	ldr	r2, [pc, #136]	@ (80007ec <MX_ADC1_Init+0xa0>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 8000778:	2201      	movs	r2, #1
 800077a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 8000786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800078a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 800078e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000792:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 800079c:	2201      	movs	r2, #1
 800079e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ae:	480e      	ldr	r0, [pc, #56]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 80007b0:	f001 fe70 	bl	8002494 <HAL_ADC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80007ba:	f000 f9f7 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <MX_ADC1_Init+0x9c>)
 80007d0:	f002 f8b4 	bl	800293c <HAL_ADC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007da:	f000 f9e7 	bl	8000bac <Error_Handler>
  }


}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200001c8 	.word	0x200001c8
 80007ec:	40012000 	.word	0x40012000

080007f0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
void MX_DAC_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
  hdac.Instance = DAC;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_DAC_Init+0x4c>)
 8000800:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <MX_DAC_Init+0x50>)
 8000802:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000804:	480d      	ldr	r0, [pc, #52]	@ (800083c <MX_DAC_Init+0x4c>)
 8000806:	f002 fbde 	bl	8002fc6 <HAL_DAC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000810:	f000 f9cc 	bl	8000bac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <MX_DAC_Init+0x4c>)
 8000824:	f002 fc68 	bl	80030f8 <HAL_DAC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800082e:	f000 f9bd 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000210 	.word	0x20000210
 8000840:	40007400 	.word	0x40007400

08000844 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
void MX_ETH_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  heth.Instance = ETH;
 8000848:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_ETH_Init+0x84>)
 800084a:	4a20      	ldr	r2, [pc, #128]	@ (80008cc <MX_ETH_Init+0x88>)
 800084c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_ETH_Init+0x8c>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000854:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <MX_ETH_Init+0x8c>)
 8000856:	2280      	movs	r2, #128	@ 0x80
 8000858:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800085a:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_ETH_Init+0x8c>)
 800085c:	22e1      	movs	r2, #225	@ 0xe1
 800085e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000860:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_ETH_Init+0x8c>)
 8000862:	2200      	movs	r2, #0
 8000864:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000866:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_ETH_Init+0x8c>)
 8000868:	2200      	movs	r2, #0
 800086a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800086c:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_ETH_Init+0x8c>)
 800086e:	2200      	movs	r2, #0
 8000870:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_ETH_Init+0x84>)
 8000874:	4a16      	ldr	r2, [pc, #88]	@ (80008d0 <MX_ETH_Init+0x8c>)
 8000876:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000878:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <MX_ETH_Init+0x84>)
 800087a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800087e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_ETH_Init+0x84>)
 8000882:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <MX_ETH_Init+0x90>)
 8000884:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_ETH_Init+0x84>)
 8000888:	4a13      	ldr	r2, [pc, #76]	@ (80008d8 <MX_ETH_Init+0x94>)
 800088a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800088c:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_ETH_Init+0x84>)
 800088e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000892:	615a      	str	r2, [r3, #20]


  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <MX_ETH_Init+0x84>)
 8000896:	f002 fd11 	bl	80032bc <HAL_ETH_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008a0:	f000 f984 	bl	8000bac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008a4:	2238      	movs	r2, #56	@ 0x38
 80008a6:	2100      	movs	r1, #0
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <MX_ETH_Init+0x98>)
 80008aa:	f005 fe59 	bl	8006560 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_ETH_Init+0x98>)
 80008b0:	2221      	movs	r2, #33	@ 0x21
 80008b2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_ETH_Init+0x98>)
 80008b6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80008ba:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_ETH_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000224 	.word	0x20000224
 80008cc:	40028000 	.word	0x40028000
 80008d0:	2000086c 	.word	0x2000086c
 80008d4:	20000128 	.word	0x20000128
 80008d8:	20000088 	.word	0x20000088
 80008dc:	20000050 	.word	0x20000050

080008e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_TIM2_Init+0x94>)
 80008fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000902:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000904:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <MX_TIM2_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <MX_TIM2_Init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = SAMPLE_RATE/(FACTOR_BUS);//SAMPLE_RATE/2;//FBUS/SAMPLE_RATE;
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <MX_TIM2_Init+0x94>)
 8000912:	f240 727d 	movw	r2, #1917	@ 0x77d
 8000916:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000918:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_TIM2_Init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <MX_TIM2_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000924:	4813      	ldr	r0, [pc, #76]	@ (8000974 <MX_TIM2_Init+0x94>)
 8000926:	f003 ff6b 	bl	8004800 <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000930:	f000 f93c 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000938:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <MX_TIM2_Init+0x94>)
 8000942:	f004 f815 	bl	8004970 <HAL_TIM_ConfigClockSource>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800094c:	f000 f92e 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000950:	2320      	movs	r3, #32
 8000952:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_TIM2_Init+0x94>)
 800095e:	f004 fa09 	bl	8004d74 <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f920 	bl	8000bac <Error_Handler>
  }


}
 800096c:	bf00      	nop
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200002d4 	.word	0x200002d4

08000978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <MX_USART3_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 80009b0:	f004 fa5c 	bl	8004e6c <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 f8f7 	bl	8000bac <Error_Handler>
  }


}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000031c 	.word	0x2000031c
 80009c8:	40004800 	.word	0x40004800

080009cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_FS_PCD_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0


  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	2204      	movs	r2, #4
 80009dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	f003 f941 	bl	8003c96 <HAL_PCD_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 f8c7 	bl	8000bac <Error_Handler>
  }

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000360 	.word	0x20000360

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	@ 0x30
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	4b56      	ldr	r3, [pc, #344]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a55      	ldr	r2, [pc, #340]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b53      	ldr	r3, [pc, #332]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a4e      	ldr	r2, [pc, #312]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b48      	ldr	r3, [pc, #288]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a47      	ldr	r2, [pc, #284]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b45      	ldr	r3, [pc, #276]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b41      	ldr	r3, [pc, #260]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a40      	ldr	r2, [pc, #256]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a39      	ldr	r2, [pc, #228]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b37      	ldr	r3, [pc, #220]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a32      	ldr	r2, [pc, #200]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_GPIO_Init+0x174>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000aec:	482c      	ldr	r0, [pc, #176]	@ (8000ba0 <MX_GPIO_Init+0x178>)
 8000aee:	f003 f8b9 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEASURE_Pin_GPIO_Port,MEASURE_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000af8:	482a      	ldr	r0, [pc, #168]	@ (8000ba4 <MX_GPIO_Init+0x17c>)
 8000afa:	f003 f8b3 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2140      	movs	r1, #64	@ 0x40
 8000b02:	4829      	ldr	r0, [pc, #164]	@ (8000ba8 <MX_GPIO_Init+0x180>)
 8000b04:	f003 f8ae 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MEASURE_Pin */
  GPIO_InitStruct.Pin = MEASURE_Pin;
 8000b08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MEASURE_Pin_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4820      	ldr	r0, [pc, #128]	@ (8000ba4 <MX_GPIO_Init+0x17c>)
 8000b22:	f002 fef3 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4819      	ldr	r0, [pc, #100]	@ (8000ba4 <MX_GPIO_Init+0x17c>)
 8000b3e:	f002 fee5 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b42:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4811      	ldr	r0, [pc, #68]	@ (8000ba0 <MX_GPIO_Init+0x178>)
 8000b5c:	f002 fed6 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b60:	2340      	movs	r3, #64	@ 0x40
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_GPIO_Init+0x180>)
 8000b78:	f002 fec8 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b7c:	2380      	movs	r3, #128	@ 0x80
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <MX_GPIO_Init+0x180>)
 8000b90:	f002 febc 	bl	800390c <HAL_GPIO_Init>

}
 8000b94:	bf00      	nop
 8000b96:	3730      	adds	r7, #48	@ 0x30
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40021800 	.word	0x40021800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop

  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <main>:
float32_t OutputA[SAMPLES_PER_BLOCK]={0};
float32_t OutputB[SAMPLES_PER_BLOCK]={0};
extern UART_HandleTypeDef huart3;
uint8_t RxChar3;

int main(void){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af02      	add	r7, sp, #8

	Hard_Init();
 8000bbe:	f7ff fd2f 	bl	8000620 <Hard_Init>
	ADC_Init();
 8000bc2:	f7ff fcfb 	bl	80005bc <ADC_Init>
	DAC_Init();
 8000bc6:	f7ff fd11 	bl	80005ec <DAC_Init>
	HAL_UART_Transmit(&huart3, (const uint8_t *)"Hola mundo", sizeof("Hola mundo"), HAL_MAX_DELAY);
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	220b      	movs	r2, #11
 8000bd0:	4938      	ldr	r1, [pc, #224]	@ (8000cb4 <main+0xfc>)
 8000bd2:	4839      	ldr	r0, [pc, #228]	@ (8000cb8 <main+0x100>)
 8000bd4:	f004 f997 	bl	8004f06 <HAL_UART_Transmit>
	//arm_float_to_q31(float_iir_taps, iir_taps, IIR_TAP_NUM);

	//Inicializa los filtros
	//arm_fir_init_q31(&SFIR,FIR_TAP_NUM,fir_taps,fir_state,SAMPLES_PER_BLOCK);

	arm_fir_init_f32(&SFIR,FIR_TAP_NUM,float_fir_taps,fir_state,SAMPLES_PER_BLOCK);
 8000bd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	4b37      	ldr	r3, [pc, #220]	@ (8000cbc <main+0x104>)
 8000be0:	4a37      	ldr	r2, [pc, #220]	@ (8000cc0 <main+0x108>)
 8000be2:	2108      	movs	r1, #8
 8000be4:	4837      	ldr	r0, [pc, #220]	@ (8000cc4 <main+0x10c>)
 8000be6:	f001 fba0 	bl	800232a <arm_fir_init_f32>
	//arm_biquad_cascade_df1_init_f32(&SIIR,IIR_TAP_NUM/5,float_iir_taps,iir_state);

	HAL_UART_Receive_IT(&huart3,&RxChar3,1);
 8000bea:	2201      	movs	r2, #1
 8000bec:	4936      	ldr	r1, [pc, #216]	@ (8000cc8 <main+0x110>)
 8000bee:	4832      	ldr	r0, [pc, #200]	@ (8000cb8 <main+0x100>)
 8000bf0:	f004 fa1b 	bl	800502a <HAL_UART_Receive_IT>

	while(true){



		if(estado!=NO_PROCESAR){
 8000bf4:	4b35      	ldr	r3, [pc, #212]	@ (8000ccc <main+0x114>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0fb      	beq.n	8000bf4 <main+0x3c>
			switch (filter){
 8000bfc:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <main+0x118>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d02a      	beq.n	8000c5a <main+0xa2>
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	dc50      	bgt.n	8000caa <main+0xf2>
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <main+0x5a>
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d038      	beq.n	8000c82 <main+0xca>
 8000c10:	e04b      	b.n	8000caa <main+0xf2>
				case TALKTHROUGH:
						for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
 8000c12:	2300      	movs	r3, #0
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	e01b      	b.n	8000c50 <main+0x98>
							if(estado==PROCESAR_A)OutputA[i]=InputA[i];
 8000c18:	4b2c      	ldr	r3, [pc, #176]	@ (8000ccc <main+0x114>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d10a      	bne.n	8000c36 <main+0x7e>
 8000c20:	88fa      	ldrh	r2, [r7, #6]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	492b      	ldr	r1, [pc, #172]	@ (8000cd4 <main+0x11c>)
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	440a      	add	r2, r1
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	492a      	ldr	r1, [pc, #168]	@ (8000cd8 <main+0x120>)
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	440b      	add	r3, r1
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	e009      	b.n	8000c4a <main+0x92>
							else OutputB[i]=InputB[i];
 8000c36:	88fa      	ldrh	r2, [r7, #6]
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4928      	ldr	r1, [pc, #160]	@ (8000cdc <main+0x124>)
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	440a      	add	r2, r1
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	4927      	ldr	r1, [pc, #156]	@ (8000ce0 <main+0x128>)
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	601a      	str	r2, [r3, #0]
						for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	80fb      	strh	r3, [r7, #6]
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c56:	d3df      	bcc.n	8000c18 <main+0x60>
						}
						break;
 8000c58:	e027      	b.n	8000caa <main+0xf2>

				case IIR:
						if(estado==PROCESAR_A){
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <main+0x114>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d107      	bne.n	8000c72 <main+0xba>
							filter_bicuad_cascade(&SIIR, InputA, OutputA, SAMPLES_PER_BLOCK);
 8000c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c66:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd8 <main+0x120>)
 8000c68:	491a      	ldr	r1, [pc, #104]	@ (8000cd4 <main+0x11c>)
 8000c6a:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <main+0x12c>)
 8000c6c:	f000 fb1f 	bl	80012ae <arm_biquad_cascade_df1_f32>
						}else {
							filter_bicuad_cascade(&SIIR, InputB, OutputB, SAMPLES_PER_BLOCK);
						}
						break;
 8000c70:	e01b      	b.n	8000caa <main+0xf2>
							filter_bicuad_cascade(&SIIR, InputB, OutputB, SAMPLES_PER_BLOCK);
 8000c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c76:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce0 <main+0x128>)
 8000c78:	4918      	ldr	r1, [pc, #96]	@ (8000cdc <main+0x124>)
 8000c7a:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <main+0x12c>)
 8000c7c:	f000 fb17 	bl	80012ae <arm_biquad_cascade_df1_f32>
						break;
 8000c80:	e013      	b.n	8000caa <main+0xf2>

				case FIR:
						if(estado==PROCESAR_A){
 8000c82:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <main+0x114>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d107      	bne.n	8000c9a <main+0xe2>
							arm_fir_f32(&SFIR,InputA, OutputA, SAMPLES_PER_BLOCK);
 8000c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <main+0x120>)
 8000c90:	4910      	ldr	r1, [pc, #64]	@ (8000cd4 <main+0x11c>)
 8000c92:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <main+0x10c>)
 8000c94:	f000 fc86 	bl	80015a4 <arm_fir_f32>
						}else {
							arm_fir_f32(&SFIR,InputB, OutputB , SAMPLES_PER_BLOCK);
						}
						break;
 8000c98:	e006      	b.n	8000ca8 <main+0xf0>
							arm_fir_f32(&SFIR,InputB, OutputB , SAMPLES_PER_BLOCK);
 8000c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ce0 <main+0x128>)
 8000ca0:	490e      	ldr	r1, [pc, #56]	@ (8000cdc <main+0x124>)
 8000ca2:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <main+0x10c>)
 8000ca4:	f000 fc7e 	bl	80015a4 <arm_fir_f32>
						break;
 8000ca8:	bf00      	nop
			}
			estado=NO_PROCESAR;
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <main+0x114>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
		if(estado!=NO_PROCESAR){
 8000cb0:	e7a0      	b.n	8000bf4 <main+0x3c>
 8000cb2:	bf00      	nop
 8000cb4:	080065d0 	.word	0x080065d0
 8000cb8:	2000031c 	.word	0x2000031c
 8000cbc:	2000088c 	.word	0x2000088c
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000874 	.word	0x20000874
 8000cc8:	200058a8 	.word	0x200058a8
 8000ccc:	2000004c 	.word	0x2000004c
 8000cd0:	20000020 	.word	0x20000020
 8000cd4:	200018a8 	.word	0x200018a8
 8000cd8:	200038a8 	.word	0x200038a8
 8000cdc:	200028a8 	.word	0x200028a8
 8000ce0:	200048a8 	.word	0x200048a8
 8000ce4:	20000880 	.word	0x20000880

08000ce8 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	if(RxChar3=='1'){
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <HAL_UART_RxCpltCallback+0x48>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b31      	cmp	r3, #49	@ 0x31
 8000cf6:	d107      	bne.n	8000d08 <HAL_UART_RxCpltCallback+0x20>
		HAL_UART_Transmit(&huart3, (const uint8_t *)"hey", sizeof("hey"), HAL_MAX_DELAY);
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	490d      	ldr	r1, [pc, #52]	@ (8000d34 <HAL_UART_RxCpltCallback+0x4c>)
 8000d00:	480d      	ldr	r0, [pc, #52]	@ (8000d38 <HAL_UART_RxCpltCallback+0x50>)
 8000d02:	f004 f900 	bl	8004f06 <HAL_UART_Transmit>
 8000d06:	e00a      	b.n	8000d1e <HAL_UART_RxCpltCallback+0x36>
	}else if(RxChar3=='2'){
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <HAL_UART_RxCpltCallback+0x48>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b32      	cmp	r3, #50	@ 0x32
 8000d0e:	d106      	bne.n	8000d1e <HAL_UART_RxCpltCallback+0x36>
		HAL_UART_Transmit(&huart3, (const uint8_t *)"wow", sizeof("wow"), HAL_MAX_DELAY);
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	2204      	movs	r2, #4
 8000d16:	4909      	ldr	r1, [pc, #36]	@ (8000d3c <HAL_UART_RxCpltCallback+0x54>)
 8000d18:	4807      	ldr	r0, [pc, #28]	@ (8000d38 <HAL_UART_RxCpltCallback+0x50>)
 8000d1a:	f004 f8f4 	bl	8004f06 <HAL_UART_Transmit>
	}
	HAL_UART_Receive_IT(&huart3,&RxChar3,1);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4903      	ldr	r1, [pc, #12]	@ (8000d30 <HAL_UART_RxCpltCallback+0x48>)
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <HAL_UART_RxCpltCallback+0x50>)
 8000d24:	f004 f981 	bl	800502a <HAL_UART_Receive_IT>

}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200058a8 	.word	0x200058a8
 8000d34:	080065dc 	.word	0x080065dc
 8000d38:	2000031c 	.word	0x2000031c
 8000d3c:	080065e0 	.word	0x080065e0

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	4a08      	ldr	r2, [pc, #32]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <HAL_ADC_MspInit+0x7c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d127      	bne.n	8000e02 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	4a15      	ldr	r2, [pc, #84]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc2:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dee:	2303      	movs	r3, #3
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <HAL_ADC_MspInit+0x84>)
 8000dfe:	f002 fd85 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	@ 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40012000 	.word	0x40012000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <HAL_DAC_MspInit+0x7c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d127      	bne.n	8000e8a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <HAL_DAC_MspInit+0x80>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	4a15      	ldr	r2, [pc, #84]	@ (8000e98 <HAL_DAC_MspInit+0x80>)
 8000e44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <HAL_DAC_MspInit+0x80>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_DAC_MspInit+0x80>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e98 <HAL_DAC_MspInit+0x80>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <HAL_DAC_MspInit+0x80>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e72:	2310      	movs	r3, #16
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_DAC_MspInit+0x84>)
 8000e86:	f002 fd41 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	@ 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40007400 	.word	0x40007400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	@ 0x38
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a55      	ldr	r2, [pc, #340]	@ (8001014 <HAL_ETH_MspInit+0x174>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	f040 80a4 	bne.w	800100c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	4b53      	ldr	r3, [pc, #332]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	4a52      	ldr	r2, [pc, #328]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed4:	4b50      	ldr	r3, [pc, #320]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000edc:	623b      	str	r3, [r7, #32]
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
 8000ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000eea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef0:	4b49      	ldr	r3, [pc, #292]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	4b45      	ldr	r3, [pc, #276]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	4a44      	ldr	r2, [pc, #272]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0c:	4b42      	ldr	r3, [pc, #264]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	4a3d      	ldr	r2, [pc, #244]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f28:	4b3b      	ldr	r3, [pc, #236]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	4b37      	ldr	r3, [pc, #220]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	4a36      	ldr	r2, [pc, #216]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f44:	4b34      	ldr	r3, [pc, #208]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	4b30      	ldr	r3, [pc, #192]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f58:	4a2f      	ldr	r2, [pc, #188]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f60:	4b2d      	ldr	r3, [pc, #180]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f74:	4a28      	ldr	r2, [pc, #160]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7c:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <HAL_ETH_MspInit+0x178>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f88:	2332      	movs	r3, #50	@ 0x32
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f98:	230b      	movs	r3, #11
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	481e      	ldr	r0, [pc, #120]	@ (800101c <HAL_ETH_MspInit+0x17c>)
 8000fa4:	f002 fcb2 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fa8:	2386      	movs	r3, #134	@ 0x86
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb8:	230b      	movs	r3, #11
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4817      	ldr	r0, [pc, #92]	@ (8001020 <HAL_ETH_MspInit+0x180>)
 8000fc4:	f002 fca2 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fda:	230b      	movs	r3, #11
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480f      	ldr	r0, [pc, #60]	@ (8001024 <HAL_ETH_MspInit+0x184>)
 8000fe6:	f002 fc91 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fea:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ffc:	230b      	movs	r3, #11
 8000ffe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	4808      	ldr	r0, [pc, #32]	@ (8001028 <HAL_ETH_MspInit+0x188>)
 8001008:	f002 fc80 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	3738      	adds	r7, #56	@ 0x38
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40028000 	.word	0x40028000
 8001018:	40023800 	.word	0x40023800
 800101c:	40020800 	.word	0x40020800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40021800 	.word	0x40021800

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800103c:	d10d      	bne.n	800105a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <HAL_TIM_Base_MspInit+0x3c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <HAL_TIM_Base_MspInit+0x3c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6413      	str	r3, [r2, #64]	@ 0x40
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_TIM_Base_MspInit+0x3c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	@ (80010f0 <HAL_UART_MspInit+0x84>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d12c      	bne.n	80010e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <HAL_UART_MspInit+0x88>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	4a17      	ldr	r2, [pc, #92]	@ (80010f4 <HAL_UART_MspInit+0x88>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800109c:	6413      	str	r3, [r2, #64]	@ 0x40
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_UART_MspInit+0x88>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <HAL_UART_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a10      	ldr	r2, [pc, #64]	@ (80010f4 <HAL_UART_MspInit+0x88>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <HAL_UART_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d8:	2307      	movs	r3, #7
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <HAL_UART_MspInit+0x8c>)
 80010e4:	f002 fc12 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	@ 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40004800 	.word	0x40004800
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020c00 	.word	0x40020c00

080010fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800111c:	d13f      	bne.n	800119e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <HAL_PCD_MspInit+0xac>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a20      	ldr	r2, [pc, #128]	@ (80011a8 <HAL_PCD_MspInit+0xac>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <HAL_PCD_MspInit+0xac>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800113a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800114c:	230a      	movs	r3, #10
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4815      	ldr	r0, [pc, #84]	@ (80011ac <HAL_PCD_MspInit+0xb0>)
 8001158:	f002 fbd8 	bl	800390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800115c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	480e      	ldr	r0, [pc, #56]	@ (80011ac <HAL_PCD_MspInit+0xb0>)
 8001172:	f002 fbcb 	bl	800390c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <HAL_PCD_MspInit+0xac>)
 8001178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800117a:	4a0b      	ldr	r2, [pc, #44]	@ (80011a8 <HAL_PCD_MspInit+0xac>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001180:	6353      	str	r3, [r2, #52]	@ 0x34
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_PCD_MspInit+0xac>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <HAL_PCD_MspInit+0xac>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001190:	6453      	str	r3, [r2, #68]	@ 0x44
 8001192:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <HAL_PCD_MspInit+0xac>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	@ 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <NMI_Handler+0x4>

080011b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <MemManage_Handler+0x4>

080011c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001206:	f001 f901 	bl	800240c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001214:	4802      	ldr	r0, [pc, #8]	@ (8001220 <ADC_IRQHandler+0x10>)
 8001216:	f001 fa5f 	bl	80026d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001c8 	.word	0x200001c8

08001224 <USART3_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void USART3_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <USART3_IRQHandler+0x10>)
 800122a:	f003 ff2f 	bl	800508c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000031c 	.word	0x2000031c

08001238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	@ (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001294 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	@ (8001298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	@ (800129c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	@ (80012a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	@ (80012a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001286:	f7ff ffd7 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f005 f971 	bl	8006570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fc93 	bl	8000bb8 <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001294:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80012a0:	0800660c 	.word	0x0800660c
  ldr r2, =_sbss
 80012a4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80012a8:	200058b0 	.word	0x200058b0

080012ac <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <CAN1_RX0_IRQHandler>

080012ae <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b097      	sub	sp, #92	@ 0x5c
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	603b      	str	r3, [r7, #0]
  float32_t *pIn = pSrc;                         /*  source pointer            */
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	657b      	str	r3, [r7, #84]	@ 0x54
  float32_t *pOut = pDst;                        /*  destination pointer       */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	653b      	str	r3, [r7, #80]	@ 0x50
  float32_t *pState = S->pState;                 /*  pState pointer            */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float32_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  float32_t acc;                                 /*  Simulates the accumulator */
  float32_t b0, b1, b2, a1, a2;                  /*  Filter coefficients       */
  float32_t Xn1, Xn2, Yn1, Yn2;                  /*  Filter pState variables   */
  float32_t Xn;                                  /*  temporary input           */
  uint32_t sample, stage = S->numStages;         /*  loop counters             */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	633b      	str	r3, [r7, #48]	@ 0x30
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 80012d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012d8:	1d1a      	adds	r2, r3, #4
 80012da:	64ba      	str	r2, [r7, #72]	@ 0x48
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    b1 = *pCoeffs++;
 80012e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012e2:	1d1a      	adds	r2, r3, #4
 80012e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    b2 = *pCoeffs++;
 80012ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ec:	1d1a      	adds	r2, r3, #4
 80012ee:	64ba      	str	r2, [r7, #72]	@ 0x48
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    a1 = *pCoeffs++;
 80012f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012f6:	1d1a      	adds	r2, r3, #4
 80012f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	623b      	str	r3, [r7, #32]
    a2 = *pCoeffs++;
 80012fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001300:	1d1a      	adds	r2, r3, #4
 8001302:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	61fb      	str	r3, [r7, #28]

    /* Reading the pState values */
    Xn1 = pState[0];
 8001308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	647b      	str	r3, [r7, #68]	@ 0x44
    Xn2 = pState[1];
 800130e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	643b      	str	r3, [r7, #64]	@ 0x40
    Yn1 = pState[2];
 8001314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Yn2 = pState[3];
 800131a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	63bb      	str	r3, [r7, #56]	@ 0x38
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]    
     */

    sample = blockSize >> 2u;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while(sample > 0u)
 8001326:	e0ce      	b.n	80014c6 <arm_biquad_cascade_df1_f32+0x218>
    {
      /* Read the first input */
      Xn = *pIn++;
 8001328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800132a:	1d1a      	adds	r2, r3, #4
 800132c:	657a      	str	r2, [r7, #84]	@ 0x54
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn2 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8001332:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001336:	edd7 7a06 	vldr	s15, [r7, #24]
 800133a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800133e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001342:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001352:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001362:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800136e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001372:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn2;
 8001382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001384:	1d1a      	adds	r2, r3, #4
 8001386:	653a      	str	r2, [r7, #80]	@ 0x50
 8001388:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800138a:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the second input */
      Xn2 = *pIn++;
 800138c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800138e:	1d1a      	adds	r2, r3, #4
 8001390:	657a      	str	r2, [r7, #84]	@ 0x54
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	643b      	str	r3, [r7, #64]	@ 0x40

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn1 = (b0 * Xn2) + (b1 * Xn) + (b2 * Xn1) + (a1 * Yn2) + (a2 * Yn1);
 8001396:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800139a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800139e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80013a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80013aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80013b6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c2:	edd7 6a08 	vldr	s13, [r7, #32]
 80013c6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80013d6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80013da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn1;
 80013e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013e8:	1d1a      	adds	r2, r3, #4
 80013ea:	653a      	str	r2, [r7, #80]	@ 0x50
 80013ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013ee:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the third input */
      Xn1 = *pIn++;
 80013f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013f2:	1d1a      	adds	r2, r3, #4
 80013f4:	657a      	str	r2, [r7, #84]	@ 0x54
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	647b      	str	r3, [r7, #68]	@ 0x44

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn2 = (b0 * Xn1) + (b1 * Xn2) + (b2 * Xn) + (a1 * Yn1) + (a2 * Yn2);
 80013fa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013fe:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001406:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800140a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800140e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001416:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800141a:	edd7 7a06 	vldr	s15, [r7, #24]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001426:	edd7 6a08 	vldr	s13, [r7, #32]
 800142a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001436:	edd7 6a07 	vldr	s13, [r7, #28]
 800143a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800143e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001446:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn2;
 800144a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800144c:	1d1a      	adds	r2, r3, #4
 800144e:	653a      	str	r2, [r7, #80]	@ 0x50
 8001450:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001452:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the forth input */
      Xn = *pIn++;
 8001454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001456:	1d1a      	adds	r2, r3, #4
 8001458:	657a      	str	r2, [r7, #84]	@ 0x54
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn1 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn2) + (a2 * Yn1);
 800145e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001462:	edd7 7a06 	vldr	s15, [r7, #24]
 8001466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800146e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800147e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800148a:	edd7 6a08 	vldr	s13, [r7, #32]
 800148e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001496:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149a:	edd7 6a07 	vldr	s13, [r7, #28]
 800149e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80014a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014aa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn1;
 80014ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014b0:	1d1a      	adds	r2, r3, #4
 80014b2:	653a      	str	r2, [r7, #80]	@ 0x50
 80014b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014b6:	601a      	str	r2, [r3, #0]
      /* The states should be updated as:  */
      /* Xn2 = Xn1    */
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */
      Xn2 = Xn1;
 80014b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014ba:	643b      	str	r3, [r7, #64]	@ 0x40
      Xn1 = Xn;
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	647b      	str	r3, [r7, #68]	@ 0x44

      /* decrement the loop counter */
      sample--;
 80014c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014c2:	3b01      	subs	r3, #1
 80014c4:	637b      	str	r3, [r7, #52]	@ 0x34
    while(sample > 0u)
 80014c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f47f af2d 	bne.w	8001328 <arm_biquad_cascade_df1_f32+0x7a>

    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    sample = blockSize & 0x3u;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	637b      	str	r3, [r7, #52]	@ 0x34

    while(sample > 0u)
 80014d6:	e03c      	b.n	8001552 <arm_biquad_cascade_df1_f32+0x2a4>
    {
      /* Read the input */
      Xn = *pIn++;
 80014d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014da:	1d1a      	adds	r2, r3, #4
 80014dc:	657a      	str	r2, [r7, #84]	@ 0x54
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 80014e2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ee:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80014f2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80014f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001502:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001512:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001522:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152e:	edc7 7a05 	vstr	s15, [r7, #20]

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = acc;
 8001532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001534:	1d1a      	adds	r2, r3, #4
 8001536:	653a      	str	r2, [r7, #80]	@ 0x50
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	601a      	str	r2, [r3, #0]
      /* The states should be updated as:    */
      /* Xn2 = Xn1    */
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */
      Xn2 = Xn1;
 800153c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800153e:	643b      	str	r3, [r7, #64]	@ 0x40
      Xn1 = Xn;
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	647b      	str	r3, [r7, #68]	@ 0x44
      Yn2 = Yn1;
 8001544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001546:	63bb      	str	r3, [r7, #56]	@ 0x38
      Yn1 = acc;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* decrement the loop counter */
      sample--;
 800154c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800154e:	3b01      	subs	r3, #1
 8001550:	637b      	str	r3, [r7, #52]	@ 0x34
    while(sample > 0u)
 8001552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1bf      	bne.n	80014d8 <arm_biquad_cascade_df1_f32+0x22a>

    }

    /*  Store the updated state variables back into the pState array */
    *pState++ = Xn1;
 8001558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800155a:	1d1a      	adds	r2, r3, #4
 800155c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800155e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001560:	601a      	str	r2, [r3, #0]
    *pState++ = Xn2;
 8001562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001564:	1d1a      	adds	r2, r3, #4
 8001566:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001568:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800156a:	601a      	str	r2, [r3, #0]
    *pState++ = Yn1;
 800156c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800156e:	1d1a      	adds	r2, r3, #4
 8001570:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001572:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001574:	601a      	str	r2, [r3, #0]
    *pState++ = Yn2;
 8001576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001578:	1d1a      	adds	r2, r3, #4
 800157a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800157c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800157e:	601a      	str	r2, [r3, #0]

    /*  The first stage goes from the input buffer to the output buffer. */
    /*  Subsequent numStages  occur in-place in the output buffer */
    pIn = pDst;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Reset the output pointer */
    pOut = pDst;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	653b      	str	r3, [r7, #80]	@ 0x50

    /* decrement the loop counter */
    stage--;
 8001588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800158a:	3b01      	subs	r3, #1
 800158c:	633b      	str	r3, [r7, #48]	@ 0x30

  } while(stage > 0u);
 800158e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001590:	2b00      	cmp	r3, #0
 8001592:	f47f aea0 	bne.w	80012d6 <arm_biquad_cascade_df1_f32+0x28>

  } while(stage > 0u);

#endif /*   #ifndef ARM_MATH_CM0_FAMILY         */

}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	375c      	adds	r7, #92	@ 0x5c
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b0a7      	sub	sp, #156	@ 0x9c
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */
   float32_t p0,p1,p2,p3,p4,p5,p6,p7;             /* Temporary product values */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80015d0:	3b01      	subs	r3, #1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]  
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]  
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]  
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]  
    */
   blkCnt = blockSize >> 3;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	08db      	lsrs	r3, r3, #3
 80015de:	643b      	str	r3, [r7, #64]	@ 0x40

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.  
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 80015e0:	f000 bdf8 	b.w	80021d4 <arm_fir_f32+0xc30>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	1d13      	adds	r3, r2, #4
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015ee:	1d19      	adds	r1, r3, #4
 80015f0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	1d13      	adds	r3, r2, #4
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001602:	1d19      	adds	r1, r3, #4
 8001604:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	1d13      	adds	r3, r2, #4
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001616:	1d19      	adds	r1, r3, #4
 8001618:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	1d13      	adds	r3, r2, #4
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800162a:	1d19      	adds	r1, r3, #4
 800162c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      acc1 = 0.0f;
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      acc2 = 0.0f;
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	67fb      	str	r3, [r7, #124]	@ 0x7c
      acc3 = 0.0f;
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	67bb      	str	r3, [r7, #120]	@ 0x78
      acc4 = 0.0f;
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	677b      	str	r3, [r7, #116]	@ 0x74
      acc5 = 0.0f;
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	673b      	str	r3, [r7, #112]	@ 0x70
      acc6 = 0.0f;
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	66fb      	str	r3, [r7, #108]	@ 0x6c
      acc7 = 0.0f;		
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	66bb      	str	r3, [r7, #104]	@ 0x68

      /* Initialize state pointer */
      px = pState;
 8001668:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800166c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Initialize coeff pointer */
      pb = (pCoeffs);		
 8001670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001672:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   
      /* This is separated from the others to avoid 
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	1d13      	adds	r3, r2, #4
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001680:	1d19      	adds	r1, r3, #4
 8001682:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	1d13      	adds	r3, r2, #4
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001694:	1d19      	adds	r1, r3, #4
 8001696:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	1d13      	adds	r3, r2, #4
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016a8:	1d19      	adds	r1, r3, #4
 80016aa:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	1d13      	adds	r3, r2, #4
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016bc:	1d19      	adds	r1, r3, #4
 80016be:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 80016c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016ca:	1d1a      	adds	r2, r3, #4
 80016cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	667b      	str	r3, [r7, #100]	@ 0x64
      x1 = *px++;
 80016d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016d8:	1d1a      	adds	r2, r3, #4
 80016da:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	663b      	str	r3, [r7, #96]	@ 0x60
      x2 = *px++;
 80016e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016e6:	1d1a      	adds	r2, r3, #4
 80016e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
      x3 = *px++;
 80016f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016f4:	1d1a      	adds	r2, r3, #4
 80016f6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	65bb      	str	r3, [r7, #88]	@ 0x58
      x4 = *px++;
 80016fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001702:	1d1a      	adds	r2, r3, #4
 8001704:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	657b      	str	r3, [r7, #84]	@ 0x54
      x5 = *px++;
 800170c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001710:	1d1a      	adds	r2, r3, #4
 8001712:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	653b      	str	r3, [r7, #80]	@ 0x50
      x6 = *px++;
 800171a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800171e:	1d1a      	adds	r2, r3, #4
 8001720:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3u;
 8001728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	647b      	str	r3, [r7, #68]	@ 0x44
      
      /* Loop over the number of taps.  Unroll by a factor of 8.  
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
 800172e:	f000 bc73 	b.w	8002018 <arm_fir_f32+0xa74>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8001732:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001736:	1d1a      	adds	r2, r3, #4
 8001738:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 8001740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001744:	1d1a      	adds	r2, r3, #4
 8001746:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	633b      	str	r3, [r7, #48]	@ 0x30

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         p0 = x0 * c0;
 800174e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001752:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         p1 = x1 * c0;
 800175e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001762:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         p2 = x2 * c0;
 800176e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001772:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         p3 = x3 * c0;
 800177e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001782:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178a:	edc7 7a08 	vstr	s15, [r7, #32]

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         p4 = x4 * c0;
 800178e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001792:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	edc7 7a07 	vstr	s15, [r7, #28]

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         p5 = x5 * c0;
 800179e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80017a2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	edc7 7a06 	vstr	s15, [r7, #24]

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         p6 = x6 * c0;
 80017ae:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80017b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ba:	edc7 7a05 	vstr	s15, [r7, #20]

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         p7 = x7 * c0;
 80017be:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80017c2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ca:	edc7 7a04 	vstr	s15, [r7, #16]
         
         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 80017ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017d2:	1d1a      	adds	r2, r3, #4
 80017d4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 80017dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017e0:	1d1a      	adds	r2, r3, #4
 80017e2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	667b      	str	r3, [r7, #100]	@ 0x64
         
         acc0 += p0;
 80017ea:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80017ee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f6:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 80017fa:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80017fe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001806:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 800180a:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800180e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001816:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 800181a:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800181e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001826:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 800182a:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800182e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 800183a:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800183e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001846:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 800184a:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800184e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001856:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 800185a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800185e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001866:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68


         /* Perform the multiply-accumulate */
         p0 = x1 * c0;
 800186a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800186e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001876:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x2 * c0;   
 800187a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800187e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001886:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x3 * c0;   
 800188a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800188e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001896:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x4 * c0;   
 800189a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800189e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x5 * c0;   
 80018aa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80018ae:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b6:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x6 * c0;   
 80018ba:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80018be:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c6:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x7 * c0;   
 80018ca:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80018ce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x0 * c0;   
 80018da:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80018de:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	edc7 7a04 	vstr	s15, [r7, #16]
         
         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 80018ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018ee:	1d1a      	adds	r2, r3, #4
 80018f0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 80018f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018fc:	1d1a      	adds	r2, r3, #4
 80018fe:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	663b      	str	r3, [r7, #96]	@ 0x60
         
         acc0 += p0;
 8001906:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 800190a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001916:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800191a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800191e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001922:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001926:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800192a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800192e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001932:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001936:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800193a:	edd7 7a08 	vldr	s15, [r7, #32]
 800193e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001942:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001946:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800194a:	edd7 7a07 	vldr	s15, [r7, #28]
 800194e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001952:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001956:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800195a:	edd7 7a06 	vldr	s15, [r7, #24]
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001962:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001966:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800196a:	edd7 7a05 	vldr	s15, [r7, #20]
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001976:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800197a:	edd7 7a04 	vldr	s15, [r7, #16]
 800197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001982:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x2 * c0;
 8001986:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800198a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800198e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001992:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x3 * c0;   
 8001996:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800199a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x4 * c0;   
 80019a6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80019aa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x5 * c0;   
 80019b6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80019ba:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c2:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x6 * c0;   
 80019c6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80019ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d2:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x7 * c0;   
 80019d6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80019da:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e2:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x0 * c0;   
 80019e6:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80019ea:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f2:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x1 * c0;   
 80019f6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80019fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a02:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a0a:	1d1a      	adds	r2, r3, #4
 8001a0c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 8001a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a18:	1d1a      	adds	r2, r3, #4
 8001a1a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
         
         acc0 += p0;
 8001a22:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001a26:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001a32:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001a36:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001a42:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001a46:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001a52:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001a56:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001a62:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001a66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001a72:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001a76:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001a82:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001a92:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001a96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x3 * c0;
 8001aa2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001aa6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x4 * c0;   
 8001ab2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001ab6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x5 * c0;   
 8001ac2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001ac6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ace:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x6 * c0;   
 8001ad2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ad6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ade:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x7 * c0;   
 8001ae2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001ae6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aee:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x0 * c0;   
 8001af2:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001af6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afe:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x1 * c0;   
 8001b02:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001b06:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0e:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x2 * c0;   
 8001b12:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001b16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b26:	1d1a      	adds	r2, r3, #4
 8001b28:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 8001b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b34:	1d1a      	adds	r2, r3, #4
 8001b36:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
         
         acc0 += p0;
 8001b3e:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001b42:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001b4e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001b52:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001b5e:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001b62:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001b6e:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001b72:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7a:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001b7e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001b82:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001b8e:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001b92:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001b9e:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001bae:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001bb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bba:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x4 * c0;
 8001bbe:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001bc2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x5 * c0;   
 8001bce:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001bd2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bda:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x6 * c0;   
 8001bde:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001be2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x7 * c0;   
 8001bee:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001bf2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfa:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x0 * c0;   
 8001bfe:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001c02:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0a:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x1 * c0;   
 8001c0e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001c12:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1a:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x2 * c0;   
 8001c1e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001c22:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2a:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x3 * c0;   
 8001c2e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001c32:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3a:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c42:	1d1a      	adds	r2, r3, #4
 8001c44:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 8001c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c50:	1d1a      	adds	r2, r3, #4
 8001c52:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	657b      	str	r3, [r7, #84]	@ 0x54
         
         acc0 += p0;
 8001c5a:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001c5e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c66:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001c6a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001c6e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001c7a:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001c7e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001c8a:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001c8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c96:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001c9a:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001c9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca6:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001caa:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001cae:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb6:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001cba:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001cbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001cca:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001cce:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd6:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x5 * c0;
 8001cda:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001cde:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x6 * c0;   
 8001cea:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001cee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x7 * c0;   
 8001cfa:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001cfe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x0 * c0;   
 8001d0a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001d0e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d16:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x1 * c0;   
 8001d1a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001d1e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d26:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x2 * c0;   
 8001d2a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001d2e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d36:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x3 * c0;   
 8001d3a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001d3e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d46:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x4 * c0;   
 8001d4a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001d4e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001d5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d5e:	1d1a      	adds	r2, r3, #4
 8001d60:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8001d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d6c:	1d1a      	adds	r2, r3, #4
 8001d6e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	653b      	str	r3, [r7, #80]	@ 0x50
         
         acc0 += p0;
 8001d76:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001d7a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d82:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001d86:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001d8a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d92:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001d96:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001d9a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001da6:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001daa:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db2:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001db6:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001dba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001dc6:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001dca:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd2:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001dd6:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001dda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001de6:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x6 * c0;
 8001df6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001dfa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e02:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x7 * c0;   
 8001e06:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001e0a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e12:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x0 * c0;   
 8001e16:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001e1a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e22:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x1 * c0;   
 8001e26:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001e2a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e32:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x2 * c0;   
 8001e36:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001e3a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e42:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x3 * c0;   
 8001e46:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001e4a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e52:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x4 * c0;   
 8001e56:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001e5a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e62:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x5 * c0;   
 8001e66:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e6a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e72:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e7a:	1d1a      	adds	r2, r3, #4
 8001e7c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8001e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e88:	1d1a      	adds	r2, r3, #4
 8001e8a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
         
         acc0 += p0;
 8001e92:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001e96:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001ea2:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001ea6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eae:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001eb2:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001eb6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebe:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001ec2:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001ec6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ece:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001ed2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001ed6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ede:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001ee2:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001ee6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001ef2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001ef6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8001f02:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001f06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Perform the multiply-accumulates */      
         p0 = x7 * c0;
 8001f12:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001f16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x0 * c0;   
 8001f22:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001f26:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x1 * c0;   
 8001f32:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001f36:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x2 * c0;   
 8001f42:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001f46:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4e:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x3 * c0;   
 8001f52:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001f56:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5e:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x4 * c0;   
 8001f62:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001f66:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x5 * c0;   
 8001f72:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001f76:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7e:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x6 * c0;   
 8001f82:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001f86:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8e:	edc7 7a04 	vstr	s15, [r7, #16]

         tapCnt--;
 8001f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f94:	3b01      	subs	r3, #1
 8001f96:	647b      	str	r3, [r7, #68]	@ 0x44
         
         acc0 += p0;
 8001f98:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001f9c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa4:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 8001fa8:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001fac:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb4:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8001fb8:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001fbc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc4:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8001fc8:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001fcc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd4:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8001fd8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001fdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8001fe8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001fec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff4:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8001ff8:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002004:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8002008:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800200c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002014:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
      while(tapCnt > 0u)
 8002018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800201a:	2b00      	cmp	r3, #0
 800201c:	f47f ab89 	bne.w	8001732 <arm_fir_f32+0x18e>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 8002020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	647b      	str	r3, [r7, #68]	@ 0x44

      while(tapCnt > 0u)
 8002028:	e09e      	b.n	8002168 <arm_fir_f32+0xbc4>
      {
         /* Read coefficients */
         c0 = *(pb++);
 800202a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800202e:	1d1a      	adds	r2, r3, #4
 8002030:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	637b      	str	r3, [r7, #52]	@ 0x34

         /* Fetch 1 state variable */
         x7 = *(px++);
 8002038:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800203c:	1d1a      	adds	r2, r3, #4
 800203e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	633b      	str	r3, [r7, #48]	@ 0x30

         /* Perform the multiply-accumulates */      
         p0 = x0 * c0;
 8002046:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800204a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800204e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002052:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
         p1 = x1 * c0;   
 8002056:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800205a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002062:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
         p2 = x2 * c0;   
 8002066:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800206a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800206e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002072:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         p3 = x3 * c0;   
 8002076:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800207a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x4 * c0;   
 8002086:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800208a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800208e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002092:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x5 * c0;   
 8002096:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800209a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a2:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x6 * c0;   
 80020a6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80020aa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b2:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x7 * c0;   
 80020b6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80020ba:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c2:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Reuse the present sample states for next sample */
         x0 = x1;
 80020c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020c8:	667b      	str	r3, [r7, #100]	@ 0x64
         x1 = x2;
 80020ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020cc:	663b      	str	r3, [r7, #96]	@ 0x60
         x2 = x3;
 80020ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
         x3 = x4;
 80020d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d4:	65bb      	str	r3, [r7, #88]	@ 0x58
         x4 = x5;
 80020d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020d8:	657b      	str	r3, [r7, #84]	@ 0x54
         x5 = x6;
 80020da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020dc:	653b      	str	r3, [r7, #80]	@ 0x50
         x6 = x7;
 80020de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
         
         acc0 += p0;
 80020e2:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80020e6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         acc1 += p1;
 80020f2:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80020f6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80020fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fe:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         acc2 += p2;
 8002102:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002106:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800210a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         acc3 += p3;
 8002112:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002116:	edd7 7a08 	vldr	s15, [r7, #32]
 800211a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
         acc4 += p4;
 8002122:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8002126:	edd7 7a07 	vldr	s15, [r7, #28]
 800212a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212e:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         acc5 += p5;
 8002132:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002136:	edd7 7a06 	vldr	s15, [r7, #24]
 800213a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         acc6 += p6;
 8002142:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002146:	edd7 7a05 	vldr	s15, [r7, #20]
 800214a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
         acc7 += p7;
 8002152:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002156:	edd7 7a04 	vldr	s15, [r7, #16]
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

         /* Decrement the loop counter */
         tapCnt--;
 8002162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002164:	3b01      	subs	r3, #1
 8002166:	647b      	str	r3, [r7, #68]	@ 0x44
      while(tapCnt > 0u)
 8002168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800216a:	2b00      	cmp	r3, #0
 800216c:	f47f af5d 	bne.w	800202a <arm_fir_f32+0xa86>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 8002170:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002174:	3320      	adds	r3, #32
 8002176:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1d1a      	adds	r2, r3, #4
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002184:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	1d1a      	adds	r2, r3, #4
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002190:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	1d1a      	adds	r2, r3, #4
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800219a:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	1d1a      	adds	r2, r3, #4
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80021a4:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	1d1a      	adds	r2, r3, #4
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021ae:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	1d1a      	adds	r2, r3, #4
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80021b8:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	1d1a      	adds	r2, r3, #4
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80021c2:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	1d1a      	adds	r2, r3, #4
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80021cc:	601a      	str	r2, [r3, #0]

      blkCnt--;
 80021ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d0:	3b01      	subs	r3, #1
 80021d2:	643b      	str	r3, [r7, #64]	@ 0x40
   while(blkCnt > 0u)
 80021d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f47f aa04 	bne.w	80015e4 <arm_fir_f32+0x40>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.  
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	643b      	str	r3, [r7, #64]	@ 0x40

   while(blkCnt > 0u)
 80021e4:	e040      	b.n	8002268 <arm_fir_f32+0xcc4>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	1d13      	adds	r3, r2, #4
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021f0:	1d19      	adds	r1, r3, #4
 80021f2:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      /* Initialize state pointer */
      px = pState;
 8002202:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002206:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 800220a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800220c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      i = numTaps;
 8002210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002212:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 8002214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002218:	1d1a      	adds	r2, r3, #4
 800221a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800221e:	ed93 7a00 	vldr	s14, [r3]
 8002222:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002226:	1d1a      	adds	r2, r3, #4
 8002228:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002234:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223c:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         i--;
 8002240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002242:	3b01      	subs	r3, #1
 8002244:	64bb      	str	r3, [r7, #72]	@ 0x48

      } while(i > 0u);
 8002246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e3      	bne.n	8002214 <arm_fir_f32+0xc70>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	1d1a      	adds	r2, r3, #4
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002256:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 8002258:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800225c:	3304      	adds	r3, #4
 800225e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      blkCnt--;
 8002262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002264:	3b01      	subs	r3, #1
 8002266:	643b      	str	r3, [r7, #64]	@ 0x40
   while(blkCnt > 0u)
 8002268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1bb      	bne.n	80021e6 <arm_fir_f32+0xc42>
   /* Processing is complete.  
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.  
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

   tapCnt = (numTaps - 1u) >> 2u;
 8002276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002278:	3b01      	subs	r3, #1
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	647b      	str	r3, [r7, #68]	@ 0x44

   /* copy data */
   while(tapCnt > 0u)
 800227e:	e032      	b.n	80022e6 <arm_fir_f32+0xd42>
   {
      *pStateCurnt++ = *pState++;
 8002280:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002284:	1d13      	adds	r3, r2, #4
 8002286:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800228a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800228e:	1d19      	adds	r1, r3, #4
 8002290:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8002298:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800229c:	1d13      	adds	r3, r2, #4
 800229e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022a6:	1d19      	adds	r1, r3, #4
 80022a8:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 80022b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022b4:	1d13      	adds	r3, r2, #4
 80022b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022be:	1d19      	adds	r1, r3, #4
 80022c0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 80022c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022cc:	1d13      	adds	r3, r2, #4
 80022ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022d6:	1d19      	adds	r1, r3, #4
 80022d8:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 80022e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022e2:	3b01      	subs	r3, #1
 80022e4:	647b      	str	r3, [r7, #68]	@ 0x44
   while(tapCnt > 0u)
 80022e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1c9      	bne.n	8002280 <arm_fir_f32+0xcdc>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 80022ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ee:	3b01      	subs	r3, #1
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	647b      	str	r3, [r7, #68]	@ 0x44

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 80022f6:	e00e      	b.n	8002316 <arm_fir_f32+0xd72>
   {
      *pStateCurnt++ = *pState++;
 80022f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022fc:	1d13      	adds	r3, r2, #4
 80022fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002302:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002306:	1d19      	adds	r1, r3, #4
 8002308:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8002310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002312:	3b01      	subs	r3, #1
 8002314:	647b      	str	r3, [r7, #68]	@ 0x44
   while(tapCnt > 0u)
 8002316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ed      	bne.n	80022f8 <arm_fir_f32+0xd54>
   }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	379c      	adds	r7, #156	@ 0x9c
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	460b      	mov	r3, r1
 8002338:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	897a      	ldrh	r2, [r7, #10]
 800233e:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 8002346:	897a      	ldrh	r2, [r7, #10]
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	4413      	add	r3, r2
 800234c:	3b01      	subs	r3, #1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	461a      	mov	r2, r3
 8002352:	2100      	movs	r1, #0
 8002354:	6838      	ldr	r0, [r7, #0]
 8002356:	f004 f903 	bl	8006560 <memset>

  /* Assign state pointer */
  S->pState = pState;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	605a      	str	r2, [r3, #4]

}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800236c:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0d      	ldr	r2, [pc, #52]	@ (80023a8 <HAL_Init+0x40>)
 8002372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <HAL_Init+0x40>)
 800237e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002384:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <HAL_Init+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a07      	ldr	r2, [pc, #28]	@ (80023a8 <HAL_Init+0x40>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002390:	2003      	movs	r0, #3
 8002392:	f000 fdd7 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002396:	2000      	movs	r0, #0
 8002398:	f000 f808 	bl	80023ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800239c:	f7fe fcd0 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00

080023ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b4:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <HAL_InitTick+0x54>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <HAL_InitTick+0x58>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fdef 	bl	8002fae <HAL_SYSTICK_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00e      	b.n	80023f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b0f      	cmp	r3, #15
 80023de:	d80a      	bhi.n	80023f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e0:	2200      	movs	r2, #0
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f000 fdb7 	bl	8002f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ec:	4a06      	ldr	r2, [pc, #24]	@ (8002408 <HAL_InitTick+0x5c>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e000      	b.n	80023f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000024 	.word	0x20000024
 8002404:	2000002c 	.word	0x2000002c
 8002408:	20000028 	.word	0x20000028

0800240c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_IncTick+0x20>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_IncTick+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a04      	ldr	r2, [pc, #16]	@ (8002430 <HAL_IncTick+0x24>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	2000002c 	.word	0x2000002c
 8002430:	200058ac 	.word	0x200058ac

08002434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b03      	ldr	r3, [pc, #12]	@ (8002448 <HAL_GetTick+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200058ac 	.word	0x200058ac

0800244c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff ffee 	bl	8002434 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d005      	beq.n	8002472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002466:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_Delay+0x44>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002472:	bf00      	nop
 8002474:	f7ff ffde 	bl	8002434 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d8f7      	bhi.n	8002474 <HAL_Delay+0x28>
  {
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000002c 	.word	0x2000002c

08002494 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e033      	b.n	8002512 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe fc6c 	bl	8000d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024da:	f023 0302 	bic.w	r3, r3, #2
 80024de:	f043 0202 	orr.w	r2, r3, #2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fb5a 	bl	8002ba0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
 8002502:	e001      	b.n	8002508 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Start_IT+0x1a>
 8002532:	2302      	movs	r3, #2
 8002534:	e0bd      	b.n	80026b2 <HAL_ADC_Start_IT+0x196>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d018      	beq.n	800257e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800255c:	4b58      	ldr	r3, [pc, #352]	@ (80026c0 <HAL_ADC_Start_IT+0x1a4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a58      	ldr	r2, [pc, #352]	@ (80026c4 <HAL_ADC_Start_IT+0x1a8>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0c9a      	lsrs	r2, r3, #18
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002570:	e002      	b.n	8002578 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3b01      	subs	r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f9      	bne.n	8002572 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	f040 8085 	bne.w	8002698 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025cc:	d106      	bne.n	80025dc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f023 0206 	bic.w	r2, r3, #6
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80025da:	e002      	b.n	80025e2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ea:	4b37      	ldr	r3, [pc, #220]	@ (80026c8 <HAL_ADC_Start_IT+0x1ac>)
 80025ec:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025f6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002606:	f043 0320 	orr.w	r3, r3, #32
 800260a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2b00      	cmp	r3, #0
 8002616:	d12a      	bne.n	800266e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a2b      	ldr	r2, [pc, #172]	@ (80026cc <HAL_ADC_Start_IT+0x1b0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d015      	beq.n	800264e <HAL_ADC_Start_IT+0x132>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2a      	ldr	r2, [pc, #168]	@ (80026d0 <HAL_ADC_Start_IT+0x1b4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d105      	bne.n	8002638 <HAL_ADC_Start_IT+0x11c>
 800262c:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <HAL_ADC_Start_IT+0x1ac>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a25      	ldr	r2, [pc, #148]	@ (80026d4 <HAL_ADC_Start_IT+0x1b8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d136      	bne.n	80026b0 <HAL_ADC_Start_IT+0x194>
 8002642:	4b21      	ldr	r3, [pc, #132]	@ (80026c8 <HAL_ADC_Start_IT+0x1ac>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d130      	bne.n	80026b0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d129      	bne.n	80026b0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	e020      	b.n	80026b0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a16      	ldr	r2, [pc, #88]	@ (80026cc <HAL_ADC_Start_IT+0x1b0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d11b      	bne.n	80026b0 <HAL_ADC_Start_IT+0x194>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d114      	bne.n	80026b0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	e00b      	b.n	80026b0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f043 0210 	orr.w	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000024 	.word	0x20000024
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	40012300 	.word	0x40012300
 80026cc:	40012000 	.word	0x40012000
 80026d0:	40012100 	.word	0x40012100
 80026d4:	40012200 	.word	0x40012200

080026d8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d049      	beq.n	80027a2 <HAL_ADC_IRQHandler+0xca>
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d046      	beq.n	80027a2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d12b      	bne.n	8002792 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	d127      	bne.n	8002792 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800274c:	2b00      	cmp	r3, #0
 800274e:	d006      	beq.n	800275e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800275a:	2b00      	cmp	r3, #0
 800275c:	d119      	bne.n	8002792 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0220 	bic.w	r2, r2, #32
 800276c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fd fea2 	bl	80004dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0212 	mvn.w	r2, #18
 80027a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d057      	beq.n	8002868 <HAL_ADC_IRQHandler+0x190>
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d054      	beq.n	8002868 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d139      	bne.n	8002858 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d12b      	bne.n	8002858 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	d124      	bne.n	8002858 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002818:	2b00      	cmp	r3, #0
 800281a:	d11d      	bne.n	8002858 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002820:	2b00      	cmp	r3, #0
 8002822:	d119      	bne.n	8002858 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002832:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fa9d 	bl	8002d98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f06f 020c 	mvn.w	r2, #12
 8002866:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002876:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d017      	beq.n	80028ae <HAL_ADC_IRQHandler+0x1d6>
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d014      	beq.n	80028ae <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10d      	bne.n	80028ae <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f837 	bl	8002912 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0201 	mvn.w	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028bc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x218>
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d012      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f06f 0220 	mvn.w	r2, #32
 80028de:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f820 	bl	8002926 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f06f 0220 	mvn.w	r2, #32
 80028ee:	601a      	str	r2, [r3, #0]
  }
}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1c>
 8002954:	2302      	movs	r3, #2
 8002956:	e113      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x244>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b09      	cmp	r3, #9
 8002966:	d925      	bls.n	80029b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68d9      	ldr	r1, [r3, #12]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	3b1e      	subs	r3, #30
 800297e:	2207      	movs	r2, #7
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43da      	mvns	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	400a      	ands	r2, r1
 800298c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68d9      	ldr	r1, [r3, #12]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	4603      	mov	r3, r0
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4403      	add	r3, r0
 80029a6:	3b1e      	subs	r3, #30
 80029a8:	409a      	lsls	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	e022      	b.n	80029fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6919      	ldr	r1, [r3, #16]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	2207      	movs	r2, #7
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	400a      	ands	r2, r1
 80029d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6919      	ldr	r1, [r3, #16]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4618      	mov	r0, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4403      	add	r3, r0
 80029f0:	409a      	lsls	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d824      	bhi.n	8002a4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	3b05      	subs	r3, #5
 8002a14:	221f      	movs	r2, #31
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	400a      	ands	r2, r1
 8002a22:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b05      	subs	r3, #5
 8002a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a4a:	e04c      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d824      	bhi.n	8002a9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	3b23      	subs	r3, #35	@ 0x23
 8002a66:	221f      	movs	r2, #31
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	400a      	ands	r2, r1
 8002a74:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b23      	subs	r3, #35	@ 0x23
 8002a90:	fa00 f203 	lsl.w	r2, r0, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a9c:	e023      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	3b41      	subs	r3, #65	@ 0x41
 8002ab0:	221f      	movs	r2, #31
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	400a      	ands	r2, r1
 8002abe:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4618      	mov	r0, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b41      	subs	r3, #65	@ 0x41
 8002ada:	fa00 f203 	lsl.w	r2, r0, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae6:	4b29      	ldr	r3, [pc, #164]	@ (8002b8c <HAL_ADC_ConfigChannel+0x250>)
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a28      	ldr	r2, [pc, #160]	@ (8002b90 <HAL_ADC_ConfigChannel+0x254>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10f      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1d8>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b12      	cmp	r3, #18
 8002afa:	d10b      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1d      	ldr	r2, [pc, #116]	@ (8002b90 <HAL_ADC_ConfigChannel+0x254>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d12b      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x23a>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1c      	ldr	r2, [pc, #112]	@ (8002b94 <HAL_ADC_ConfigChannel+0x258>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d003      	beq.n	8002b30 <HAL_ADC_ConfigChannel+0x1f4>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b11      	cmp	r3, #17
 8002b2e:	d122      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a11      	ldr	r2, [pc, #68]	@ (8002b94 <HAL_ADC_ConfigChannel+0x258>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d111      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b52:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_ADC_ConfigChannel+0x25c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a11      	ldr	r2, [pc, #68]	@ (8002b9c <HAL_ADC_ConfigChannel+0x260>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	0c9a      	lsrs	r2, r3, #18
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b68:	e002      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f9      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40012300 	.word	0x40012300
 8002b90:	40012000 	.word	0x40012000
 8002b94:	10000012 	.word	0x10000012
 8002b98:	20000024 	.word	0x20000024
 8002b9c:	431bde83 	.word	0x431bde83

08002ba0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba8:	4b79      	ldr	r3, [pc, #484]	@ (8002d90 <ADC_Init+0x1f0>)
 8002baa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	021a      	lsls	r2, r3, #8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002bf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	4a58      	ldr	r2, [pc, #352]	@ (8002d94 <ADC_Init+0x1f4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d022      	beq.n	8002c7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6899      	ldr	r1, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6899      	ldr	r1, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	e00f      	b.n	8002c9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0202 	bic.w	r2, r2, #2
 8002cac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6899      	ldr	r1, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7e1b      	ldrb	r3, [r3, #24]
 8002cb8:	005a      	lsls	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01b      	beq.n	8002d04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	035a      	lsls	r2, r3, #13
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	e007      	b.n	8002d14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	051a      	lsls	r2, r3, #20
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6899      	ldr	r1, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d56:	025a      	lsls	r2, r3, #9
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	029a      	lsls	r2, r3, #10
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	40012300 	.word	0x40012300
 8002d94:	0f000001 	.word	0x0f000001

08002d98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <NVIC_SetPriorityGrouping+0x44>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dde:	4a04      	ldr	r2, [pc, #16]	@ (8002df0 <NVIC_SetPriorityGrouping+0x44>)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	60d3      	str	r3, [r2, #12]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df8:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <NVIC_GetPriorityGrouping+0x18>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	f003 0307 	and.w	r3, r3, #7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	@ (8002e40 <NVIC_EnableIRQ+0x30>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da0b      	bge.n	8002e70 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	@ (8002e90 <NVIC_SetPriority+0x4c>)
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	3b04      	subs	r3, #4
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6e:	e009      	b.n	8002e84 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4907      	ldr	r1, [pc, #28]	@ (8002e94 <NVIC_SetPriority+0x50>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00
 8002e94:	e000e100 	.word	0xe000e100

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	@ 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	@ 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	210f      	movs	r1, #15
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f7ff ff8e 	bl	8002e44 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff2d 	bl	8002dac <NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f6c:	f7ff ff42 	bl	8002df4 <NVIC_GetPriorityGrouping>
 8002f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f7ff ff8e 	bl	8002e98 <NVIC_EncodePriority>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff5d 	bl	8002e44 <NVIC_SetPriority>
}
 8002f8a:	bf00      	nop
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff35 	bl	8002e10 <NVIC_EnableIRQ>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ffa2 	bl	8002f00 <SysTick_Config>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e014      	b.n	8003002 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	791b      	ldrb	r3, [r3, #4]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7fd ff15 	bl	8000e18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	795b      	ldrb	r3, [r3, #5]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_DAC_Start+0x16>
 800301c:	2302      	movs	r3, #2
 800301e:	e040      	b.n	80030a2 <HAL_DAC_Start+0x98>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2201      	movs	r2, #1
 800303a:	409a      	lsls	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10f      	bne.n	800306a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003054:	2b3c      	cmp	r3, #60	@ 0x3c
 8003056:	d11d      	bne.n	8003094 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	e014      	b.n	8003094 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	213c      	movs	r1, #60	@ 0x3c
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	429a      	cmp	r2, r3
 8003082:	d107      	bne.n	8003094 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0202 	orr.w	r2, r2, #2
 8003092:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b087      	sub	sp, #28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	3308      	adds	r3, #8
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e004      	b.n	80030e2 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	3314      	adds	r3, #20
 80030e0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	461a      	mov	r2, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	795b      	ldrb	r3, [r3, #5]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_DAC_ConfigChannel+0x18>
 800310c:	2302      	movs	r3, #2
 800310e:	e03c      	b.n	800318a <HAL_DAC_ConfigChannel+0x92>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2202      	movs	r2, #2
 800311a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4013      	ands	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	22c0      	movs	r2, #192	@ 0xc0
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	400a      	ands	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	371c      	adds	r7, #28
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff f946 	bl	8002434 <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d008      	beq.n	80031c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2280      	movs	r2, #128	@ 0x80
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e052      	b.n	800326e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0216 	bic.w	r2, r2, #22
 80031d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <HAL_DMA_Abort+0x62>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0208 	bic.w	r2, r2, #8
 8003206:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003218:	e013      	b.n	8003242 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800321a:	f7ff f90b 	bl	8002434 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b05      	cmp	r3, #5
 8003226:	d90c      	bls.n	8003242 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2203      	movs	r2, #3
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e015      	b.n	800326e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e4      	bne.n	800321a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	223f      	movs	r2, #63	@ 0x3f
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d004      	beq.n	8003294 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2280      	movs	r2, #128	@ 0x80
 800328e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e00c      	b.n	80032ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2205      	movs	r2, #5
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e06c      	b.n	80033a8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2223      	movs	r2, #35	@ 0x23
 80032dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7fd fddd 	bl	8000ea0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	4b31      	ldr	r3, [pc, #196]	@ (80033b0 <HAL_ETH_Init+0xf4>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	4a30      	ldr	r2, [pc, #192]	@ (80033b0 <HAL_ETH_Init+0xf4>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032f6:	4b2e      	ldr	r3, [pc, #184]	@ (80033b0 <HAL_ETH_Init+0xf4>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003302:	4b2c      	ldr	r3, [pc, #176]	@ (80033b4 <HAL_ETH_Init+0xf8>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4a2b      	ldr	r2, [pc, #172]	@ (80033b4 <HAL_ETH_Init+0xf8>)
 8003308:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800330c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800330e:	4b29      	ldr	r3, [pc, #164]	@ (80033b4 <HAL_ETH_Init+0xf8>)
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4927      	ldr	r1, [pc, #156]	@ (80033b4 <HAL_ETH_Init+0xf8>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800331c:	4b25      	ldr	r3, [pc, #148]	@ (80033b4 <HAL_ETH_Init+0xf8>)
 800331e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003336:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003338:	f7ff f87c 	bl	8002434 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800333e:	e011      	b.n	8003364 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003340:	f7ff f878 	bl	8002434 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800334e:	d909      	bls.n	8003364 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2204      	movs	r2, #4
 8003354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	22e0      	movs	r2, #224	@ 0xe0
 800335c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e021      	b.n	80033a8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e4      	bne.n	8003340 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f958 	bl	800362c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f9ff 	bl	8003780 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fa55 	bl	8003832 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	461a      	mov	r2, r3
 800338e:	2100      	movs	r1, #0
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f9bd 	bl	8003710 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2210      	movs	r2, #16
 80033a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40013800 	.word	0x40013800

080033b8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4b51      	ldr	r3, [pc, #324]	@ (8003514 <ETH_SetMACConfig+0x15c>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	7c1b      	ldrb	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <ETH_SetMACConfig+0x28>
 80033da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033de:	e000      	b.n	80033e2 <ETH_SetMACConfig+0x2a>
 80033e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	7c5b      	ldrb	r3, [r3, #17]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <ETH_SetMACConfig+0x38>
 80033ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033ee:	e000      	b.n	80033f2 <ETH_SetMACConfig+0x3a>
 80033f0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033f2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	7fdb      	ldrb	r3, [r3, #31]
 80033fe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003400:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003406:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	7f92      	ldrb	r2, [r2, #30]
 800340c:	2a00      	cmp	r2, #0
 800340e:	d102      	bne.n	8003416 <ETH_SetMACConfig+0x5e>
 8003410:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003414:	e000      	b.n	8003418 <ETH_SetMACConfig+0x60>
 8003416:	2200      	movs	r2, #0
                        macconf->Speed |
 8003418:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	7f1b      	ldrb	r3, [r3, #28]
 800341e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003420:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003426:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	791b      	ldrb	r3, [r3, #4]
 800342c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800342e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003436:	2a00      	cmp	r2, #0
 8003438:	d102      	bne.n	8003440 <ETH_SetMACConfig+0x88>
 800343a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800343e:	e000      	b.n	8003442 <ETH_SetMACConfig+0x8a>
 8003440:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003442:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	7bdb      	ldrb	r3, [r3, #15]
 8003448:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800344a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003450:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003458:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800345a:	4313      	orrs	r3, r2
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003472:	2001      	movs	r0, #1
 8003474:	f7fe ffea 	bl	800244c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800348e:	4013      	ands	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003496:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800349e:	2a00      	cmp	r2, #0
 80034a0:	d101      	bne.n	80034a6 <ETH_SetMACConfig+0xee>
 80034a2:	2280      	movs	r2, #128	@ 0x80
 80034a4:	e000      	b.n	80034a8 <ETH_SetMACConfig+0xf0>
 80034a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034a8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80034ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80034b6:	2a01      	cmp	r2, #1
 80034b8:	d101      	bne.n	80034be <ETH_SetMACConfig+0x106>
 80034ba:	2208      	movs	r2, #8
 80034bc:	e000      	b.n	80034c0 <ETH_SetMACConfig+0x108>
 80034be:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80034c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80034c8:	2a01      	cmp	r2, #1
 80034ca:	d101      	bne.n	80034d0 <ETH_SetMACConfig+0x118>
 80034cc:	2204      	movs	r2, #4
 80034ce:	e000      	b.n	80034d2 <ETH_SetMACConfig+0x11a>
 80034d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80034d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80034da:	2a01      	cmp	r2, #1
 80034dc:	d101      	bne.n	80034e2 <ETH_SetMACConfig+0x12a>
 80034de:	2202      	movs	r2, #2
 80034e0:	e000      	b.n	80034e4 <ETH_SetMACConfig+0x12c>
 80034e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034e4:	4313      	orrs	r3, r2
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034fc:	2001      	movs	r0, #1
 80034fe:	f7fe ffa5 	bl	800244c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	ff20810f 	.word	0xff20810f

08003518 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <ETH_SetDMAConfig+0x110>)
 8003532:	4013      	ands	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	7b1b      	ldrb	r3, [r3, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <ETH_SetDMAConfig+0x2c>
 800353e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003542:	e000      	b.n	8003546 <ETH_SetDMAConfig+0x2e>
 8003544:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	7b5b      	ldrb	r3, [r3, #13]
 800354a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800354c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	7f52      	ldrb	r2, [r2, #29]
 8003552:	2a00      	cmp	r2, #0
 8003554:	d102      	bne.n	800355c <ETH_SetDMAConfig+0x44>
 8003556:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800355a:	e000      	b.n	800355e <ETH_SetDMAConfig+0x46>
 800355c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800355e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	7b9b      	ldrb	r3, [r3, #14]
 8003564:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003566:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800356c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	7f1b      	ldrb	r3, [r3, #28]
 8003572:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003574:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	7f9b      	ldrb	r3, [r3, #30]
 800357a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800357c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003582:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800358a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800358c:	4313      	orrs	r3, r2
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800359c:	461a      	mov	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035ae:	2001      	movs	r0, #1
 80035b0:	f7fe ff4c 	bl	800244c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035bc:	461a      	mov	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	791b      	ldrb	r3, [r3, #4]
 80035c6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035cc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80035d2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035d8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035e0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80035e2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035ea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035f0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035fe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800360c:	2001      	movs	r0, #1
 800360e:	f7fe ff1d 	bl	800244c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6013      	str	r3, [r2, #0]
}
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	f8de3f23 	.word	0xf8de3f23

0800362c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b0a6      	sub	sp, #152	@ 0x98
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003640:	2300      	movs	r3, #0
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003662:	2300      	movs	r3, #0
 8003664:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003668:	2300      	movs	r3, #0
 800366a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003672:	2300      	movs	r3, #0
 8003674:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003688:	2300      	movs	r3, #0
 800368a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800368e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003692:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003694:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800369a:	2300      	movs	r3, #0
 800369c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80036a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fe86 	bl	80033b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80036b0:	2301      	movs	r3, #1
 80036b2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80036ce:	2300      	movs	r3, #0
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80036d8:	2301      	movs	r3, #1
 80036da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80036dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036e0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80036e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80036fc:	f107 0308 	add.w	r3, r7, #8
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff08 	bl	8003518 <ETH_SetDMAConfig>
}
 8003708:	bf00      	nop
 800370a:	3798      	adds	r7, #152	@ 0x98
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3305      	adds	r3, #5
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	3204      	adds	r2, #4
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <ETH_MACAddressConfig+0x68>)
 8003732:	4413      	add	r3, r2
 8003734:	461a      	mov	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3303      	adds	r3, #3
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	061a      	lsls	r2, r3, #24
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3302      	adds	r3, #2
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3301      	adds	r3, #1
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	4313      	orrs	r3, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	4b06      	ldr	r3, [pc, #24]	@ (800377c <ETH_MACAddressConfig+0x6c>)
 8003762:	4413      	add	r3, r2
 8003764:	461a      	mov	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	6013      	str	r3, [r2, #0]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40028040 	.word	0x40028040
 800377c:	40028044 	.word	0x40028044

08003780 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e03e      	b.n	800380c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68d9      	ldr	r1, [r3, #12]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	440b      	add	r3, r1
 800379e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2200      	movs	r2, #0
 80037aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2200      	movs	r2, #0
 80037b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	3206      	adds	r2, #6
 80037c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d80c      	bhi.n	80037f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68d9      	ldr	r1, [r3, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	461a      	mov	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	e004      	b.n	80037fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3301      	adds	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d9bd      	bls.n	800378e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003824:	611a      	str	r2, [r3, #16]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	e046      	b.n	80038ce <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6919      	ldr	r1, [r3, #16]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	440b      	add	r3, r1
 8003850:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2200      	movs	r2, #0
 800386e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800387c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8003884:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	3212      	adds	r2, #18
 800389a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d80c      	bhi.n	80038be <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6919      	ldr	r1, [r3, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	440b      	add	r3, r1
 80038b6:	461a      	mov	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	60da      	str	r2, [r3, #12]
 80038bc:	e004      	b.n	80038c8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	461a      	mov	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3301      	adds	r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d9b5      	bls.n	8003840 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038fe:	60da      	str	r2, [r3, #12]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	@ 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	e177      	b.n	8003c18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	f040 8166 	bne.w	8003c12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d005      	beq.n	800395e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800395a:	2b02      	cmp	r3, #2
 800395c:	d130      	bne.n	80039c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	2203      	movs	r2, #3
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003994:	2201      	movs	r2, #1
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 0201 	and.w	r2, r3, #1
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d017      	beq.n	80039fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d123      	bne.n	8003a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	08da      	lsrs	r2, r3, #3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3208      	adds	r2, #8
 8003a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	220f      	movs	r2, #15
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	08da      	lsrs	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3208      	adds	r2, #8
 8003a4a:	69b9      	ldr	r1, [r7, #24]
 8003a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0203 	and.w	r2, r3, #3
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80c0 	beq.w	8003c12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	4b66      	ldr	r3, [pc, #408]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9a:	4a65      	ldr	r2, [pc, #404]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aa2:	4b63      	ldr	r3, [pc, #396]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aae:	4a61      	ldr	r2, [pc, #388]	@ (8003c34 <HAL_GPIO_Init+0x328>)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	@ (8003c38 <HAL_GPIO_Init+0x32c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d037      	beq.n	8003b4a <HAL_GPIO_Init+0x23e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a57      	ldr	r2, [pc, #348]	@ (8003c3c <HAL_GPIO_Init+0x330>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d031      	beq.n	8003b46 <HAL_GPIO_Init+0x23a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a56      	ldr	r2, [pc, #344]	@ (8003c40 <HAL_GPIO_Init+0x334>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d02b      	beq.n	8003b42 <HAL_GPIO_Init+0x236>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a55      	ldr	r2, [pc, #340]	@ (8003c44 <HAL_GPIO_Init+0x338>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d025      	beq.n	8003b3e <HAL_GPIO_Init+0x232>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a54      	ldr	r2, [pc, #336]	@ (8003c48 <HAL_GPIO_Init+0x33c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01f      	beq.n	8003b3a <HAL_GPIO_Init+0x22e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a53      	ldr	r2, [pc, #332]	@ (8003c4c <HAL_GPIO_Init+0x340>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d019      	beq.n	8003b36 <HAL_GPIO_Init+0x22a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a52      	ldr	r2, [pc, #328]	@ (8003c50 <HAL_GPIO_Init+0x344>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_GPIO_Init+0x226>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a51      	ldr	r2, [pc, #324]	@ (8003c54 <HAL_GPIO_Init+0x348>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00d      	beq.n	8003b2e <HAL_GPIO_Init+0x222>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a50      	ldr	r2, [pc, #320]	@ (8003c58 <HAL_GPIO_Init+0x34c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <HAL_GPIO_Init+0x21e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4f      	ldr	r2, [pc, #316]	@ (8003c5c <HAL_GPIO_Init+0x350>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_GPIO_Init+0x21a>
 8003b22:	2309      	movs	r3, #9
 8003b24:	e012      	b.n	8003b4c <HAL_GPIO_Init+0x240>
 8003b26:	230a      	movs	r3, #10
 8003b28:	e010      	b.n	8003b4c <HAL_GPIO_Init+0x240>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	e00e      	b.n	8003b4c <HAL_GPIO_Init+0x240>
 8003b2e:	2307      	movs	r3, #7
 8003b30:	e00c      	b.n	8003b4c <HAL_GPIO_Init+0x240>
 8003b32:	2306      	movs	r3, #6
 8003b34:	e00a      	b.n	8003b4c <HAL_GPIO_Init+0x240>
 8003b36:	2305      	movs	r3, #5
 8003b38:	e008      	b.n	8003b4c <HAL_GPIO_Init+0x240>
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	e006      	b.n	8003b4c <HAL_GPIO_Init+0x240>
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e004      	b.n	8003b4c <HAL_GPIO_Init+0x240>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e002      	b.n	8003b4c <HAL_GPIO_Init+0x240>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <HAL_GPIO_Init+0x240>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	f002 0203 	and.w	r2, r2, #3
 8003b52:	0092      	lsls	r2, r2, #2
 8003b54:	4093      	lsls	r3, r2
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b5c:	4935      	ldr	r1, [pc, #212]	@ (8003c34 <HAL_GPIO_Init+0x328>)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	089b      	lsrs	r3, r3, #2
 8003b62:	3302      	adds	r3, #2
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c60 <HAL_GPIO_Init+0x354>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b8e:	4a34      	ldr	r2, [pc, #208]	@ (8003c60 <HAL_GPIO_Init+0x354>)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b94:	4b32      	ldr	r3, [pc, #200]	@ (8003c60 <HAL_GPIO_Init+0x354>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bb8:	4a29      	ldr	r2, [pc, #164]	@ (8003c60 <HAL_GPIO_Init+0x354>)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bbe:	4b28      	ldr	r3, [pc, #160]	@ (8003c60 <HAL_GPIO_Init+0x354>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003be2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c60 <HAL_GPIO_Init+0x354>)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003be8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c60 <HAL_GPIO_Init+0x354>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c0c:	4a14      	ldr	r2, [pc, #80]	@ (8003c60 <HAL_GPIO_Init+0x354>)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3301      	adds	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	f67f ae84 	bls.w	8003928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	3724      	adds	r7, #36	@ 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40013800 	.word	0x40013800
 8003c38:	40020000 	.word	0x40020000
 8003c3c:	40020400 	.word	0x40020400
 8003c40:	40020800 	.word	0x40020800
 8003c44:	40020c00 	.word	0x40020c00
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40021400 	.word	0x40021400
 8003c50:	40021800 	.word	0x40021800
 8003c54:	40021c00 	.word	0x40021c00
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40022400 	.word	0x40022400
 8003c60:	40013c00 	.word	0x40013c00

08003c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
 8003c70:	4613      	mov	r3, r2
 8003c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c74:	787b      	ldrb	r3, [r7, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c80:	e003      	b.n	8003c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	041a      	lsls	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	619a      	str	r2, [r3, #24]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c98:	b08f      	sub	sp, #60	@ 0x3c
 8003c9a:	af0a      	add	r7, sp, #40	@ 0x28
 8003c9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e10f      	b.n	8003ec8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd fa1a 	bl	80010fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2203      	movs	r2, #3
 8003ccc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f002 f999 	bl	800601e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	687e      	ldr	r6, [r7, #4]
 8003cf4:	466d      	mov	r5, sp
 8003cf6:	f106 0410 	add.w	r4, r6, #16
 8003cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d06:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d0a:	1d33      	adds	r3, r6, #4
 8003d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d0e:	6838      	ldr	r0, [r7, #0]
 8003d10:	f002 f924 	bl	8005f5c <USB_CoreInit>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0d0      	b.n	8003ec8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 f987 	bl	8006040 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
 8003d36:	e04a      	b.n	8003dce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	333d      	adds	r3, #61	@ 0x3d
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	333c      	adds	r3, #60	@ 0x3c
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	b298      	uxth	r0, r3
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3344      	adds	r3, #68	@ 0x44
 8003d74:	4602      	mov	r2, r0
 8003d76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	3340      	adds	r3, #64	@ 0x40
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3348      	adds	r3, #72	@ 0x48
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	334c      	adds	r3, #76	@ 0x4c
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	3354      	adds	r3, #84	@ 0x54
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d3af      	bcc.n	8003d38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	e044      	b.n	8003e68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dde:	7bfa      	ldrb	r2, [r7, #15]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003e06:	7bfa      	ldrb	r2, [r7, #15]
 8003e08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	3301      	adds	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d3b5      	bcc.n	8003dde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	687e      	ldr	r6, [r7, #4]
 8003e7a:	466d      	mov	r5, sp
 8003e7c:	f106 0410 	add.w	r4, r6, #16
 8003e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e90:	1d33      	adds	r3, r6, #4
 8003e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e94:	6838      	ldr	r0, [r7, #0]
 8003e96:	f002 f91f 	bl	80060d8 <USB_DevInit>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e00d      	b.n	8003ec8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f002 faea 	bl	800649a <USB_DevDisconnect>

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e267      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d075      	beq.n	8003fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eee:	4b88      	ldr	r3, [pc, #544]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d00c      	beq.n	8003f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efa:	4b85      	ldr	r3, [pc, #532]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d112      	bne.n	8003f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f06:	4b82      	ldr	r3, [pc, #520]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f12:	d10b      	bne.n	8003f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	4b7e      	ldr	r3, [pc, #504]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d05b      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x108>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d157      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e242      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f34:	d106      	bne.n	8003f44 <HAL_RCC_OscConfig+0x74>
 8003f36:	4b76      	ldr	r3, [pc, #472]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a75      	ldr	r2, [pc, #468]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e01d      	b.n	8003f80 <HAL_RCC_OscConfig+0xb0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x98>
 8003f4e:	4b70      	ldr	r3, [pc, #448]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6f      	ldr	r2, [pc, #444]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a6c      	ldr	r2, [pc, #432]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e00b      	b.n	8003f80 <HAL_RCC_OscConfig+0xb0>
 8003f68:	4b69      	ldr	r3, [pc, #420]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a68      	ldr	r2, [pc, #416]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b66      	ldr	r3, [pc, #408]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a65      	ldr	r2, [pc, #404]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fe fa54 	bl	8002434 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f90:	f7fe fa50 	bl	8002434 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	@ 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e207      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0xc0>
 8003fae:	e014      	b.n	8003fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fe fa40 	bl	8002434 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fe fa3c 	bl	8002434 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	@ 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1f3      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fca:	4b51      	ldr	r3, [pc, #324]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0xe8>
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d063      	beq.n	80040ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff2:	4b47      	ldr	r3, [pc, #284]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d11c      	bne.n	8004038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffe:	4b44      	ldr	r3, [pc, #272]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d116      	bne.n	8004038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	4b41      	ldr	r3, [pc, #260]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x152>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e1c7      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b3b      	ldr	r3, [pc, #236]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4937      	ldr	r1, [pc, #220]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	e03a      	b.n	80040ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d020      	beq.n	8004082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004040:	4b34      	ldr	r3, [pc, #208]	@ (8004114 <HAL_RCC_OscConfig+0x244>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fe f9f5 	bl	8002434 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404e:	f7fe f9f1 	bl	8002434 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e1a8      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004060:	4b2b      	ldr	r3, [pc, #172]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b28      	ldr	r3, [pc, #160]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4925      	ldr	r1, [pc, #148]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]
 8004080:	e015      	b.n	80040ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004082:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <HAL_RCC_OscConfig+0x244>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fe f9d4 	bl	8002434 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004090:	f7fe f9d0 	bl	8002434 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e187      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d036      	beq.n	8004128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c2:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_RCC_OscConfig+0x248>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7fe f9b4 	bl	8002434 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d0:	f7fe f9b0 	bl	8002434 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e167      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <HAL_RCC_OscConfig+0x240>)
 80040e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x200>
 80040ee:	e01b      	b.n	8004128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f0:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <HAL_RCC_OscConfig+0x248>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f6:	f7fe f99d 	bl	8002434 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	e00e      	b.n	800411c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fe:	f7fe f999 	bl	8002434 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d907      	bls.n	800411c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e150      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
 8004110:	40023800 	.word	0x40023800
 8004114:	42470000 	.word	0x42470000
 8004118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	4b88      	ldr	r3, [pc, #544]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800411e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1ea      	bne.n	80040fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8097 	beq.w	8004264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413a:	4b81      	ldr	r3, [pc, #516]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	4b7d      	ldr	r3, [pc, #500]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	4a7c      	ldr	r2, [pc, #496]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004154:	6413      	str	r3, [r2, #64]	@ 0x40
 8004156:	4b7a      	ldr	r3, [pc, #488]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004166:	4b77      	ldr	r3, [pc, #476]	@ (8004344 <HAL_RCC_OscConfig+0x474>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d118      	bne.n	80041a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004172:	4b74      	ldr	r3, [pc, #464]	@ (8004344 <HAL_RCC_OscConfig+0x474>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a73      	ldr	r2, [pc, #460]	@ (8004344 <HAL_RCC_OscConfig+0x474>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800417c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417e:	f7fe f959 	bl	8002434 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004186:	f7fe f955 	bl	8002434 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e10c      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	4b6a      	ldr	r3, [pc, #424]	@ (8004344 <HAL_RCC_OscConfig+0x474>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x2ea>
 80041ac:	4b64      	ldr	r3, [pc, #400]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b0:	4a63      	ldr	r2, [pc, #396]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b8:	e01c      	b.n	80041f4 <HAL_RCC_OscConfig+0x324>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0x30c>
 80041c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041da:	e00b      	b.n	80041f4 <HAL_RCC_OscConfig+0x324>
 80041dc:	4b58      	ldr	r3, [pc, #352]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e0:	4a57      	ldr	r2, [pc, #348]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e8:	4b55      	ldr	r3, [pc, #340]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ec:	4a54      	ldr	r2, [pc, #336]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80041ee:	f023 0304 	bic.w	r3, r3, #4
 80041f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d015      	beq.n	8004228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fe f91a 	bl	8002434 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fe f916 	bl	8002434 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0cb      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421a:	4b49      	ldr	r3, [pc, #292]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ee      	beq.n	8004204 <HAL_RCC_OscConfig+0x334>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004228:	f7fe f904 	bl	8002434 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422e:	e00a      	b.n	8004246 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7fe f900 	bl	8002434 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e0b5      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004246:	4b3e      	ldr	r3, [pc, #248]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1ee      	bne.n	8004230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d105      	bne.n	8004264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004258:	4b39      	ldr	r3, [pc, #228]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800425a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425c:	4a38      	ldr	r2, [pc, #224]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004262:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a1 	beq.w	80043b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800426e:	4b34      	ldr	r3, [pc, #208]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b08      	cmp	r3, #8
 8004278:	d05c      	beq.n	8004334 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d141      	bne.n	8004306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004282:	4b31      	ldr	r3, [pc, #196]	@ (8004348 <HAL_RCC_OscConfig+0x478>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fe f8d4 	bl	8002434 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004290:	f7fe f8d0 	bl	8002434 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e087      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	3b01      	subs	r3, #1
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d0:	061b      	lsls	r3, r3, #24
 80042d2:	491b      	ldr	r1, [pc, #108]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCC_OscConfig+0x478>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042de:	f7fe f8a9 	bl	8002434 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e6:	f7fe f8a5 	bl	8002434 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e05c      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f8:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x416>
 8004304:	e054      	b.n	80043b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <HAL_RCC_OscConfig+0x478>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7fe f892 	bl	8002434 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004314:	f7fe f88e 	bl	8002434 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e045      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_RCC_OscConfig+0x470>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x444>
 8004332:	e03d      	b.n	80043b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e038      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
 8004340:	40023800 	.word	0x40023800
 8004344:	40007000 	.word	0x40007000
 8004348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800434c:	4b1b      	ldr	r3, [pc, #108]	@ (80043bc <HAL_RCC_OscConfig+0x4ec>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d028      	beq.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d121      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d11a      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004384:	4293      	cmp	r3, r2
 8004386:	d111      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	3b01      	subs	r3, #1
 8004396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d107      	bne.n	80043ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800

080043c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0cc      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d4:	4b68      	ldr	r3, [pc, #416]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d90c      	bls.n	80043fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	4b65      	ldr	r3, [pc, #404]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b63      	ldr	r3, [pc, #396]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0b8      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004414:	4b59      	ldr	r3, [pc, #356]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a58      	ldr	r2, [pc, #352]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800441e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800442c:	4b53      	ldr	r3, [pc, #332]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a52      	ldr	r2, [pc, #328]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b50      	ldr	r3, [pc, #320]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	494d      	ldr	r1, [pc, #308]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d044      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	4b47      	ldr	r3, [pc, #284]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d119      	bne.n	800449e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e07f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d003      	beq.n	800447e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447a:	2b03      	cmp	r3, #3
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447e:	4b3f      	ldr	r3, [pc, #252]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e06f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448e:	4b3b      	ldr	r3, [pc, #236]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e067      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800449e:	4b37      	ldr	r3, [pc, #220]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f023 0203 	bic.w	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4934      	ldr	r1, [pc, #208]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b0:	f7fd ffc0 	bl	8002434 <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b8:	f7fd ffbc 	bl	8002434 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e04f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ce:	4b2b      	ldr	r3, [pc, #172]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 020c 	and.w	r2, r3, #12
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	429a      	cmp	r2, r3
 80044de:	d1eb      	bne.n	80044b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e0:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d20c      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b22      	ldr	r3, [pc, #136]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b20      	ldr	r3, [pc, #128]	@ (8004578 <HAL_RCC_ClockConfig+0x1b8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e032      	b.n	800456e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004514:	4b19      	ldr	r3, [pc, #100]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4916      	ldr	r1, [pc, #88]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004532:	4b12      	ldr	r3, [pc, #72]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	490e      	ldr	r1, [pc, #56]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004546:	f000 f821 	bl	800458c <HAL_RCC_GetSysClockFreq>
 800454a:	4602      	mov	r2, r0
 800454c:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	490a      	ldr	r1, [pc, #40]	@ (8004580 <HAL_RCC_ClockConfig+0x1c0>)
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	fa22 f303 	lsr.w	r3, r2, r3
 800455e:	4a09      	ldr	r2, [pc, #36]	@ (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004562:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd ff20 	bl	80023ac <HAL_InitTick>

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023c00 	.word	0x40023c00
 800457c:	40023800 	.word	0x40023800
 8004580:	080065e4 	.word	0x080065e4
 8004584:	20000024 	.word	0x20000024
 8004588:	20000028 	.word	0x20000028

0800458c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b094      	sub	sp, #80	@ 0x50
 8004592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	647b      	str	r3, [r7, #68]	@ 0x44
 8004598:	2300      	movs	r3, #0
 800459a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800459c:	2300      	movs	r3, #0
 800459e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045a4:	4b79      	ldr	r3, [pc, #484]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d00d      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x40>
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	f200 80e1 	bhi.w	8004778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045be:	e0db      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c0:	4b73      	ldr	r3, [pc, #460]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x204>)
 80045c2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80045c4:	e0db      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045c6:	4b73      	ldr	r3, [pc, #460]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x208>)
 80045c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ca:	e0d8      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045cc:	4b6f      	ldr	r3, [pc, #444]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045d6:	4b6d      	ldr	r3, [pc, #436]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d063      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e2:	4b6a      	ldr	r3, [pc, #424]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	2200      	movs	r2, #0
 80045ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045f6:	2300      	movs	r3, #0
 80045f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045fe:	4622      	mov	r2, r4
 8004600:	462b      	mov	r3, r5
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	0159      	lsls	r1, r3, #5
 800460c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004610:	0150      	lsls	r0, r2, #5
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4621      	mov	r1, r4
 8004618:	1a51      	subs	r1, r2, r1
 800461a:	6139      	str	r1, [r7, #16]
 800461c:	4629      	mov	r1, r5
 800461e:	eb63 0301 	sbc.w	r3, r3, r1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004630:	4659      	mov	r1, fp
 8004632:	018b      	lsls	r3, r1, #6
 8004634:	4651      	mov	r1, sl
 8004636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800463a:	4651      	mov	r1, sl
 800463c:	018a      	lsls	r2, r1, #6
 800463e:	4651      	mov	r1, sl
 8004640:	ebb2 0801 	subs.w	r8, r2, r1
 8004644:	4659      	mov	r1, fp
 8004646:	eb63 0901 	sbc.w	r9, r3, r1
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800465e:	4690      	mov	r8, r2
 8004660:	4699      	mov	r9, r3
 8004662:	4623      	mov	r3, r4
 8004664:	eb18 0303 	adds.w	r3, r8, r3
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	462b      	mov	r3, r5
 800466c:	eb49 0303 	adc.w	r3, r9, r3
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800467e:	4629      	mov	r1, r5
 8004680:	024b      	lsls	r3, r1, #9
 8004682:	4621      	mov	r1, r4
 8004684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004688:	4621      	mov	r1, r4
 800468a:	024a      	lsls	r2, r1, #9
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004692:	2200      	movs	r2, #0
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800469c:	f7fb fda6 	bl	80001ec <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4613      	mov	r3, r2
 80046a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a8:	e058      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046aa:	4b38      	ldr	r3, [pc, #224]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	2200      	movs	r2, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	4611      	mov	r1, r2
 80046b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	2300      	movs	r3, #0
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	f04f 0000 	mov.w	r0, #0
 80046cc:	f04f 0100 	mov.w	r1, #0
 80046d0:	0159      	lsls	r1, r3, #5
 80046d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046d6:	0150      	lsls	r0, r2, #5
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4641      	mov	r1, r8
 80046de:	ebb2 0a01 	subs.w	sl, r2, r1
 80046e2:	4649      	mov	r1, r9
 80046e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004700:	eb63 050b 	sbc.w	r5, r3, fp
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	00eb      	lsls	r3, r5, #3
 800470e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004712:	00e2      	lsls	r2, r4, #3
 8004714:	4614      	mov	r4, r2
 8004716:	461d      	mov	r5, r3
 8004718:	4643      	mov	r3, r8
 800471a:	18e3      	adds	r3, r4, r3
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	464b      	mov	r3, r9
 8004720:	eb45 0303 	adc.w	r3, r5, r3
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004732:	4629      	mov	r1, r5
 8004734:	028b      	lsls	r3, r1, #10
 8004736:	4621      	mov	r1, r4
 8004738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800473c:	4621      	mov	r1, r4
 800473e:	028a      	lsls	r2, r1, #10
 8004740:	4610      	mov	r0, r2
 8004742:	4619      	mov	r1, r3
 8004744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004746:	2200      	movs	r2, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	61fa      	str	r2, [r7, #28]
 800474c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004750:	f7fb fd4c 	bl	80001ec <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4613      	mov	r3, r2
 800475a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800475c:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	3301      	adds	r3, #1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800476c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800476e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004776:	e002      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x204>)
 800477a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800477c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004780:	4618      	mov	r0, r3
 8004782:	3750      	adds	r7, #80	@ 0x50
 8004784:	46bd      	mov	sp, r7
 8004786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	00f42400 	.word	0x00f42400
 8004794:	007a1200 	.word	0x007a1200

08004798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800479c:	4b03      	ldr	r3, [pc, #12]	@ (80047ac <HAL_RCC_GetHCLKFreq+0x14>)
 800479e:	681b      	ldr	r3, [r3, #0]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000024 	.word	0x20000024

080047b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047b4:	f7ff fff0 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0a9b      	lsrs	r3, r3, #10
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4903      	ldr	r1, [pc, #12]	@ (80047d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	080065f4 	.word	0x080065f4

080047d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047dc:	f7ff ffdc 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0b5b      	lsrs	r3, r3, #13
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4903      	ldr	r1, [pc, #12]	@ (80047fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40023800 	.word	0x40023800
 80047fc:	080065f4 	.word	0x080065f4

08004800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e041      	b.n	8004896 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fc fc00 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f000 f95e 	bl	8004b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d001      	beq.n	80048b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e046      	b.n	8004946 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a23      	ldr	r2, [pc, #140]	@ (8004954 <HAL_TIM_Base_Start+0xb4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d022      	beq.n	8004910 <HAL_TIM_Base_Start+0x70>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d2:	d01d      	beq.n	8004910 <HAL_TIM_Base_Start+0x70>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004958 <HAL_TIM_Base_Start+0xb8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <HAL_TIM_Base_Start+0x70>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1e      	ldr	r2, [pc, #120]	@ (800495c <HAL_TIM_Base_Start+0xbc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <HAL_TIM_Base_Start+0x70>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <HAL_TIM_Base_Start+0xc0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <HAL_TIM_Base_Start+0x70>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004964 <HAL_TIM_Base_Start+0xc4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_TIM_Base_Start+0x70>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a19      	ldr	r2, [pc, #100]	@ (8004968 <HAL_TIM_Base_Start+0xc8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_Base_Start+0x70>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a18      	ldr	r2, [pc, #96]	@ (800496c <HAL_TIM_Base_Start+0xcc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d111      	bne.n	8004934 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d010      	beq.n	8004944 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004932:	e007      	b.n	8004944 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400
 8004968:	40014000 	.word	0x40014000
 800496c:	40001800 	.word	0x40001800

08004970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_TIM_ConfigClockSource+0x1c>
 8004988:	2302      	movs	r3, #2
 800498a:	e0b4      	b.n	8004af6 <HAL_TIM_ConfigClockSource+0x186>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049c4:	d03e      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0xd4>
 80049c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ca:	f200 8087 	bhi.w	8004adc <HAL_TIM_ConfigClockSource+0x16c>
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d2:	f000 8086 	beq.w	8004ae2 <HAL_TIM_ConfigClockSource+0x172>
 80049d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049da:	d87f      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x16c>
 80049dc:	2b70      	cmp	r3, #112	@ 0x70
 80049de:	d01a      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0xa6>
 80049e0:	2b70      	cmp	r3, #112	@ 0x70
 80049e2:	d87b      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x16c>
 80049e4:	2b60      	cmp	r3, #96	@ 0x60
 80049e6:	d050      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x11a>
 80049e8:	2b60      	cmp	r3, #96	@ 0x60
 80049ea:	d877      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x16c>
 80049ec:	2b50      	cmp	r3, #80	@ 0x50
 80049ee:	d03c      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0xfa>
 80049f0:	2b50      	cmp	r3, #80	@ 0x50
 80049f2:	d873      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x16c>
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d058      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x13a>
 80049f8:	2b40      	cmp	r3, #64	@ 0x40
 80049fa:	d86f      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x16c>
 80049fc:	2b30      	cmp	r3, #48	@ 0x30
 80049fe:	d064      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x15a>
 8004a00:	2b30      	cmp	r3, #48	@ 0x30
 8004a02:	d86b      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x16c>
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d060      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x15a>
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d867      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x16c>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d05c      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x15a>
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d05a      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x15a>
 8004a14:	e062      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6899      	ldr	r1, [r3, #8]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f000 f985 	bl	8004d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	609a      	str	r2, [r3, #8]
      break;
 8004a42:	e04f      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	6899      	ldr	r1, [r3, #8]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f000 f96e 	bl	8004d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a66:	609a      	str	r2, [r3, #8]
      break;
 8004a68:	e03c      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f000 f8e2 	bl	8004c40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2150      	movs	r1, #80	@ 0x50
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f93b 	bl	8004cfe <TIM_ITRx_SetConfig>
      break;
 8004a88:	e02c      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6859      	ldr	r1, [r3, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f000 f901 	bl	8004c9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2160      	movs	r1, #96	@ 0x60
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f92b 	bl	8004cfe <TIM_ITRx_SetConfig>
      break;
 8004aa8:	e01c      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 f8c2 	bl	8004c40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2140      	movs	r1, #64	@ 0x40
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f91b 	bl	8004cfe <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e00c      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f000 f912 	bl	8004cfe <TIM_ITRx_SetConfig>
      break;
 8004ada:	e003      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae0:	e000      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a40      	ldr	r2, [pc, #256]	@ (8004c14 <TIM_Base_SetConfig+0x114>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d013      	beq.n	8004b40 <TIM_Base_SetConfig+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1e:	d00f      	beq.n	8004b40 <TIM_Base_SetConfig+0x40>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a3d      	ldr	r2, [pc, #244]	@ (8004c18 <TIM_Base_SetConfig+0x118>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00b      	beq.n	8004b40 <TIM_Base_SetConfig+0x40>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a3c      	ldr	r2, [pc, #240]	@ (8004c1c <TIM_Base_SetConfig+0x11c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d007      	beq.n	8004b40 <TIM_Base_SetConfig+0x40>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a3b      	ldr	r2, [pc, #236]	@ (8004c20 <TIM_Base_SetConfig+0x120>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_Base_SetConfig+0x40>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8004c24 <TIM_Base_SetConfig+0x124>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d108      	bne.n	8004b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a2f      	ldr	r2, [pc, #188]	@ (8004c14 <TIM_Base_SetConfig+0x114>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d02b      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b60:	d027      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a2c      	ldr	r2, [pc, #176]	@ (8004c18 <TIM_Base_SetConfig+0x118>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d023      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c1c <TIM_Base_SetConfig+0x11c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d01f      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a2a      	ldr	r2, [pc, #168]	@ (8004c20 <TIM_Base_SetConfig+0x120>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d01b      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a29      	ldr	r2, [pc, #164]	@ (8004c24 <TIM_Base_SetConfig+0x124>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d017      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a28      	ldr	r2, [pc, #160]	@ (8004c28 <TIM_Base_SetConfig+0x128>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a27      	ldr	r2, [pc, #156]	@ (8004c2c <TIM_Base_SetConfig+0x12c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00f      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a26      	ldr	r2, [pc, #152]	@ (8004c30 <TIM_Base_SetConfig+0x130>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00b      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a25      	ldr	r2, [pc, #148]	@ (8004c34 <TIM_Base_SetConfig+0x134>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d007      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a24      	ldr	r2, [pc, #144]	@ (8004c38 <TIM_Base_SetConfig+0x138>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a23      	ldr	r2, [pc, #140]	@ (8004c3c <TIM_Base_SetConfig+0x13c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d108      	bne.n	8004bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0a      	ldr	r2, [pc, #40]	@ (8004c14 <TIM_Base_SetConfig+0x114>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d003      	beq.n	8004bf8 <TIM_Base_SetConfig+0xf8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8004c24 <TIM_Base_SetConfig+0x124>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d103      	bne.n	8004c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	615a      	str	r2, [r3, #20]
}
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40010400 	.word	0x40010400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40014400 	.word	0x40014400
 8004c30:	40014800 	.word	0x40014800
 8004c34:	40001800 	.word	0x40001800
 8004c38:	40001c00 	.word	0x40001c00
 8004c3c:	40002000 	.word	0x40002000

08004c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f023 0201 	bic.w	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f023 030a 	bic.w	r3, r3, #10
 8004c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b087      	sub	sp, #28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0210 	bic.w	r2, r3, #16
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	031b      	lsls	r3, r3, #12
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b085      	sub	sp, #20
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f043 0307 	orr.w	r3, r3, #7
 8004d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	609a      	str	r2, [r3, #8]
}
 8004d28:	bf00      	nop
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	021a      	lsls	r2, r3, #8
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	609a      	str	r2, [r3, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e05a      	b.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a21      	ldr	r2, [pc, #132]	@ (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d022      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd8:	d01d      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1d      	ldr	r2, [pc, #116]	@ (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d018      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00e      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a18      	ldr	r2, [pc, #96]	@ (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d009      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a17      	ldr	r2, [pc, #92]	@ (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a15      	ldr	r2, [pc, #84]	@ (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d10c      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40010400 	.word	0x40010400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40001800 	.word	0x40001800

08004e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e03f      	b.n	8004efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc f8ea 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	@ 0x24
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fddf 	bl	8005a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b08a      	sub	sp, #40	@ 0x28
 8004f0a:	af02      	add	r7, sp, #8
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	4613      	mov	r3, r2
 8004f14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d17c      	bne.n	8005020 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_UART_Transmit+0x2c>
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e075      	b.n	8005022 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_UART_Transmit+0x3e>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e06e      	b.n	8005022 <HAL_UART_Transmit+0x11c>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2221      	movs	r2, #33	@ 0x21
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f5a:	f7fd fa6b 	bl	8002434 <HAL_GetTick>
 8004f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	88fa      	ldrh	r2, [r7, #6]
 8004f64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	88fa      	ldrh	r2, [r7, #6]
 8004f6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f74:	d108      	bne.n	8004f88 <HAL_UART_Transmit+0x82>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d104      	bne.n	8004f88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	e003      	b.n	8004f90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004f98:	e02a      	b.n	8004ff0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2180      	movs	r1, #128	@ 0x80
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fb1f 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e036      	b.n	8005022 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10b      	bne.n	8004fd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	3302      	adds	r3, #2
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	e007      	b.n	8004fe2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1cf      	bne.n	8004f9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2200      	movs	r2, #0
 8005002:	2140      	movs	r1, #64	@ 0x40
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 faef 	bl	80055e8 <UART_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e006      	b.n	8005022 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	4613      	mov	r3, r2
 8005036:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b20      	cmp	r3, #32
 8005042:	d11d      	bne.n	8005080 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_UART_Receive_IT+0x26>
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e016      	b.n	8005082 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_UART_Receive_IT+0x38>
 800505e:	2302      	movs	r3, #2
 8005060:	e00f      	b.n	8005082 <HAL_UART_Receive_IT+0x58>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	461a      	mov	r2, r3
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fb24 	bl	80056c4 <UART_Start_Receive_IT>
 800507c:	4603      	mov	r3, r0
 800507e:	e000      	b.n	8005082 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005080:	2302      	movs	r3, #2
  }
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b0ba      	sub	sp, #232	@ 0xe8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80050ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <HAL_UART_IRQHandler+0x66>
 80050de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fc07 	bl	80058fe <UART_Receive_IT>
      return;
 80050f0:	e256      	b.n	80055a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80de 	beq.w	80052b8 <HAL_UART_IRQHandler+0x22c>
 80050fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800510c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80d1 	beq.w	80052b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_UART_IRQHandler+0xae>
 8005122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f043 0201 	orr.w	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <HAL_UART_IRQHandler+0xd2>
 8005146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f043 0202 	orr.w	r2, r3, #2
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800515e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <HAL_UART_IRQHandler+0xf6>
 800516a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	f043 0204 	orr.w	r2, r3, #4
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d011      	beq.n	80051b2 <HAL_UART_IRQHandler+0x126>
 800518e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d105      	bne.n	80051a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800519a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	f043 0208 	orr.w	r2, r3, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 81ed 	beq.w	8005596 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_UART_IRQHandler+0x14e>
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fb92 	bl	80058fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e4:	2b40      	cmp	r3, #64	@ 0x40
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <HAL_UART_IRQHandler+0x17a>
 80051fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d04f      	beq.n	80052a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa9a 	bl	8005740 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005216:	2b40      	cmp	r3, #64	@ 0x40
 8005218:	d141      	bne.n	800529e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3314      	adds	r3, #20
 8005220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3314      	adds	r3, #20
 8005242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005246:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800524a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800525e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1d9      	bne.n	800521a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	2b00      	cmp	r3, #0
 800526c:	d013      	beq.n	8005296 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005272:	4a7d      	ldr	r2, [pc, #500]	@ (8005468 <HAL_UART_IRQHandler+0x3dc>)
 8005274:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527a:	4618      	mov	r0, r3
 800527c:	f7fd fffb 	bl	8003276 <HAL_DMA_Abort_IT>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d016      	beq.n	80052b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005290:	4610      	mov	r0, r2
 8005292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005294:	e00e      	b.n	80052b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f990 	bl	80055bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529c:	e00a      	b.n	80052b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f98c 	bl	80055bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a4:	e006      	b.n	80052b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f988 	bl	80055bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80052b2:	e170      	b.n	8005596 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	bf00      	nop
    return;
 80052b6:	e16e      	b.n	8005596 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	2b01      	cmp	r3, #1
 80052be:	f040 814a 	bne.w	8005556 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8143 	beq.w	8005556 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 813c 	beq.w	8005556 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052de:	2300      	movs	r3, #0
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60bb      	str	r3, [r7, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fe:	2b40      	cmp	r3, #64	@ 0x40
 8005300:	f040 80b4 	bne.w	800546c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8140 	beq.w	800559a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800531e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005322:	429a      	cmp	r2, r3
 8005324:	f080 8139 	bcs.w	800559a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800532e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800533a:	f000 8088 	beq.w	800544e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	330c      	adds	r3, #12
 8005344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800535c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800536a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800536e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1d9      	bne.n	800533e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3314      	adds	r3, #20
 8005390:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800539a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800539c:	f023 0301 	bic.w	r3, r3, #1
 80053a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3314      	adds	r3, #20
 80053aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e1      	bne.n	800538a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3314      	adds	r3, #20
 80053cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3314      	adds	r3, #20
 80053e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e3      	bne.n	80053c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	330c      	adds	r3, #12
 8005412:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800541c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800541e:	f023 0310 	bic.w	r3, r3, #16
 8005422:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005430:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005432:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005434:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005436:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800543e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e3      	bne.n	800540c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	4618      	mov	r0, r3
 800544a:	f7fd fea4 	bl	8003196 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005456:	b29b      	uxth	r3, r3
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	b29b      	uxth	r3, r3
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8b6 	bl	80055d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005464:	e099      	b.n	800559a <HAL_UART_IRQHandler+0x50e>
 8005466:	bf00      	nop
 8005468:	08005807 	.word	0x08005807
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005474:	b29b      	uxth	r3, r3
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 808b 	beq.w	800559e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8086 	beq.w	800559e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	330c      	adds	r3, #12
 8005498:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80054b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80054b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e3      	bne.n	8005492 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3314      	adds	r3, #20
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	623b      	str	r3, [r7, #32]
   return(result);
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3314      	adds	r3, #20
 80054ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80054f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e3      	bne.n	80054ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0310 	bic.w	r3, r3, #16
 8005526:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005534:	61fa      	str	r2, [r7, #28]
 8005536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	617b      	str	r3, [r7, #20]
   return(result);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e3      	bne.n	8005510 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f83e 	bl	80055d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005554:	e023      	b.n	800559e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <HAL_UART_IRQHandler+0x4ea>
 8005562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f95d 	bl	800582e <UART_Transmit_IT>
    return;
 8005574:	e014      	b.n	80055a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00e      	beq.n	80055a0 <HAL_UART_IRQHandler+0x514>
 8005582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f99d 	bl	80058ce <UART_EndTransmit_IT>
    return;
 8005594:	e004      	b.n	80055a0 <HAL_UART_IRQHandler+0x514>
    return;
 8005596:	bf00      	nop
 8005598:	e002      	b.n	80055a0 <HAL_UART_IRQHandler+0x514>
      return;
 800559a:	bf00      	nop
 800559c:	e000      	b.n	80055a0 <HAL_UART_IRQHandler+0x514>
      return;
 800559e:	bf00      	nop
  }
}
 80055a0:	37e8      	adds	r7, #232	@ 0xe8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop

080055a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b090      	sub	sp, #64	@ 0x40
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f8:	e050      	b.n	800569c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d04c      	beq.n	800569c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <UART_WaitOnFlagUntilTimeout+0x30>
 8005608:	f7fc ff14 	bl	8002434 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005614:	429a      	cmp	r2, r3
 8005616:	d241      	bcs.n	800569c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	330c      	adds	r3, #12
 8005636:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005638:	637a      	str	r2, [r7, #52]	@ 0x34
 800563a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800563e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e5      	bne.n	8005618 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3314      	adds	r3, #20
 8005652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	613b      	str	r3, [r7, #16]
   return(result);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3314      	adds	r3, #20
 800566a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800566c:	623a      	str	r2, [r7, #32]
 800566e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	69f9      	ldr	r1, [r7, #28]
 8005672:	6a3a      	ldr	r2, [r7, #32]
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	61bb      	str	r3, [r7, #24]
   return(result);
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e5      	bne.n	800564c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e00f      	b.n	80056bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4013      	ands	r3, r2
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d09f      	beq.n	80055fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3740      	adds	r7, #64	@ 0x40
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	4613      	mov	r3, r2
 80056d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	88fa      	ldrh	r2, [r7, #6]
 80056e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2222      	movs	r2, #34	@ 0x22
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005710:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0201 	orr.w	r2, r2, #1
 8005720:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0220 	orr.w	r2, r2, #32
 8005730:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005740:	b480      	push	{r7}
 8005742:	b095      	sub	sp, #84	@ 0x54
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800575e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005768:	643a      	str	r2, [r7, #64]	@ 0x40
 800576a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800576e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e5      	bne.n	8005748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3314      	adds	r3, #20
 8005782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	61fb      	str	r3, [r7, #28]
   return(result);
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3314      	adds	r3, #20
 800579a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800579c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e5      	bne.n	800577c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d119      	bne.n	80057ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f023 0310 	bic.w	r3, r3, #16
 80057ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057d8:	61ba      	str	r2, [r7, #24]
 80057da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6979      	ldr	r1, [r7, #20]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	613b      	str	r3, [r7, #16]
   return(result);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e5      	bne.n	80057b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057fa:	bf00      	nop
 80057fc:	3754      	adds	r7, #84	@ 0x54
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005812:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fecb 	bl	80055bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b21      	cmp	r3, #33	@ 0x21
 8005840:	d13e      	bne.n	80058c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584a:	d114      	bne.n	8005876 <UART_Transmit_IT+0x48>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d110      	bne.n	8005876 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005868:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	1c9a      	adds	r2, r3, #2
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	621a      	str	r2, [r3, #32]
 8005874:	e008      	b.n	8005888 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	1c59      	adds	r1, r3, #1
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6211      	str	r1, [r2, #32]
 8005880:	781a      	ldrb	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29b      	uxth	r3, r3
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4619      	mov	r1, r3
 8005896:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10f      	bne.n	80058bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	e000      	b.n	80058c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058c0:	2302      	movs	r3, #2
  }
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff fe5a 	bl	80055a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b08c      	sub	sp, #48	@ 0x30
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b22      	cmp	r3, #34	@ 0x22
 8005910:	f040 80ab 	bne.w	8005a6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591c:	d117      	bne.n	800594e <UART_Receive_IT+0x50>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d113      	bne.n	800594e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005926:	2300      	movs	r3, #0
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593c:	b29a      	uxth	r2, r3
 800593e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005940:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005946:	1c9a      	adds	r2, r3, #2
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	629a      	str	r2, [r3, #40]	@ 0x28
 800594c:	e026      	b.n	800599c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005952:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005960:	d007      	beq.n	8005972 <UART_Receive_IT+0x74>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <UART_Receive_IT+0x82>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	b2da      	uxtb	r2, r3
 800597a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e008      	b.n	8005992 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800598c:	b2da      	uxtb	r2, r3
 800598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005990:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4619      	mov	r1, r3
 80059aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d15a      	bne.n	8005a66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0220 	bic.w	r2, r2, #32
 80059be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d135      	bne.n	8005a5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	613b      	str	r3, [r7, #16]
   return(result);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f023 0310 	bic.w	r3, r3, #16
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a16:	623a      	str	r2, [r7, #32]
 8005a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	69f9      	ldr	r1, [r7, #28]
 8005a1c:	6a3a      	ldr	r2, [r7, #32]
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e5      	bne.n	80059f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d10a      	bne.n	8005a4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fdbb 	bl	80055d0 <HAL_UARTEx_RxEventCallback>
 8005a5a:	e002      	b.n	8005a62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fb f943 	bl	8000ce8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e002      	b.n	8005a6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e000      	b.n	8005a6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a6a:	2302      	movs	r3, #2
  }
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3730      	adds	r7, #48	@ 0x30
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a78:	b0c0      	sub	sp, #256	@ 0x100
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a90:	68d9      	ldr	r1, [r3, #12]
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	ea40 0301 	orr.w	r3, r0, r1
 8005a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005acc:	f021 010c 	bic.w	r1, r1, #12
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ada:	430b      	orrs	r3, r1
 8005adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aee:	6999      	ldr	r1, [r3, #24]
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	ea40 0301 	orr.w	r3, r0, r1
 8005afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b8f      	ldr	r3, [pc, #572]	@ (8005d40 <UART_SetConfig+0x2cc>)
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d005      	beq.n	8005b14 <UART_SetConfig+0xa0>
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8005d44 <UART_SetConfig+0x2d0>)
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d104      	bne.n	8005b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7fe fe60 	bl	80047d8 <HAL_RCC_GetPCLK2Freq>
 8005b18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b1c:	e003      	b.n	8005b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b1e:	f7fe fe47 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 8005b22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b30:	f040 810c 	bne.w	8005d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b46:	4622      	mov	r2, r4
 8005b48:	462b      	mov	r3, r5
 8005b4a:	1891      	adds	r1, r2, r2
 8005b4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b4e:	415b      	adcs	r3, r3
 8005b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b56:	4621      	mov	r1, r4
 8005b58:	eb12 0801 	adds.w	r8, r2, r1
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	eb43 0901 	adc.w	r9, r3, r1
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b76:	4690      	mov	r8, r2
 8005b78:	4699      	mov	r9, r3
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	eb18 0303 	adds.w	r3, r8, r3
 8005b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b84:	462b      	mov	r3, r5
 8005b86:	eb49 0303 	adc.w	r3, r9, r3
 8005b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	18db      	adds	r3, r3, r3
 8005ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ba8:	4613      	mov	r3, r2
 8005baa:	eb42 0303 	adc.w	r3, r2, r3
 8005bae:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005bb8:	f7fa fb18 	bl	80001ec <__aeabi_uldivmod>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4b61      	ldr	r3, [pc, #388]	@ (8005d48 <UART_SetConfig+0x2d4>)
 8005bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	011c      	lsls	r4, r3, #4
 8005bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bdc:	4642      	mov	r2, r8
 8005bde:	464b      	mov	r3, r9
 8005be0:	1891      	adds	r1, r2, r2
 8005be2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005be4:	415b      	adcs	r3, r3
 8005be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bec:	4641      	mov	r1, r8
 8005bee:	eb12 0a01 	adds.w	sl, r2, r1
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c0c:	4692      	mov	sl, r2
 8005c0e:	469b      	mov	fp, r3
 8005c10:	4643      	mov	r3, r8
 8005c12:	eb1a 0303 	adds.w	r3, sl, r3
 8005c16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	18db      	adds	r3, r3, r3
 8005c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c3e:	4613      	mov	r3, r2
 8005c40:	eb42 0303 	adc.w	r3, r2, r3
 8005c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c4e:	f7fa facd 	bl	80001ec <__aeabi_uldivmod>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4611      	mov	r1, r2
 8005c58:	4b3b      	ldr	r3, [pc, #236]	@ (8005d48 <UART_SetConfig+0x2d4>)
 8005c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	2264      	movs	r2, #100	@ 0x64
 8005c62:	fb02 f303 	mul.w	r3, r2, r3
 8005c66:	1acb      	subs	r3, r1, r3
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c6e:	4b36      	ldr	r3, [pc, #216]	@ (8005d48 <UART_SetConfig+0x2d4>)
 8005c70:	fba3 2302 	umull	r2, r3, r3, r2
 8005c74:	095b      	lsrs	r3, r3, #5
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c7c:	441c      	add	r4, r3
 8005c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c90:	4642      	mov	r2, r8
 8005c92:	464b      	mov	r3, r9
 8005c94:	1891      	adds	r1, r2, r2
 8005c96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c98:	415b      	adcs	r3, r3
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ca0:	4641      	mov	r1, r8
 8005ca2:	1851      	adds	r1, r2, r1
 8005ca4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	414b      	adcs	r3, r1
 8005caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005cb8:	4659      	mov	r1, fp
 8005cba:	00cb      	lsls	r3, r1, #3
 8005cbc:	4651      	mov	r1, sl
 8005cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cc2:	4651      	mov	r1, sl
 8005cc4:	00ca      	lsls	r2, r1, #3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4642      	mov	r2, r8
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	460a      	mov	r2, r1
 8005cd8:	eb42 0303 	adc.w	r3, r2, r3
 8005cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	18db      	adds	r3, r3, r3
 8005cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	eb42 0303 	adc.w	r3, r2, r3
 8005d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d0a:	f7fa fa6f 	bl	80001ec <__aeabi_uldivmod>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	4b0d      	ldr	r3, [pc, #52]	@ (8005d48 <UART_SetConfig+0x2d4>)
 8005d14:	fba3 1302 	umull	r1, r3, r3, r2
 8005d18:	095b      	lsrs	r3, r3, #5
 8005d1a:	2164      	movs	r1, #100	@ 0x64
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	3332      	adds	r3, #50	@ 0x32
 8005d26:	4a08      	ldr	r2, [pc, #32]	@ (8005d48 <UART_SetConfig+0x2d4>)
 8005d28:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	f003 0207 	and.w	r2, r3, #7
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4422      	add	r2, r4
 8005d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d3c:	e106      	b.n	8005f4c <UART_SetConfig+0x4d8>
 8005d3e:	bf00      	nop
 8005d40:	40011000 	.word	0x40011000
 8005d44:	40011400 	.word	0x40011400
 8005d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d5e:	4642      	mov	r2, r8
 8005d60:	464b      	mov	r3, r9
 8005d62:	1891      	adds	r1, r2, r2
 8005d64:	6239      	str	r1, [r7, #32]
 8005d66:	415b      	adcs	r3, r3
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d6e:	4641      	mov	r1, r8
 8005d70:	1854      	adds	r4, r2, r1
 8005d72:	4649      	mov	r1, r9
 8005d74:	eb43 0501 	adc.w	r5, r3, r1
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	00eb      	lsls	r3, r5, #3
 8005d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d86:	00e2      	lsls	r2, r4, #3
 8005d88:	4614      	mov	r4, r2
 8005d8a:	461d      	mov	r5, r3
 8005d8c:	4643      	mov	r3, r8
 8005d8e:	18e3      	adds	r3, r4, r3
 8005d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d94:	464b      	mov	r3, r9
 8005d96:	eb45 0303 	adc.w	r3, r5, r3
 8005d9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005daa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005dba:	4629      	mov	r1, r5
 8005dbc:	008b      	lsls	r3, r1, #2
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	008a      	lsls	r2, r1, #2
 8005dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005dcc:	f7fa fa0e 	bl	80001ec <__aeabi_uldivmod>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4b60      	ldr	r3, [pc, #384]	@ (8005f58 <UART_SetConfig+0x4e4>)
 8005dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	011c      	lsls	r4, r3, #4
 8005dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005de8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005df0:	4642      	mov	r2, r8
 8005df2:	464b      	mov	r3, r9
 8005df4:	1891      	adds	r1, r2, r2
 8005df6:	61b9      	str	r1, [r7, #24]
 8005df8:	415b      	adcs	r3, r3
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e00:	4641      	mov	r1, r8
 8005e02:	1851      	adds	r1, r2, r1
 8005e04:	6139      	str	r1, [r7, #16]
 8005e06:	4649      	mov	r1, r9
 8005e08:	414b      	adcs	r3, r1
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e18:	4659      	mov	r1, fp
 8005e1a:	00cb      	lsls	r3, r1, #3
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e22:	4651      	mov	r1, sl
 8005e24:	00ca      	lsls	r2, r1, #3
 8005e26:	4610      	mov	r0, r2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	189b      	adds	r3, r3, r2
 8005e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e34:	464b      	mov	r3, r9
 8005e36:	460a      	mov	r2, r1
 8005e38:	eb42 0303 	adc.w	r3, r2, r3
 8005e3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e58:	4649      	mov	r1, r9
 8005e5a:	008b      	lsls	r3, r1, #2
 8005e5c:	4641      	mov	r1, r8
 8005e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e62:	4641      	mov	r1, r8
 8005e64:	008a      	lsls	r2, r1, #2
 8005e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e6a:	f7fa f9bf 	bl	80001ec <__aeabi_uldivmod>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	4b38      	ldr	r3, [pc, #224]	@ (8005f58 <UART_SetConfig+0x4e4>)
 8005e76:	fba3 2301 	umull	r2, r3, r3, r1
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	2264      	movs	r2, #100	@ 0x64
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	1acb      	subs	r3, r1, r3
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	3332      	adds	r3, #50	@ 0x32
 8005e88:	4a33      	ldr	r2, [pc, #204]	@ (8005f58 <UART_SetConfig+0x4e4>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e94:	441c      	add	r4, r3
 8005e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ea0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	1891      	adds	r1, r2, r2
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	415b      	adcs	r3, r3
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	1851      	adds	r1, r2, r1
 8005eb8:	6039      	str	r1, [r7, #0]
 8005eba:	4649      	mov	r1, r9
 8005ebc:	414b      	adcs	r3, r1
 8005ebe:	607b      	str	r3, [r7, #4]
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ecc:	4659      	mov	r1, fp
 8005ece:	00cb      	lsls	r3, r1, #3
 8005ed0:	4651      	mov	r1, sl
 8005ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ed6:	4651      	mov	r1, sl
 8005ed8:	00ca      	lsls	r2, r1, #3
 8005eda:	4610      	mov	r0, r2
 8005edc:	4619      	mov	r1, r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4642      	mov	r2, r8
 8005ee2:	189b      	adds	r3, r3, r2
 8005ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	460a      	mov	r2, r1
 8005eea:	eb42 0303 	adc.w	r3, r2, r3
 8005eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005efa:	667a      	str	r2, [r7, #100]	@ 0x64
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f08:	4649      	mov	r1, r9
 8005f0a:	008b      	lsls	r3, r1, #2
 8005f0c:	4641      	mov	r1, r8
 8005f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f12:	4641      	mov	r1, r8
 8005f14:	008a      	lsls	r2, r1, #2
 8005f16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f1a:	f7fa f967 	bl	80001ec <__aeabi_uldivmod>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <UART_SetConfig+0x4e4>)
 8005f24:	fba3 1302 	umull	r1, r3, r3, r2
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	2164      	movs	r1, #100	@ 0x64
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	3332      	adds	r3, #50	@ 0x32
 8005f36:	4a08      	ldr	r2, [pc, #32]	@ (8005f58 <UART_SetConfig+0x4e4>)
 8005f38:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	f003 020f 	and.w	r2, r3, #15
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4422      	add	r2, r4
 8005f4a:	609a      	str	r2, [r3, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f52:	46bd      	mov	sp, r7
 8005f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f58:	51eb851f 	.word	0x51eb851f

08005f5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	f107 001c 	add.w	r0, r7, #28
 8005f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d122      	bne.n	8005fba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d105      	bne.n	8005fae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 faa2 	bl	80064f8 <USB_CoreReset>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	73fb      	strb	r3, [r7, #15]
 8005fb8:	e01a      	b.n	8005ff0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa96 	bl	80064f8 <USB_CoreReset>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fe2:	e005      	b.n	8005ff0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d10b      	bne.n	800600e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f043 0206 	orr.w	r2, r3, #6
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f043 0220 	orr.w	r2, r3, #32
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800601a:	b004      	add	sp, #16
 800601c:	4770      	bx	lr

0800601e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f023 0201 	bic.w	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d115      	bne.n	800608e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800606e:	2001      	movs	r0, #1
 8006070:	f7fc f9ec 	bl	800244c <HAL_Delay>
      ms++;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3301      	adds	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa2e 	bl	80064dc <USB_GetMode>
 8006080:	4603      	mov	r3, r0
 8006082:	2b01      	cmp	r3, #1
 8006084:	d01e      	beq.n	80060c4 <USB_SetCurrentMode+0x84>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b31      	cmp	r3, #49	@ 0x31
 800608a:	d9f0      	bls.n	800606e <USB_SetCurrentMode+0x2e>
 800608c:	e01a      	b.n	80060c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d115      	bne.n	80060c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060a0:	2001      	movs	r0, #1
 80060a2:	f7fc f9d3 	bl	800244c <HAL_Delay>
      ms++;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3301      	adds	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fa15 	bl	80064dc <USB_GetMode>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <USB_SetCurrentMode+0x84>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b31      	cmp	r3, #49	@ 0x31
 80060bc:	d9f0      	bls.n	80060a0 <USB_SetCurrentMode+0x60>
 80060be:	e001      	b.n	80060c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e005      	b.n	80060d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b32      	cmp	r3, #50	@ 0x32
 80060c8:	d101      	bne.n	80060ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060d8:	b084      	sub	sp, #16
 80060da:	b580      	push	{r7, lr}
 80060dc:	b086      	sub	sp, #24
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80060e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060f2:	2300      	movs	r3, #0
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	e009      	b.n	800610c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	3340      	adds	r3, #64	@ 0x40
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	2200      	movs	r2, #0
 8006104:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3301      	adds	r3, #1
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b0e      	cmp	r3, #14
 8006110:	d9f2      	bls.n	80060f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d11c      	bne.n	8006152 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006126:	f043 0302 	orr.w	r3, r3, #2
 800612a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006130:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006148:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006150:	e00b      	b.n	800616a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006162:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006170:	461a      	mov	r2, r3
 8006172:	2300      	movs	r3, #0
 8006174:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800617c:	4619      	mov	r1, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006184:	461a      	mov	r2, r3
 8006186:	680b      	ldr	r3, [r1, #0]
 8006188:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800618a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618c:	2b01      	cmp	r3, #1
 800618e:	d10c      	bne.n	80061aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d104      	bne.n	80061a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006196:	2100      	movs	r1, #0
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f965 	bl	8006468 <USB_SetDevSpeed>
 800619e:	e008      	b.n	80061b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061a0:	2101      	movs	r1, #1
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f960 	bl	8006468 <USB_SetDevSpeed>
 80061a8:	e003      	b.n	80061b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061aa:	2103      	movs	r1, #3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f95b 	bl	8006468 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061b2:	2110      	movs	r1, #16
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f8f3 	bl	80063a0 <USB_FlushTxFifo>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f91f 	bl	8006408 <USB_FlushRxFifo>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061da:	461a      	mov	r2, r3
 80061dc:	2300      	movs	r3, #0
 80061de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e6:	461a      	mov	r2, r3
 80061e8:	2300      	movs	r3, #0
 80061ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061f2:	461a      	mov	r2, r3
 80061f4:	2300      	movs	r3, #0
 80061f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	e043      	b.n	8006286 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006210:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006214:	d118      	bne.n	8006248 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006228:	461a      	mov	r2, r3
 800622a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	e013      	b.n	800625a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623e:	461a      	mov	r2, r3
 8006240:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e008      	b.n	800625a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006254:	461a      	mov	r2, r3
 8006256:	2300      	movs	r3, #0
 8006258:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006266:	461a      	mov	r2, r3
 8006268:	2300      	movs	r3, #0
 800626a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006278:	461a      	mov	r2, r3
 800627a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800627e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	3301      	adds	r3, #1
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	429a      	cmp	r2, r3
 800628c:	d3b7      	bcc.n	80061fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	e043      	b.n	800631c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062aa:	d118      	bne.n	80062de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062be:	461a      	mov	r2, r3
 80062c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	e013      	b.n	80062f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d4:	461a      	mov	r2, r3
 80062d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e008      	b.n	80062f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ea:	461a      	mov	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062fc:	461a      	mov	r2, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630e:	461a      	mov	r2, r3
 8006310:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006314:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	3301      	adds	r3, #1
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	429a      	cmp	r2, r3
 8006322:	d3b7      	bcc.n	8006294 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006332:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006336:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006344:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f043 0210 	orr.w	r2, r3, #16
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699a      	ldr	r2, [r3, #24]
 800635c:	4b0f      	ldr	r3, [pc, #60]	@ (800639c <USB_DevInit+0x2c4>)
 800635e:	4313      	orrs	r3, r2
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f043 0208 	orr.w	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006378:	2b01      	cmp	r3, #1
 800637a:	d107      	bne.n	800638c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006384:	f043 0304 	orr.w	r3, r3, #4
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800638c:	7dfb      	ldrb	r3, [r7, #23]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006398:	b004      	add	sp, #16
 800639a:	4770      	bx	lr
 800639c:	803c3800 	.word	0x803c3800

080063a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a13      	ldr	r2, [pc, #76]	@ (8006404 <USB_FlushTxFifo+0x64>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d901      	bls.n	80063c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e01b      	b.n	80063f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	daf2      	bge.n	80063ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	019b      	lsls	r3, r3, #6
 80063d0:	f043 0220 	orr.w	r2, r3, #32
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a08      	ldr	r2, [pc, #32]	@ (8006404 <USB_FlushTxFifo+0x64>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d901      	bls.n	80063ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e006      	b.n	80063f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d0f0      	beq.n	80063d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	00030d40 	.word	0x00030d40

08006408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a11      	ldr	r2, [pc, #68]	@ (8006464 <USB_FlushRxFifo+0x5c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e018      	b.n	8006458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	daf2      	bge.n	8006414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2210      	movs	r2, #16
 8006436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4a08      	ldr	r2, [pc, #32]	@ (8006464 <USB_FlushRxFifo+0x5c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d901      	bls.n	800644a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e006      	b.n	8006458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b10      	cmp	r3, #16
 8006454:	d0f0      	beq.n	8006438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	00030d40 	.word	0x00030d40

08006468 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006488:	4313      	orrs	r3, r2
 800648a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80064b4:	f023 0303 	bic.w	r3, r3, #3
 80064b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064c8:	f043 0302 	orr.w	r3, r3, #2
 80064cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	f003 0301 	and.w	r3, r3, #1
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4a13      	ldr	r2, [pc, #76]	@ (800655c <USB_CoreReset+0x64>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d901      	bls.n	8006516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e01b      	b.n	800654e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	daf2      	bge.n	8006504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f043 0201 	orr.w	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3301      	adds	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a09      	ldr	r2, [pc, #36]	@ (800655c <USB_CoreReset+0x64>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e006      	b.n	800654e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b01      	cmp	r3, #1
 800654a:	d0f0      	beq.n	800652e <USB_CoreReset+0x36>

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	00030d40 	.word	0x00030d40

08006560 <memset>:
 8006560:	4402      	add	r2, r0
 8006562:	4603      	mov	r3, r0
 8006564:	4293      	cmp	r3, r2
 8006566:	d100      	bne.n	800656a <memset+0xa>
 8006568:	4770      	bx	lr
 800656a:	f803 1b01 	strb.w	r1, [r3], #1
 800656e:	e7f9      	b.n	8006564 <memset+0x4>

08006570 <__libc_init_array>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	4d0d      	ldr	r5, [pc, #52]	@ (80065a8 <__libc_init_array+0x38>)
 8006574:	4c0d      	ldr	r4, [pc, #52]	@ (80065ac <__libc_init_array+0x3c>)
 8006576:	1b64      	subs	r4, r4, r5
 8006578:	10a4      	asrs	r4, r4, #2
 800657a:	2600      	movs	r6, #0
 800657c:	42a6      	cmp	r6, r4
 800657e:	d109      	bne.n	8006594 <__libc_init_array+0x24>
 8006580:	4d0b      	ldr	r5, [pc, #44]	@ (80065b0 <__libc_init_array+0x40>)
 8006582:	4c0c      	ldr	r4, [pc, #48]	@ (80065b4 <__libc_init_array+0x44>)
 8006584:	f000 f818 	bl	80065b8 <_init>
 8006588:	1b64      	subs	r4, r4, r5
 800658a:	10a4      	asrs	r4, r4, #2
 800658c:	2600      	movs	r6, #0
 800658e:	42a6      	cmp	r6, r4
 8006590:	d105      	bne.n	800659e <__libc_init_array+0x2e>
 8006592:	bd70      	pop	{r4, r5, r6, pc}
 8006594:	f855 3b04 	ldr.w	r3, [r5], #4
 8006598:	4798      	blx	r3
 800659a:	3601      	adds	r6, #1
 800659c:	e7ee      	b.n	800657c <__libc_init_array+0xc>
 800659e:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a2:	4798      	blx	r3
 80065a4:	3601      	adds	r6, #1
 80065a6:	e7f2      	b.n	800658e <__libc_init_array+0x1e>
 80065a8:	08006604 	.word	0x08006604
 80065ac:	08006604 	.word	0x08006604
 80065b0:	08006604 	.word	0x08006604
 80065b4:	08006608 	.word	0x08006608

080065b8 <_init>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	bf00      	nop
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr

080065c4 <_fini>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	bf00      	nop
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr
